{"componentChunkName":"component---src-components-mdx-layout-js","path":"/blog/ui/click-to-copy/ClipboardIcon/","result":{"data":{"mdx":{"id":"aa033b09-e436-5613-b08f-d2c6c22d6a0f","frontmatter":{"title":"ClipboardIcon","commentApiId":null},"timeToRead":1,"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"ClipboardIcon\",\n  \"menu\": \"Blog\",\n  \"draft\": true\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"copyicon\"\n  }, \"CopyIcon\"), mdx(\"p\", null, \"By itself the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"CopyIcon\"), \" doesnt really do much beyond\\nlooking nice.\"), mdx(Box, {\n    mdxType: \"Box\"\n  }, mdx(CopyIcon, {\n    mdxType: \"CopyIcon\"\n  })), mdx(\"p\", null, \"As you can see it gives the user visual feedback via\\na hover color, but that is really all\"), mdx(\"p\", null, \"To make real use of it, use its companion \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ClipBoardHelper\")), mdx(\"p\", null, \"The helpers job is to handle clicks, which will call a click\\ncallback and it provides a popover and updates its text. \"), mdx(Box, {\n    mb: 3,\n    mdxType: \"Box\"\n  }, mdx(ClipBoardHelper, {\n    copyText: \"testing 1 2 3\",\n    mdxType: \"ClipBoardHelper\"\n  })), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<ClipBoardHelper  textToCopy=\\\"testing 1 2 3\\\"/>\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"aa033b09-e436-5613-b08f-d2c6c22d6a0f"}}}