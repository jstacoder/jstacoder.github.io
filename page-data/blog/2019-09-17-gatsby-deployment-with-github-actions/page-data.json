{"componentChunkName":"component---src-components-mdx-layout-js","path":"/blog/2019-09-17-gatsby-deployment-with-github-actions/","result":{"data":{"mdx":{"id":"bb0c1881-de41-50c7-a9d6-5356299cf417","frontmatter":{"title":"Deploy Gatsby Site Using Github Actions","commentApiId":7},"timeToRead":2,"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Deploy Gatsby Site Using Github Actions\",\n  \"draft\": false,\n  \"layout\": \"sidebar\",\n  \"commentApiId\": 7\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar PhotoCredit = makeShortcode(\"PhotoCredit\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"img\", {\n    alt: \"deployment\",\n    src: \"/img/deploy-kaip.jpg\"\n  }), mdx(PhotoCredit, {\n    username: 'kaip',\n    mdxType: \"PhotoCredit\"\n  }), mdx(\"h3\", {\n    \"id\": \"why-automate-stuff\"\n  }, \"Why Automate Stuff?\"), mdx(\"p\", null, \"I have recently been developing my Gatsby sites on various platforms,\\nosx, windows, and between them linux via docker. \"), mdx(\"p\", null, \"My main goal is the ability to do \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"gatsby build\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"gh-pages -d public -b master\"), \" without issues between platforms\"), mdx(\"p\", null, \"what kind of issues am i talking about?\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"node\"), \" \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"memory\"), \" issues\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"On both osx and windows i occsionally get odd \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"out of memory\"), \" errors in node when building  \")))), mdx(\"p\", null, \"Because of that I found it helpful to just use docker and docker-compose to run the build command\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"cross\"), \" \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"platform\"), \" \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"sharp\"), \" issues\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"because i like to run the dev server locally\\n(more because its one less step than anything)\\ni ended up with running into issues with sharp in the node modules\\nbeing built for the wrong plartform\")))), mdx(\"p\", null, \"Now there are ways to avoid that as well, mainly using docker volumes to isolate the node modules between platforms,\\nbut it still didnt feel right\"), mdx(\"h3\", {\n    \"id\": \"github-actions\"\n  }, \"Github Actions\"), mdx(\"p\", null, \"Then i found Github Actions\"), mdx(\"p\", null, \"According to github using them you can automate any software development process.\"), mdx(\"p\", null, \"You do that by adding a workflow configuration file to your git repo,\\nthen based on that file github will do your bidding. It can do all kinds of\\nthings for you:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"run shell commands in various shells including:\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"bash\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"python\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"ruby\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"run a javascript file that has access to your code and access to an api to manipulate various things\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"all the way to launching a docker container with w/e dockerfile you want\"))), mdx(\"p\", null, \"Talk about convienient!\"), mdx(\"p\", null, \"Now This will work, let see what it will take to setup a workflow to just build and deploy my gatsby sites.\"), mdx(\"p\", null, \"First we need to give our worklow a name:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-yml\"\n  }), \"name: Build and Deploy Gatsby\\n\")), mdx(\"p\", null, \"Luckily the syntax is pretty easy, so to start you need to tell it when to run,\\nI want it to run when i push changes to my develop branch, other branchs\\nthat arent master are branchs for features and bugs, and the master branch i deploy the site to so it sould only run the builds when\\ni push to the develop branch. \"), mdx(\"p\", null, \"Here is how to do it:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-yml\"\n  }), \"on:\\n  push:\\n    branches:\\n      - develop      \\n\")), mdx(\"p\", null, \"Ok now we define our jobs, i say jobs because we can have multiple\\nbut i only have one\"), mdx(\"p\", null, \"To define jobs you have a top-level \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"jobs\"), \" key\\nwhose value is a mapping and the key is the jobs name\\nand its value is another mapping to define the job, my jos name is build\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-yml\"\n  }), \"jobs: \\n  build:    \\n\")), mdx(\"p\", null, \"To define a job it needs a name, it needs to know what kind of platform to run on\\nand it needs a list of steps to run\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-yml\"\n  }), \"    name: build\\n    runs-on: ubuntu-latest\\n    steps:\\n\")), mdx(\"p\", null, \"To define a step you have a few options you can:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"use predefined or your own custom actions (which can be javascript files or dockerfiles)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"run shell commands\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"set environment variables\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"use secrets set in githubs settings\\namoung other things\")), mdx(\"p\", null, \"for our first step we checkout our repo using a predefined action from github\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-yml\"\n  }), \"      - name: checkout \\n        uses: actions/checkout@v1\\n\")), mdx(\"p\", null, \"our next step installs our dependencies\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-yml\"\n  }), \"      - name: install\\n        run: yarn install \\n\")), mdx(\"p\", null, \"the next step runs \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"yarn build\"), \" which is an alias for \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"gatsby build --prefix-paths\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-yml\"\n  }), \"      - name: build\\n        run: yarn build\\n\")), mdx(\"p\", null, \"Finally i deploy it to github pages using another predefined action,\\nbut because its pushing to our repo it needs an api token, but luckily\\ngithub provides one as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"secrets.GITHUB_TOKEN\"), \" you just need to add it as\\nan environment variable\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-yml\"\n  }), \"      - name: deploy\\n        uses: maxheld83/ghpages@v0.2.1\\n        env: \\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} \\n          BUILD_DIR: 'public/'\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"bb0c1881-de41-50c7-a9d6-5356299cf417"}}}