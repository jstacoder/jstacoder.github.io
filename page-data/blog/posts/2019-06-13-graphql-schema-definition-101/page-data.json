{"componentChunkName":"component---src-components-mdx-layout-js","path":"/blog/posts/2019-06-13-graphql-schema-definition-101/","result":{"data":{"mdx":{"id":"c968cc48-1154-54b4-a238-ecdec1210eae","frontmatter":{"title":"GraphQL schema definition 101","commentApiId":null},"timeToRead":1,"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"date_added\": \"2019-06-13T15:13:05.000Z\",\n  \"date_modified\": \"2019-06-13T15:13:05.000Z\",\n  \"layout\": \"sidebar\",\n  \"tags\": [\"code\", \"graphql\"],\n  \"title\": \"GraphQL schema definition 101\",\n  \"published\": true,\n  \"categories\": [\"Programming\"],\n  \"draft\": true\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"graphql-schema-101\"\n  }, \"Graphql schema 101\"), mdx(\"hr\", null), mdx(\"h3\", {\n    \"id\": \"why-might-you-need-to-define-a-graphql-schema\"\n  }, \"Why might you need to define a graphql schema?\"), mdx(\"p\", null, \"There are a few reasons this could happen:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"You could find a rest api you would like to wrap with a simpler interface\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"you might want to add some custom data to query in your gatsbjs site\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"you could just want to ensure your gatsby node field is using the correct data type\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"blah blah blah\")), mdx(\"p\", null, \"Lets look at a simple type to represent a customer\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-graphql\"\n  }), \"type Customer {\\n  firstName: String!\\n  lastName: String!\\n  age: Int!\\n}\\n\")), mdx(\"p\", null, \"Here we are defining a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Customer\"), \" type\"), mdx(\"p\", null, \"It has a first name, a last name (strings) and an age (an int). The exclamation points following the type names signify that the fields are required.\"), mdx(\"p\", null, \"Simple enough, but things start to get more complex when you want to model something on our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Customer\"), \" that doesn't map to a primitive like a String or an Int, Like lets say we want to also have types for \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Product\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Order\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-graphql\"\n  }), \"type Customer {\\n  ...\\n  orders: [Order]!\\n}\\n\\ntype Product {\\n  name: String!\\n}\\n\\ntype Order {\\n  products: [Product!]!\\n  customer: Customer!\\n}\\n\")), mdx(\"p\", null, \"So now we have a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Customer\"), \" and we can track their orders of given products.\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"c968cc48-1154-54b4-a238-ecdec1210eae"}}}