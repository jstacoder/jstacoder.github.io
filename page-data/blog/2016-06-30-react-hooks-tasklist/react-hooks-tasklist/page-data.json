{"componentChunkName":"component---src-components-mdx-layout-js","path":"/blog/2016-06-30-react-hooks-tasklist/react-hooks-tasklist/","result":{"data":{"mdx":{"id":"9c39d1c8-d3c4-583f-8ccd-b1fbd58db24b","frontmatter":{"title":"React Hooks Tasklist","commentApiId":10},"timeToRead":1,"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"React Hooks Tasklist\",\n  \"name\": \"React Hooks Tasklist\",\n  \"menu\": \"Blog\",\n  \"date\": \"2015-05-06T23:46:37.121Z\",\n  \"layout\": \"stacked\",\n  \"path\": \"/my-second-post/\",\n  \"category\": \"FrontEnd\",\n  \"description\": \"Civil society; save lives pathway to a better life public-private partnerships solution, tackle, protect UNHCR social movement Jane Addams sustainable campaign respond equality.\",\n  \"addUnsplashImage\": true,\n  \"published\": true,\n  \"tags\": [\"programming\"],\n  \"categories\": [\"dotnetcore\", \"Python\"],\n  \"draft\": false,\n  \"commentApiId\": 10\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar PhotoCredit = makeShortcode(\"PhotoCredit\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"img\", {\n    alt: \"tasklist\",\n    src: \"/img/tasklist.jpg\"\n  }), mdx(PhotoCredit, {\n    username: \"kellysikkema\",\n    mdxType: \"PhotoCredit\"\n  }), mdx(\"h1\", {\n    \"id\": \"how-to-code-a-task-list-using-react\"\n  }, \"How to code a task list using React\"), mdx(Box, {\n    p: 0,\n    m: 0,\n    bg: \"gray.3\",\n    mdxType: \"Box\"\n  }, mdx(TaskList, {\n    mdxType: \"TaskList\"\n  })), mdx(\"h2\", {\n    \"id\": \"here-is-how-to-write-a-task-list\"\n  }, \"Here is how to write a task list\"), mdx(\"h3\", {\n    \"id\": \"first-we-handle-the-tasks\"\n  }, \"First we handle the tasks\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"We will start by creating some action type constants\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"filename=type.js\",\n    \"filename\": \"type.js\"\n  }), \"export const ADD_TASK = 'ADD_TASK'\\nexport const TOGGLE_COMPLETE = 'TOGGLE_COMPLETE'\\nexport const TOGGLE_ARCHIVED = 'TOGGLE_ARCHIVED'\\n\")), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Now lets create an empty react context,\\nso the rest of our app can share the values\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"filename=task-context.js\",\n    \"filename\": \"task-context.js\"\n  }), \"import React, { createContext } from 'react'\\n\\nexport const TaskContext = createContext({\\n  tasks: [],\\n  displayableTasks: [],\\n  addTaskInput: '',\\n  resetAddTaskInput: () => {},\\n  addTask: () => {},\\n  toggleComplete: () => {},\\n  toggleArchived: () => {},\\n  setAddTaskInput: () => {},\\n})\\n\")), mdx(\"p\", null, \"The next step is to write a redux style reducer\\nto update the state of our component\"), mdx(\"p\", null, \"Which we will use with the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"React.useReducer\"), \" hook soon\"), mdx(\"p\", null, \"The main things we do here, is map our action types to\\nfunctions that will update the state as needed.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"filename=task-reducer.js\",\n    \"filename\": \"task-reducer.js\"\n  }), \"import uuid from 'uuid/v4'\\n\\nimport { ADD_TASK, TOGGLE_ARCHIVED, TOGGLE_COMPLETE } from './types'\\n\\nconst addTask = text => ({\\n  text,\\n  date: new Date(),\\n  id: uuid(),\\n  complete: false,\\n  archived: false,\\n})\\n\\nconst addTaskToTasks = (text, tasks) => [...tasks, addTask(text)]\\n\\nconst toggleComplete = task => ({\\n  ...task,\\n  complete: !task.complete,\\n})\\n\\nconst completeTaskById = (taskId, tasks) =>\\n  tasks.map(task => (task.id !== taskId ? task : toggleComplete(task)))\\n\\nconst toggleArchived = task => ({\\n  ...task,\\n  archived: !task.archived,\\n})\\n\\nconst archiveTaskById = (taskId, tasks) =>\\n  tasks.map(task => (task.id !== taskId ? task : toggleArchived(task)))\\n\\nexport default (state, { type, value } = {}) => {\\n  const returnValues = {\\n    [ADD_TASK]: addTaskToTasks,\\n    [TOGGLE_COMPLETE]: completeTaskById,\\n    [TOGGLE_ARCHIVED]: archiveTaskById,\\n  }\\n\\n  if (type in returnValues) {\\n    return returnValues[type](value, state)\\n  }\\n\\n  return state\\n}\\n\")), mdx(\"p\", null, \"Now we need to tie all of that logic up into our own hook\"), mdx(\"p\", null, \"Which we will call \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useTasks\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"filename=tasks.js\",\n    \"filename\": \"tasks.js\"\n  }), \"import React, { useState, useReducer } from 'react'\\n\\nimport { ADD_TASK, TOGGLE_COMPLETE, TOGGLE_ARCHIVED } from './types'\\nimport taskReducer from './task-reducer'\\n\\nconst useTasks = (initialTasks = []) => {\\n  const [tasks, dispatch] = useReducer(taskReducer, initialTasks)\\n  const [addTaskInput, setAddTaskInput] = useState('')\\n\\n  const resetAddTaskInput = () => {\\n    setAddTaskInput('')\\n  }\\n\\n  const addTask = text => {\\n    dispatch({\\n      type: ADD_TASK,\\n      value: text,\\n    })\\n    resetAddTaskInput()\\n  }\\n\\n  const toggleComplete = taskId => {\\n    dispatch({\\n      type: TOGGLE_COMPLETE,\\n      value: taskId,\\n    })\\n  }\\n\\n  const toggleArchived = taskId => {\\n    dispatch({\\n      type: TOGGLE_ARCHIVED,\\n      value: taskId,\\n    })\\n  }\\n\\n  return {\\n    tasks,\\n    resetAddTaskInput,\\n    addTask,\\n    toggleComplete,\\n    toggleArchived,\\n    addTaskInput,\\n    setAddTaskInput,\\n  }\\n}\\n\\nexport default useTasks\\n\")), mdx(\"p\", null, \"Now in we can start creating our component.\"), mdx(\"p\", null, \"We will start by plugging our task stuff from\\nour \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useTasks\"), \" hook into our custom context.\"), mdx(\"p\", null, \"After defining this component we will have 2 new components to write:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"TaskHeading - for our task list header\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"TaskListBody - to actually display our tasks\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"filename=tasklist.jsx\",\n    \"filename\": \"tasklist.jsx\"\n  }), \"import React from 'react'\\nimport { Flex, BorderBox } from '@primer/components'\\n\\nimport { TaskContext } from './task-context'\\nimport TaskHeading from './task-heading'\\nimport TaskListBody from './tasklist-body'\\nimport useTasks from './tasks'\\n\\nconst TaskList = () => {\\n  const {\\n    toggleComplete,\\n    toggleArchived,\\n    tasks,\\n    addTaskInput,\\n    setAddTaskInput,\\n    addTask,\\n  } = useTasks()\\n\\n  const displayableTasks = tasks.filter(task => !task.archived)\\n\\n  const value = {\\n    tasks,\\n    displayableTasks,\\n    toggleComplete,\\n    toggleArchived,\\n    addTask,\\n    addTaskInput,\\n    setAddTaskInput,\\n  }\\n\\n  return (\\n    <TaskContext.Provider value={value}>\\n      <BorderBox p={2} m={3}>\\n        <TaskHeading />\\n        <BorderBox border={0} borderBottom={1} m={1} p={1}>\\n          <Flex p={2} m={2} flexDirection={'column'}>\\n            <TaskListBody />\\n          </Flex>\\n        </BorderBox>\\n      </BorderBox>\\n    </TaskContext.Provider>\\n  )\\n}\\n\\nexport default TaskList\\n\")), mdx(\"p\", null, \"Now we need a heading to display how\\nmany tasks are in the list for the user\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"filename=task-heading.jsx\",\n    \"filename\": \"task-heading.jsx\"\n  }), \"import React, { useContext } from 'react'\\nimport { Box, CounterLabel, Heading, TextInput} from '@primer/components'\\n\\nimport { TaskContext } from './task-context'\\n\\nconst TaskHeading = () =>{\\n  const {\\n    addTask,\\n    addTaskInput,\\n    tasks,\\n    setAddTaskInput,\\n  } = useContext(TaskContext)\\n\\n  const onChange = e =>{\\n    setAddTaskInput(e.target.value)\\n  }\\n\\n  const onSubmit = e =>{\\n    e.preventDefault()\\n    addTask(addTaskInput)\\n  }\\n\\n  const displayableTasks = tasks.filter(task=> !task.archived)\\n\\n  return (\\n    <React.Fragment>\\n     <Heading ml={2}>\\n        <CounterLabel mr={2}>{displayableTasks.length}</CounterLabel> Tasks\\n      </Heading>\\n      <Box m={2}>\\n        <form onSubmit={onSubmit}>\\n          <TextInput value={addTaskInput} placeholder={'add new task'} onChange={onChange}/>\\n        </form>\\n      </Box>\\n    </React.Fragment>\\n  )\\n}\\n\\nexport default TaskHeading\\n\")), mdx(\"p\", null, \"Now we need to write our TaskListBody component,\\nwhich will leave us with another component to\\nwrite: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TaskListItem\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"filename=tasklist-body.jsx\",\n    \"filename\": \"tasklist-body.jsx\"\n  }), \"import React, { useContext, Fragment } from 'react'\\nimport { Text } from '@primer/components'\\n\\nimport { TaskContext } from './task-context'\\n\\nimport TaskListItem from './tasklist-item'\\n\\nconst TaskListBody = () => {\\n  const { displayableTasks } = useContext(TaskContext)\\n  console.log(displayableTasks)\\n  return (\\n    <Fragment>\\n      {displayableTasks.length !== 0 ? (\\n        displayableTasks.map(task => <TaskListItem key={task.id} task={task} />)\\n      ) : (\\n        <Text p={2} m={3}>\\n          No Tasks Currently\\n        </Text>\\n      )}\\n    </Fragment>\\n  )\\n}\\n\\nexport default TaskListBody\\n\")), mdx(\"p\", null, \"Now we define our task list item,\\nbut because we want parts of the item\\nto have unique behavior we will again need to define\\n2 new components when we finish:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Checkbox - so we dont have to rely on ugly html checkboxs\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"TaskText - to handle crossing out our text when we complete an item\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"filename=tasklist-item.jsx\",\n    \"filename\": \"tasklist-item.jsx\"\n  }), \"import React, { useContext } from 'react'\\nimport { BorderBox, Flex, StyledOcticon } from '@primer/components'\\nimport { X as CloseIcon } from '@primer/octicons-react'\\n\\nimport Checkbox from './task-checkbox'\\nimport TaskText from './task-text'\\nimport { TaskContext } from './task-context'\\n\\nexport default ({ task }) => {\\n  const { complete, text, id: taskId } = task\\n\\n  const { toggleComplete, toggleArchived } = useContext(TaskContext)\\n  return (\\n    <BorderBox\\n      style={{ flexDirection: 'row' }}\\n      display={'flex'}\\n      p={2}\\n      mb={2}\\n      border={0}\\n      borderBottom={1}\\n    >\\n      <Flex flexDirection={'row'} flexBasis={1}>\\n        <Flex.Item flex={1} onClick={() => toggleComplete(taskId)}>\\n          <Checkbox checked={complete} />\\n        </Flex.Item>\\n        <Flex.Item flex={10} onClick={() => toggleComplete(taskId)}>\\n          <TaskText completed={complete}>{text}</TaskText>\\n        </Flex.Item>\\n        <Flex.Item onClick={() => toggleArchived(taskId)} flex={0}>\\n          <StyledOcticon icon={CloseIcon} size={15} color={'red.6'} />\\n        </Flex.Item>\\n      </Flex>\\n    </BorderBox>\\n  )\\n}\\n\")), mdx(\"p\", null, \"Ok now for the last 2, which thankfully are very simple:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"filename=task-checkbox.jsx\",\n    \"filename\": \"task-checkbox.jsx\"\n  }), \"import React from 'react'\\nimport { BorderBox, StyledOcticon } from '@primer/components'\\nimport { Check } from '@primer/octicons-react'\\n\\nexport default ({ checked }) => (\\n  <BorderBox textAlign={'center'} size={20} mr={2}>\\n    {checked ? (\\n      <StyledOcticon\\n        color={'green.6'}\\n        ml={1}\\n        verticalAlign={'text-top'}\\n        icon={Check}\\n        size={15}\\n      />\\n    ) : null}\\n  </BorderBox>\\n)\\n\")), mdx(\"p\", null, \"And finally\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"filename=task-text.jsx\",\n    \"filename\": \"task-text.jsx\"\n  }), \"import React from 'react'\\nimport styled, {css} from 'styled-components'\\nimport { Text } from '@primer/components'\\n\\nexport default styled(Text)`\\n  ${({completed})=> completed ? css`text-decoration: line-through` : ``};\\n  cursor: pointer;\\n`\\n\\n// cool\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"9c39d1c8-d3c4-583f-8ccd-b1fbd58db24b"}}}