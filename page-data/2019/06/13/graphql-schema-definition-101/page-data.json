{"componentChunkName":"component---src-templates-post-template-index-js","path":"/2019/06/13/graphql-schema-definition-101/","result":{"data":{"markdownRemark":{"html":"<h2>Graphql schema 101</h2>\n<hr>\n<h3>Why might you need to define a graphql schema?</h3>\n<p>There are a few reasons this could happen:</p>\n<ul>\n<li>You could find a rest api you would like to wrap with a simpler interface</li>\n<li>you might want to add some custom data to query in your gatsbjs site</li>\n<li>you could just want to ensure your gatsby node field is using the correct data type</li>\n<li>blah blah blah</li>\n</ul>\n<p>Lets look at a simple type to represent a customer</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Customer</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">firstName</span><span class=\"token punctuation\">:</span> String<span class=\"token operator\">!</span>\n  <span class=\"token attr-name\">lastName</span><span class=\"token punctuation\">:</span> String<span class=\"token operator\">!</span>\n  <span class=\"token attr-name\">age</span><span class=\"token punctuation\">:</span> Int<span class=\"token operator\">!</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Here we are defining a <code class=\"language-text\">Customer</code> type</p>\n<p>It has a first name, a last name (strings) and an age (an int). The exclamation points following the type names signify that the fields are required.</p>\n<p>Simple enough, but things start to get more complex when you want to model something on our <code class=\"language-text\">Customer</code> that doesnâ€™t map to a primitive like a String or an Int, Like lets say we want to also have types for <code class=\"language-text\">Product</code> and <code class=\"language-text\">Order</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Customer</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">...</span>\n  <span class=\"token attr-name\">orders</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>Order<span class=\"token punctuation\">]</span><span class=\"token operator\">!</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Product</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">name</span><span class=\"token punctuation\">:</span> String<span class=\"token operator\">!</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Order</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">products</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>Product<span class=\"token operator\">!</span><span class=\"token punctuation\">]</span><span class=\"token operator\">!</span>\n  <span class=\"token attr-name\">customer</span><span class=\"token punctuation\">:</span> Customer<span class=\"token operator\">!</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>So now we have a <code class=\"language-text\">Customer</code> and we can track their orders of given products.</p>","frontmatter":{"title":"GraphQL schema definition 101"},"timeToRead":1,"fields":{"postDate":"2019-06-13","slug":"/2019/06/13/graphql-schema-definition-101/"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/2019/06/13/graphql-schema-definition-101/","date":"2019-06-13"}}}