{"data":{"allMdx":{"posts":[{"post":{"fields":{"slug":"/blog/2016-06-30-react-hooks-tasklist/react-hooks-tasklist/"},"frontmatter":{"title":"React Hooks Tasklist","name":"React Hooks Tasklist","draft":false}}},{"post":{"fields":{"slug":"/blog/2019-06-01-vanilla-redux/"},"frontmatter":{"title":"Vanilla Redux üìù","name":"Vanilla Redux","draft":false}}},{"post":{"fields":{"slug":"/blog/2019-07-19-customize-react-live-editor/"},"frontmatter":{"title":"Customize React-Live Editor","name":null,"draft":true}}},{"post":{"fields":{"slug":"/blog/2019-08-28-ez-doc-site-with-docz/"},"frontmatter":{"title":"Ez Doc Site With Docz","name":null,"draft":false}}},{"post":{"fields":{"slug":"/blog/2019-09-17-gatsby-deployment-with-github-actions/"},"frontmatter":{"title":"Deploy Gatsby Site Using Github Actions","name":null,"draft":false}}},{"post":{"fields":{"slug":"/blog/2019-09-30-docz-layout-in-frontmatter/"},"frontmatter":{"title":"docz layout in frontmatter","name":null,"draft":true}}},{"post":{"fields":{"slug":"/blog/2019-10-01-overriding-mdx-in-docz/"},"frontmatter":{"title":"Overriding Mdx in Docz","name":null,"draft":false}}},{"post":{"fields":{"slug":"/blog/CommitBlock/commit-block-list/"},"frontmatter":{"title":"CommitBlockList","name":null,"draft":true}}},{"post":{"fields":{"slug":"/blog/grid/grid/"},"frontmatter":{"title":"Grid","name":null,"draft":true}}},{"post":{"fields":{"slug":"/blog/grid/grid2/"},"frontmatter":{"title":"Grid2","name":null,"draft":true}}},{"post":{"fields":{"slug":"/blog/posts/06-24-2019-dark-mode-hook/"},"frontmatter":{"title":"Dark mode hook","name":null,"draft":true}}},{"post":{"fields":{"slug":"/blog/posts/2019-06-09-graphql-and-gatsby/"},"frontmatter":{"title":"Using Graphql in Gatsbyjs","name":null,"draft":true}}},{"post":{"fields":{"slug":"/blog/posts/2019-06-13-graphql-schema-definition-101/"},"frontmatter":{"title":"GraphQL schema definition 101","name":null,"draft":true}}},{"post":{"fields":{"slug":"/blog/tree-view/select-dropbox-root-folder/"},"frontmatter":{"title":"Select Dropbox Root Folder","name":"select-dropbox-root-folder","draft":true}}},{"post":{"fields":{"slug":"/blog/ui/click-to-copy/ClipboardIcon/"},"frontmatter":{"title":"ClipboardIcon","name":null,"draft":true}}},{"post":{"fields":{"slug":"/blogs/CustomCheckbox/CustomCheckbox/"},"frontmatter":{"title":"CustomCheckbox","name":null,"draft":true}}},{"post":{"fields":{"slug":"/components/slider/slider/"},"frontmatter":{"title":"Slider component","name":null,"draft":false}}},{"post":{"fields":{"slug":"/flex/dynamic-flex/dynamic-flex/"},"frontmatter":{"title":"d-flex","name":"DynamicFlex","draft":true}}},{"post":{"fields":{"slug":"/general/flex-docs/"},"frontmatter":{"title":"Flex Docs","name":null,"draft":true}}},{"post":{"fields":{"slug":"/layouts/PageLayout/BaseLayout/"},"frontmatter":{"title":"Base Page Layout","name":null,"draft":true}}},{"post":{"fields":{"slug":"/layouts/PageLayout/column-layout/"},"frontmatter":{"title":"Column Page Layout","name":null,"draft":true}}},{"post":{"fields":{"slug":"/projects/alert/Alert/"},"frontmatter":{"title":"Alert Component","name":null,"draft":false}}},{"post":{"fields":{"slug":"/projects/alert/CloseButton/"},"frontmatter":{"title":"CloseButton","name":null,"draft":null}}}]},"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"title":"Using Graphql in Gatsbyjs","published":true},"fields":{"slug":"/2019/06/09/graphql-and-gatsby/"},"html":"<h1>Graphql why?</h1>\n<h3>You may have heard about Gatsby and that it uses graphql</h3>\n<p>This may cause you to ask:</p>\n<blockquote>\n<p>Why GraphQL? Do i really need to learn this to make use of Gatsby?</p>\n</blockquote>\n<p>So to answer your question:</p>\n<blockquote>\n<p>Because GraphQL is BaddASS and yes you need to learn it</p>\n</blockquote>\n<p>but don‚Äôt worry, it‚Äôs not that hard.</p>\n<p>Lets look at what it means to query things in graphql:</p>\n<ul>\n<li>first we will go over graphql query syntax and schema definitions</li>\n<li>then well look at what data we would query for in Gatsby and why</li>\n<li>and we will tie it all together by showing how to get the data in Gatsby using graphql queries</li>\n</ul>\n<h3>What is a graphql query?</h3>"}},{"node":{"frontmatter":{"title":"GraphQL schema definition 101","published":true},"fields":{"slug":"/2019/06/13/graphql-schema-definition-101/"},"html":"<h2>Graphql schema 101</h2>\n<hr>\n<h3>Why might you need to define a graphql schema?</h3>\n<p>There are a few reasons this could happen:</p>\n<ul>\n<li>You could find a rest api you would like to wrap with a simpler interface</li>\n<li>you might want to add some custom data to query in your gatsbjs site</li>\n<li>you could just want to ensure your gatsby node field is using the correct data type</li>\n<li>blah blah blah</li>\n</ul>\n<p>Lets look at a simple type to represent a customer</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Customer</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">firstName</span><span class=\"token punctuation\">:</span> String<span class=\"token operator\">!</span>\n  <span class=\"token attr-name\">lastName</span><span class=\"token punctuation\">:</span> String<span class=\"token operator\">!</span>\n  <span class=\"token attr-name\">age</span><span class=\"token punctuation\">:</span> Int<span class=\"token operator\">!</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Here we are defining a <code class=\"language-text\">Customer</code> type</p>\n<p>It has a first name, a last name (strings) and an age (an int). The exclamation points following the type names signify that the fields are required.</p>\n<p>Simple enough, but things start to get more complex when you want to model something on our <code class=\"language-text\">Customer</code> that doesn‚Äôt map to a primitive like a String or an Int, Like lets say we want to also have types for <code class=\"language-text\">Product</code> and <code class=\"language-text\">Order</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Customer</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">...</span>\n  <span class=\"token attr-name\">orders</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>Order<span class=\"token punctuation\">]</span><span class=\"token operator\">!</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Product</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">name</span><span class=\"token punctuation\">:</span> String<span class=\"token operator\">!</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Order</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">products</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>Product<span class=\"token operator\">!</span><span class=\"token punctuation\">]</span><span class=\"token operator\">!</span>\n  <span class=\"token attr-name\">customer</span><span class=\"token punctuation\">:</span> Customer<span class=\"token operator\">!</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>So now we have a <code class=\"language-text\">Customer</code> and we can track their orders of given products.</p>"}}]}}}