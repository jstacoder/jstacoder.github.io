{"version":3,"sources":["webpack:///./src/pages/index.js","webpack:///./src/components/Adsense/index.js","webpack:///./src/templates/Post/index.js"],"names":["__webpack_require__","r","__webpack_exports__","d","pageQuery","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","lodash_get__WEBPACK_IMPORTED_MODULE_1__","lodash_get__WEBPACK_IMPORTED_MODULE_1___default","templates_Post__WEBPACK_IMPORTED_MODULE_2__","components_Meta__WEBPACK_IMPORTED_MODULE_3__","components_Layout__WEBPACK_IMPORTED_MODULE_4__","BlogIndex","_ref","data","location","posts","get","a","createElement","site","map","_ref2","i","post","options","isIndex","key","Adsense","componentDidMount","this","props","clientId","window","adsbygoogle","push","render","_this$props","slotId","format","react_default","className","style","display","data-ad-client","data-ad-slot","data-ad-format","React","Component","getAd","Post","_data$frontmatter","frontmatter","category","tags","description","title","path","date","image","adsense","html","isMore","match","fixed","gatsby_browser_entry","boxShadow","to","dateTime","Badges","items","primary","gatsby_image_default","margin","dangerouslySetInnerHTML","__html","getDescription","Button","label","components_Adsense","body","replace","split","_ref3","item"],"mappings":"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","file":"component---src-pages-index-js-726667098a49c44584b6.js","sourcesContent":["import { graphql } from 'gatsby'\r\nimport React from 'react'\r\nimport get from 'lodash/get'\r\n\r\nimport Post from 'templates/Post'\r\nimport Meta from 'components/Meta'\r\nimport Layout from 'components/Layout'\r\n\r\nconst BlogIndex = ({ data, location }) => {\r\n  const posts = get(data, 'remark.posts')\r\n  return (\r\n    <Layout location={location}>\r\n      <Meta site={get(data, 'site.meta')} />\r\n      {posts.map(({ post }, i) => (\r\n        <Post\r\n          data={post}\r\n          options={{\r\n            isIndex: true,\r\n          }}\r\n          key={i}\r\n        />\r\n      ))}\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport default BlogIndex\r\n\r\nexport const pageQuery = graphql`\r\n  query IndexQuery {\r\n    site {\r\n      meta: siteMetadata {\r\n        title\r\n        description\r\n        url: siteUrl\r\n        author\r\n        twitter\r\n        adsense\r\n      }\r\n    }\r\n    remark: allMarkdownRemark(\r\n      sort: { fields: [frontmatter___date], order: DESC }\r\n    ) {\r\n      posts: edges {\r\n        post: node {\r\n          html\r\n          frontmatter {\r\n            layout\r\n            title\r\n            path\r\n            category\r\n            tags\r\n            description\r\n            date(formatString: \"YYYY/MM/DD\")\r\n            image {\r\n              childImageSharp {\r\n                fixed(width: 500) {\r\n                  ...GatsbyImageSharpFixed_withWebp\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n","import React from 'react'\r\n\r\nclass Adsense extends React.Component {\r\n  componentDidMount() {\r\n    const { clientId } = this.props\r\n    if (clientId) {\r\n      ;(window.adsbygoogle = window.adsbygoogle || []).push({})\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { clientId, slotId, format } = this.props\r\n\r\n    return clientId ? (\r\n      <div className=\"ad\">\r\n        <ins\r\n          className=\"adsbygoogle\"\r\n          style={{ display: 'block' }}\r\n          data-ad-client={clientId}\r\n          data-ad-slot={slotId}\r\n          data-ad-format={format}\r\n        />\r\n      </div>\r\n    ) : (\r\n      ''\r\n    )\r\n  }\r\n}\r\nexport default Adsense\r\n","import { Link } from 'gatsby'\r\nimport get from 'lodash/get'\r\nimport React from 'react'\r\nimport map from 'lodash/map'\r\nimport Img from 'gatsby-image'\r\n\r\nimport Adsense from 'components/Adsense'\r\nimport Footer from 'components/Footer'\r\nimport './style.scss'\r\n\r\nconst Post = ({ data, options }) => {\r\n  const {\r\n    category,\r\n    tags,\r\n    description,\r\n    title,\r\n    path,\r\n    date,\r\n    image,\r\n  } = data.frontmatter\r\n  const { isIndex, adsense } = options\r\n  const html = get(data, 'html')\r\n  const isMore = isIndex && !!html.match('<!--more-->')\r\n  const fixed = get(image, 'childImageSharp.fixed')\r\n\r\n  return (\r\n    <div className=\"article\" key={path}>\r\n      <div className=\"container\">\r\n        <div className=\"info\">\r\n          <Link style={{ boxShadow: 'none' }} to={path}>\r\n            <h1>{title}</h1>\r\n            <time dateTime={date}>{date}</time>\r\n          </Link>\r\n          {Badges({ items: [category], primary: true })}\r\n          {Badges({ items: tags })}\r\n        </div>\r\n        <div className=\"content\">\r\n          <p>{description}</p>\r\n          {fixed ? (\r\n            <Img fixed={fixed} style={{ display: 'block', margin: '0 auto' }} />\r\n          ) : (\r\n            ''\r\n          )}\r\n        </div>\r\n        <div\r\n          className=\"content\"\r\n          dangerouslySetInnerHTML={{\r\n            __html: isMore ? getDescription(html) : html,\r\n          }}\r\n        />\r\n        {isMore ? Button({ path, label: 'MORE', primary: true }) : ''}\r\n        {getAd(isIndex, adsense)}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Post\r\n\r\nconst getAd = (isIndex, adsense) => {\r\n  return !isIndex ? <Adsense clientId={adsense} slotId=\"\" format=\"auto\" /> : ''\r\n}\r\n\r\nconst getDescription = body => {\r\n  body = body.replace(/<blockquote>/g, '<blockquote class=\"blockquote\">')\r\n  if (body.match('<!--more-->')) {\r\n    body = body.split('<!--more-->')\r\n    if (typeof body[0] !== 'undefined') {\r\n      return body[0]\r\n    }\r\n  }\r\n  return body\r\n}\r\n\r\nconst Button = ({ path, label, primary }) => (\r\n  <Link className=\"readmore\" to={path}>\r\n    <span\r\n      className={`btn btn-outline-primary btn-block ${\r\n        primary ? 'btn-outline-primary' : 'btn-outline-secondary'\r\n      }`}\r\n    >\r\n      {label}\r\n    </span>\r\n  </Link>\r\n)\r\n\r\nconst Badges = ({ items, primary }) =>\r\n  map(items, (item, i) => {\r\n    return (\r\n      <span\r\n        className={`badge ${primary ? 'badge-primary' : 'badge-secondary'}`}\r\n        key={i}\r\n      >\r\n        {item}\r\n      </span>\r\n    )\r\n  })\r\n"],"sourceRoot":""}