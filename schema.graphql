# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
  query: Query
}

"Represents an object which can take actions on GitHub. Typically a User or Bot."
interface Github_Actor {
  "A URL pointing to the actor's public avatar."
  avatarUrl(
    #The size of the resulting square image.
    size: Int
  ): Github_URI!
  "The username of the actor."
  login: String!
  "The HTTP path for this actor."
  resourcePath: Github_URI!
  "The HTTP URL for this actor."
  url: Github_URI!
}

"An object that can have users assigned to it."
interface Github_Assignable {
  "A list of Users assigned to this object."
  assignees(
    #Returns the elements in the list that come after the specified cursor.
    after: String,
    #Returns the elements in the list that come before the specified cursor.
    before: String,
    #Returns the first _n_ elements from the list.
    first: Int,
    #Returns the last _n_ elements from the list.
    last: Int
  ): Github_UserConnection!
}

"An object that can be closed"
interface Github_Closable {
  "`true` if the object is closed (definition of closed may depend on type)"
  closed: Boolean!
  "Identifies the date and time when the object was closed."
  closedAt: Github_DateTime
}

"Represents a comment."
interface Github_Comment {
  "The actor who authored the comment."
  author: Github_Actor
  "Author's association with the subject of the comment."
  authorAssociation: Github_CommentAuthorAssociation!
  "The body as Markdown."
  body: String!
  "The body rendered to HTML."
  bodyHTML: Github_HTML!
  "The body rendered to text."
  bodyText: String!
  "Identifies the date and time when the object was created."
  createdAt: Github_DateTime!
  "Check if this comment was created via an email reply."
  createdViaEmail: Boolean!
  "The actor who edited the comment."
  editor: Github_Actor
  id: ID!
  "Check if this comment was edited and includes an edit with the creation data"
  includesCreatedEdit: Boolean!
  "The moment the editor made the last edit"
  lastEditedAt: Github_DateTime
  "Identifies when the comment was published at."
  publishedAt: Github_DateTime
  "Identifies the date and time when the object was last updated."
  updatedAt: Github_DateTime!
  "A list of edits to this content."
  userContentEdits(
    #Returns the elements in the list that come after the specified cursor.
    after: String,
    #Returns the elements in the list that come before the specified cursor.
    before: String,
    #Returns the first _n_ elements from the list.
    first: Int,
    #Returns the last _n_ elements from the list.
    last: Int
  ): Github_UserContentEditConnection
  "Did the viewer author this comment."
  viewerDidAuthor: Boolean!
}

"Entities that can be deleted."
interface Github_Deletable {
  "Check if the current viewer can delete this object."
  viewerCanDelete: Boolean!
}

"Represents a Git object."
interface Github_GitObject {
  "An abbreviated version of the Git object ID"
  abbreviatedOid: String!
  "The HTTP path for this Git object"
  commitResourcePath: Github_URI!
  "The HTTP URL for this Git object"
  commitUrl: Github_URI!
  id: ID!
  "The Git object ID"
  oid: Github_GitObjectID!
  "The Repository the Git object belongs to"
  repository: Github_Repository!
}

"Information about a signature (GPG or S/MIME) on a Commit or Tag."
interface Github_GitSignature {
  "Email used to sign this object."
  email: String!
  "True if the signature is valid and verified by GitHub."
  isValid: Boolean!
  "Payload for GPG signing object. Raw ODB object without the signature header."
  payload: String!
  "ASCII-armored signature header from object."
  signature: String!
  "GitHub user corresponding to the email signing this commit."
  signer: Github_User
  """
  The state of this signature. `VALID` if signature is valid and verified by
  GitHub, otherwise represents reason why signature is considered invalid.
  """
  state: Github_GitSignatureState!
  "True if the signature was made with GitHub's signing key."
  wasSignedByGitHub: Boolean!
}

"An object that can have labels assigned to it."
interface Github_Labelable {
  "A list of labels associated with the object."
  labels(
    #Returns the elements in the list that come after the specified cursor.
    after: String,
    #Returns the elements in the list that come before the specified cursor.
    before: String,
    #Returns the first _n_ elements from the list.
    first: Int,
    #Returns the last _n_ elements from the list.
    last: Int
  ): Github_LabelConnection
}

"An object that can be locked."
interface Github_Lockable {
  "Reason that the conversation was locked."
  activeLockReason: Github_LockReason
  "`true` if the object is locked"
  locked: Boolean!
}

"An object with an ID."
interface Github_Node {
  "ID of the object."
  id: ID!
}

"Represents an owner of a Project."
interface Github_ProjectOwner {
  id: ID!
  "Find project by number."
  project(
    #The project number to find.
    number: Int!
  ): Github_Project
  "A list of projects under the owner."
  projects(
    #Returns the elements in the list that come after the specified cursor.
    after: String,
    #Returns the elements in the list that come before the specified cursor.
    before: String,
    #Returns the first _n_ elements from the list.
    first: Int,
    #Returns the last _n_ elements from the list.
    last: Int,
    #Ordering options for projects returned from the connection
    orderBy: Github_ProjectOrder,
    #Query to search projects by, currently only searching by name.
    search: String,
    #A list of states to filter the projects by.
    states: [Github_ProjectState!]
  ): Github_ProjectConnection!
  "The HTTP path listing owners projects"
  projectsResourcePath: Github_URI!
  "The HTTP URL listing owners projects"
  projectsUrl: Github_URI!
  "Can the current viewer create new projects on this owner."
  viewerCanCreateProjects: Boolean!
}

"Represents a subject that can be reacted on."
interface Github_Reactable {
  "Identifies the primary key from the database."
  databaseId: Int
  id: ID!
  "A list of reactions grouped by content left on the subject."
  reactionGroups: [Github_ReactionGroup!]
  "A list of Reactions left on the Issue."
  reactions(
    #Returns the elements in the list that come after the specified cursor.
    after: String,
    #Returns the elements in the list that come before the specified cursor.
    before: String,
    #Allows filtering Reactions by emoji.
    content: Github_ReactionContent,
    #Returns the first _n_ elements from the list.
    first: Int,
    #Returns the last _n_ elements from the list.
    last: Int,
    #Allows specifying the order in which reactions are returned.
    orderBy: Github_ReactionOrder
  ): Github_ReactionConnection!
  "Can user react to this subject"
  viewerCanReact: Boolean!
}

"Represents an owner of a registry package."
interface Github_RegistryPackageOwner {
  id: ID!
}

"Represents an interface to search packages on an object."
interface Github_RegistryPackageSearch {
  id: ID!
}

"A subset of repository info."
interface Github_RepositoryInfo {
  "Identifies the date and time when the object was created."
  createdAt: Github_DateTime!
  "The description of the repository."
  description: String
  "The description of the repository rendered to HTML."
  descriptionHTML: Github_HTML!
  "Returns how many forks there are of this repository in the whole network."
  forkCount: Int!
  "Indicates if the repository has issues feature enabled."
  hasIssuesEnabled: Boolean!
  "Indicates if the repository has wiki feature enabled."
  hasWikiEnabled: Boolean!
  "The repository's URL."
  homepageUrl: Github_URI
  "Indicates if the repository is unmaintained."
  isArchived: Boolean!
  "Identifies if the repository is a fork."
  isFork: Boolean!
  "Indicates if the repository has been locked or not."
  isLocked: Boolean!
  "Identifies if the repository is a mirror."
  isMirror: Boolean!
  "Identifies if the repository is private."
  isPrivate: Boolean!
  "The license associated with the repository"
  licenseInfo: Github_License
  "The reason the repository has been locked."
  lockReason: Github_RepositoryLockReason
  "The repository's original mirror URL."
  mirrorUrl: Github_URI
  "The name of the repository."
  name: String!
  "The repository's name with owner."
  nameWithOwner: String!
  "The User owner of the repository."
  owner: Github_RepositoryOwner!
  "Identifies when the repository was last pushed to."
  pushedAt: Github_DateTime
  "The HTTP path for this repository"
  resourcePath: Github_URI!
  "A description of the repository, rendered to HTML without any links in it."
  shortDescriptionHTML(
    #How many characters to return.
    limit: Int = 200
  ): Github_HTML!
  "Identifies the date and time when the object was last updated."
  updatedAt: Github_DateTime!
  "The HTTP URL for this repository"
  url: Github_URI!
}

"Represents a object that belongs to a repository."
interface Github_RepositoryNode {
  "The repository associated with this node."
  repository: Github_Repository!
}

"Represents an owner of a Repository."
interface Github_RepositoryOwner {
  "A URL pointing to the owner's public avatar."
  avatarUrl(
    #The size of the resulting square image.
    size: Int
  ): Github_URI!
  id: ID!
  "The username used to login."
  login: String!
  "A list of repositories this user has pinned to their profile"
  pinnedRepositories(
    #Affiliation options for repositories returned from the connection
    affiliations: [Github_RepositoryAffiliation],
    #Returns the elements in the list that come after the specified cursor.
    after: String,
    #Returns the elements in the list that come before the specified cursor.
    before: String,
    #Returns the first _n_ elements from the list.
    first: Int,
    #If non-null, filters repositories according to whether they have been locked
    isLocked: Boolean,
    #Returns the last _n_ elements from the list.
    last: Int,
    #Ordering options for repositories returned from the connection
    orderBy: Github_RepositoryOrder,
    #If non-null, filters repositories according to privacy
    privacy: Github_RepositoryPrivacy
  ): Github_RepositoryConnection!
  "A list of repositories that the user owns."
  repositories(
    #Affiliation options for repositories returned from the connection
    affiliations: [Github_RepositoryAffiliation],
    #Returns the elements in the list that come after the specified cursor.
    after: String,
    #Returns the elements in the list that come before the specified cursor.
    before: String,
    #Returns the first _n_ elements from the list.
    first: Int,
    #If non-null, filters repositories according to whether they are forks of another repository
    isFork: Boolean,
    #If non-null, filters repositories according to whether they have been locked
    isLocked: Boolean,
    #Returns the last _n_ elements from the list.
    last: Int,
    #Ordering options for repositories returned from the connection
    orderBy: Github_RepositoryOrder,
    #If non-null, filters repositories according to privacy
    privacy: Github_RepositoryPrivacy
  ): Github_RepositoryConnection!
  "Find Repository."
  repository(
    #Name of Repository to find.
    name: String!
  ): Github_Repository
  "The HTTP URL for the owner."
  resourcePath: Github_URI!
  "The HTTP URL for the owner."
  url: Github_URI!
}

"Things that can be starred."
interface Github_Starrable {
  id: ID!
  "A list of users who have starred this starrable."
  stargazers(
    #Returns the elements in the list that come after the specified cursor.
    after: String,
    #Returns the elements in the list that come before the specified cursor.
    before: String,
    #Returns the first _n_ elements from the list.
    first: Int,
    #Returns the last _n_ elements from the list.
    last: Int,
    #Order for connection
    orderBy: Github_StarOrder
  ): Github_StargazerConnection!
  "Returns a boolean indicating whether the viewing user has starred this starrable."
  viewerHasStarred: Boolean!
}

"Entities that can be subscribed to for web and email notifications."
interface Github_Subscribable {
  id: ID!
  "Check if the viewer is able to change their subscription status for the repository."
  viewerCanSubscribe: Boolean!
  "Identifies if the viewer is watching, not watching, or ignoring the subscribable entity."
  viewerSubscription: Github_SubscriptionState
}

"Represents a type that can be retrieved by a URL."
interface Github_UniformResourceLocatable {
  "The HTML path to this resource."
  resourcePath: Github_URI!
  "The URL to this resource."
  url: Github_URI!
}

"Entities that can be updated."
interface Github_Updatable {
  "Check if the current viewer can update this object."
  viewerCanUpdate: Boolean!
}

"Comments that can be updated."
interface Github_UpdatableComment {
  "Reasons why the current viewer can not update this comment."
  viewerCannotUpdateReasons: [Github_CommentCannotUpdateReason!]!
}

"Node Interface"
interface Node {
  children: [Node!]!
  id: ID!
  internal: Internal!
  parent: Node
}

"The object which triggered a `ClosedEvent`."
union Github_Closer = Github_Commit | Github_PullRequest

"Types that can be inside Collection Items."
union Github_CollectionItemContent = Github_Organization | Github_Repository | Github_User

"Used for return value of Repository.issueOrPullRequest."
union Github_IssueOrPullRequest = Github_Issue | Github_PullRequest

"An item in an issue timeline"
union Github_IssueTimelineItem = Github_AssignedEvent | Github_ClosedEvent | Github_Commit | Github_CrossReferencedEvent | Github_DemilestonedEvent | Github_IssueComment | Github_LabeledEvent | Github_LockedEvent | Github_MilestonedEvent | Github_ReferencedEvent | Github_RenamedTitleEvent | Github_ReopenedEvent | Github_SubscribedEvent | Github_UnassignedEvent | Github_UnlabeledEvent | Github_UnlockedEvent | Github_UnsubscribedEvent

"Types that can be inside a Milestone."
union Github_MilestoneItem = Github_Issue | Github_PullRequest

"Types that can be inside Project Cards."
union Github_ProjectCardItem = Github_Issue | Github_PullRequest

"An item in an pull request timeline"
union Github_PullRequestTimelineItem = Github_AssignedEvent | Github_BaseRefForcePushedEvent | Github_ClosedEvent | Github_Commit | Github_CommitCommentThread | Github_CrossReferencedEvent | Github_DemilestonedEvent | Github_DeployedEvent | Github_HeadRefDeletedEvent | Github_HeadRefForcePushedEvent | Github_HeadRefRestoredEvent | Github_IssueComment | Github_LabeledEvent | Github_LockedEvent | Github_MergedEvent | Github_MilestonedEvent | Github_PullRequestReview | Github_PullRequestReviewComment | Github_PullRequestReviewThread | Github_ReferencedEvent | Github_RenamedTitleEvent | Github_ReopenedEvent | Github_ReviewDismissedEvent | Github_ReviewRequestRemovedEvent | Github_ReviewRequestedEvent | Github_SubscribedEvent | Github_UnassignedEvent | Github_UnlabeledEvent | Github_UnlockedEvent | Github_UnsubscribedEvent

"Types that can be an actor."
union Github_PushAllowanceActor = Github_Team | Github_User

"Any referencable object"
union Github_ReferencedSubject = Github_Issue | Github_PullRequest

"An object which has a renamable title"
union Github_RenamedTitleSubject = Github_Issue | Github_PullRequest

"Types that can be requested reviewers."
union Github_RequestedReviewer = Github_Team | Github_User

"Types that can be an actor."
union Github_ReviewDismissalAllowanceActor = Github_Team | Github_User

"The results of a search."
union Github_SearchResultItem = Github_Issue | Github_MarketplaceListing | Github_Organization | Github_PullRequest | Github_Repository | Github_User

type Directory implements Node {
  absolutePath: String
  accessTime(
    #Returns the difference between this date and the current time. Defaults to \"miliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\".
    difference: String,
    #Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String,
    #Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean,
    #Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date
  atime(
    #Returns the difference between this date and the current time. Defaults to \"miliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\".
    difference: String,
    #Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String,
    #Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean,
    #Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date
  atimeMs: Float
  base: String
  birthTime(
    #Returns the difference between this date and the current time. Defaults to \"miliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\".
    difference: String,
    #Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String,
    #Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean,
    #Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date
  birthtime(
    #Returns the difference between this date and the current time. Defaults to \"miliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\".
    difference: String,
    #Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String,
    #Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean,
    #Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date
  birthtimeMs: Float
  blksize: Int
  blocks: Int
  changeTime(
    #Returns the difference between this date and the current time. Defaults to \"miliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\".
    difference: String,
    #Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String,
    #Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean,
    #Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date
  children: [Node!]!
  ctime(
    #Returns the difference between this date and the current time. Defaults to \"miliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\".
    difference: String,
    #Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String,
    #Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean,
    #Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date
  ctimeMs: Float
  dev: Float
  dir: String
  ext: String
  extension: String
  gid: Int
  id: ID!
  ino: Float
  internal: Internal!
  mode: Int
  modifiedTime(
    #Returns the difference between this date and the current time. Defaults to \"miliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\".
    difference: String,
    #Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String,
    #Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean,
    #Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date
  mtime(
    #Returns the difference between this date and the current time. Defaults to \"miliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\".
    difference: String,
    #Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String,
    #Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean,
    #Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date
  mtimeMs: Float
  name: String
  nlink: Int
  parent: Node
  prettySize: String
  rdev: Int
  relativeDirectory: String
  relativePath: String
  root: String
  size: Int
  sourceInstanceName: String
  uid: Int
}

type DirectoryConnection {
  distinct(field: DirectoryFieldsEnum!): [String!]!
  edges: [DirectoryEdge!]!
  group(field: DirectoryFieldsEnum!, limit: Int, skip: Int): [DirectoryGroupConnection!]!
  nodes: [Directory!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type DirectoryEdge {
  next: Directory
  node: Directory!
  previous: Directory
}

type DirectoryGroupConnection {
  edges: [DirectoryEdge!]!
  field: String!
  fieldValue: String
  nodes: [Directory!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type File implements Node {
  absolutePath: String
  accessTime(
    #Returns the difference between this date and the current time. Defaults to \"miliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\".
    difference: String,
    #Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String,
    #Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean,
    #Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date
  atime(
    #Returns the difference between this date and the current time. Defaults to \"miliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\".
    difference: String,
    #Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String,
    #Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean,
    #Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date
  atimeMs: Float
  base: String
  birthTime(
    #Returns the difference between this date and the current time. Defaults to \"miliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\".
    difference: String,
    #Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String,
    #Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean,
    #Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date
  birthtime(
    #Returns the difference between this date and the current time. Defaults to \"miliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\".
    difference: String,
    #Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String,
    #Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean,
    #Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date
  birthtimeMs: Float
  blksize: Int
  blocks: Int
  changeTime(
    #Returns the difference between this date and the current time. Defaults to \"miliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\".
    difference: String,
    #Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String,
    #Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean,
    #Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date
  childImageSharp: ImageSharp
  childMarkdownRemark: MarkdownRemark
  children: [Node!]!
  childrenSkillsJson: [SkillsJson]
  ctime(
    #Returns the difference between this date and the current time. Defaults to \"miliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\".
    difference: String,
    #Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String,
    #Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean,
    #Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date
  ctimeMs: Float
  dev: Float
  dir: String
  ext: String
  extension: String
  gid: Int
  id: ID!
  ino: Float
  internal: Internal!
  mode: Int
  modifiedTime(
    #Returns the difference between this date and the current time. Defaults to \"miliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\".
    difference: String,
    #Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String,
    #Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean,
    #Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date
  mtime(
    #Returns the difference between this date and the current time. Defaults to \"miliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\".
    difference: String,
    #Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String,
    #Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean,
    #Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date
  mtimeMs: Float
  name: String
  nlink: Int
  parent: Node
  prettySize: String
  "Copy file to static directory and return public url to it"
  publicURL: String
  rdev: Int
  relativeDirectory: String
  relativePath: String
  root: String
  size: Int
  sourceInstanceName: String
  uid: Int
}

type FileConnection {
  distinct(field: FileFieldsEnum!): [String!]!
  edges: [FileEdge!]!
  group(field: FileFieldsEnum!, limit: Int, skip: Int): [FileGroupConnection!]!
  nodes: [File!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type FileEdge {
  next: File
  node: File!
  previous: File
}

type FileGroupConnection {
  edges: [FileEdge!]!
  field: String!
  fieldValue: String
  nodes: [File!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type Github {
  "Look up a code of conduct by its key"
  codeOfConduct(
    #The code of conduct's key
    key: String!
  ): Github_CodeOfConduct
  "Look up a code of conduct by its key"
  codesOfConduct: [Github_CodeOfConduct]
  "Look up an open source license by its key"
  license(
    #The license's downcased SPDX ID
    key: String!
  ): Github_License
  "Return a list of known open source licenses"
  licenses: [Github_License]!
  "Get alphabetically sorted list of Marketplace categories"
  marketplaceCategories(
    #Exclude categories with no listings.
    excludeEmpty: Boolean,
    #Exclude subcategories
    excludeSubcategories: Boolean
  ): [Github_MarketplaceCategory!]!
  "Look up a Marketplace category by its slug."
  marketplaceCategory(
    #The URL slug of the category.
    slug: String!,
    #Also check topic aliases for the category slug
    useTopicAliases: Boolean
  ): Github_MarketplaceCategory
  "Look up a single Marketplace listing"
  marketplaceListing(
    #Select the listing that matches this slug. It's the short name of the listing used in its URL.
    slug: String!
  ): Github_MarketplaceListing
  "Look up Marketplace listings"
  marketplaceListings(
    #Select listings that can be administered by the specified user.
    adminId: ID,
    #Returns the elements in the list that come after the specified cursor.
    after: String,
    """

    Select listings visible to the viewer even if they are not approved. If omitted or
    false, only approved listings will be returned.
    """
    allStates: Boolean,
    #Returns the elements in the list that come before the specified cursor.
    before: String,
    #Select only listings with the given category.
    categorySlug: String,
    #Returns the first _n_ elements from the list.
    first: Int,
    #Returns the last _n_ elements from the list.
    last: Int,
    #Select listings for products owned by the specified organization.
    organizationId: ID,
    #Select only listings where the primary category matches the given category slug.
    primaryCategoryOnly: Boolean = false,
    #Select the listings with these slugs, if they are visible to the viewer.
    slugs: [String],
    #Also check topic aliases for the category slug
    useTopicAliases: Boolean,
    """

    Select listings to which user has admin access. If omitted, listings visible to the
    viewer are returned.
    """
    viewerCanAdmin: Boolean,
    #Select only listings that offer a free trial.
    withFreeTrialsOnly: Boolean = false
  ): Github_MarketplaceListingConnection!
  "Return information about the GitHub instance"
  meta: Github_GitHubMetadata!
  "Fetches an object given its ID."
  node(
    #ID of the object.
    id: ID!
  ): Github_Node
  "Lookup nodes by a list of IDs."
  nodes(
    #The list of node IDs.
    ids: [ID!]!
  ): [Github_Node]!
  "Lookup a organization by login."
  organization(
    #The organization's login.
    login: String!
  ): Github_Organization
  "The client's rate limit information."
  rateLimit(
    #If true, calculate the cost for the query without evaluating it
    dryRun: Boolean = false
  ): Github_RateLimit
  "Hack to workaround https://github.com/facebook/relay/issues/112 re-exposing the root query object"
  relay: Query!
  "Lookup a given repository by the owner and repository name."
  repository(
    #The name of the repository
    name: String!,
    #The login field of a user or organization
    owner: String!
  ): Github_Repository
  "Lookup a repository owner (ie. either a User or an Organization) by login."
  repositoryOwner(
    #The username to lookup the owner by.
    login: String!
  ): Github_RepositoryOwner
  "Lookup resource by a URL."
  resource(
    #The URL.
    url: Github_URI!
  ): Github_UniformResourceLocatable
  "Perform a search across resources."
  search(
    #Returns the elements in the list that come after the specified cursor.
    after: String,
    #Returns the elements in the list that come before the specified cursor.
    before: String,
    #Returns the first _n_ elements from the list.
    first: Int,
    #Returns the last _n_ elements from the list.
    last: Int,
    #The search string to look for.
    query: String!,
    #The types of search items to search within.
    type: Github_SearchType!
  ): Github_SearchResultItemConnection!
  "Look up a topic by name."
  topic(
    #The topic's name.
    name: String!
  ): Github_Topic
  "Lookup a user by login."
  user(
    #The user's login.
    login: String!
  ): Github_User
  "The currently authenticated user."
  viewer: Github_User!
}

"Autogenerated return type of AcceptTopicSuggestion"
type Github_AcceptTopicSuggestionPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  "The accepted topic."
  topic: Github_Topic!
}

"Autogenerated return type of AddComment"
type Github_AddCommentPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  "The edge from the subject's comment connection."
  commentEdge: Github_IssueCommentEdge!
  "The subject"
  subject: Github_Node!
  "The edge from the subject's timeline connection."
  timelineEdge: Github_IssueTimelineItemEdge!
}

"Autogenerated return type of AddProjectCard"
type Github_AddProjectCardPayload {
  "The edge from the ProjectColumn's card connection."
  cardEdge: Github_ProjectCardEdge!
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  "The ProjectColumn"
  projectColumn: Github_Project!
}

"Autogenerated return type of AddProjectColumn"
type Github_AddProjectColumnPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  "The edge from the project's column connection."
  columnEdge: Github_ProjectColumnEdge!
  "The project"
  project: Github_Project!
}

"Autogenerated return type of AddPullRequestReviewComment"
type Github_AddPullRequestReviewCommentPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  "The newly created comment."
  comment: Github_PullRequestReviewComment!
  "The edge from the review's comment connection."
  commentEdge: Github_PullRequestReviewCommentEdge!
}

"Autogenerated return type of AddPullRequestReview"
type Github_AddPullRequestReviewPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  "The newly created pull request review."
  pullRequestReview: Github_PullRequestReview!
  "The edge from the pull request's review connection."
  reviewEdge: Github_PullRequestReviewEdge!
}

"Autogenerated return type of AddReaction"
type Github_AddReactionPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  "The reaction object."
  reaction: Github_Reaction!
  "The reactable subject."
  subject: Github_Reactable!
}

"Autogenerated return type of AddStar"
type Github_AddStarPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  "The starrable."
  starrable: Github_Starrable!
}

"Represents a 'added_to_project' event on a given issue or pull request."
type Github_AddedToProjectEvent implements Github_Node {
  "Identifies the actor who performed the event."
  actor: Github_Actor
  "Identifies the date and time when the object was created."
  createdAt: Github_DateTime!
  "Identifies the primary key from the database."
  databaseId: Int
  id: ID!
}

"Represents an 'assigned' event on any assignable object."
type Github_AssignedEvent implements Github_Node {
  "Identifies the actor who performed the event."
  actor: Github_Actor
  "Identifies the assignable associated with the event."
  assignable: Github_Assignable!
  "Identifies the date and time when the object was created."
  createdAt: Github_DateTime!
  id: ID!
  "Identifies the user who was assigned."
  user: Github_User
}

"Represents a 'base_ref_changed' event on a given issue or pull request."
type Github_BaseRefChangedEvent implements Github_Node {
  "Identifies the actor who performed the event."
  actor: Github_Actor
  "Identifies the date and time when the object was created."
  createdAt: Github_DateTime!
  "Identifies the primary key from the database."
  databaseId: Int
  id: ID!
}

"Represents a 'base_ref_force_pushed' event on a given pull request."
type Github_BaseRefForcePushedEvent implements Github_Node {
  "Identifies the actor who performed the event."
  actor: Github_Actor
  "Identifies the after commit SHA for the 'base_ref_force_pushed' event."
  afterCommit: Github_Commit
  "Identifies the before commit SHA for the 'base_ref_force_pushed' event."
  beforeCommit: Github_Commit
  "Identifies the date and time when the object was created."
  createdAt: Github_DateTime!
  id: ID!
  "PullRequest referenced by event."
  pullRequest: Github_PullRequest!
  "Identifies the fully qualified ref name for the 'base_ref_force_pushed' event."
  ref: Github_Ref
}

"Represents a Git blame."
type Github_Blame {
  "The list of ranges from a Git blame."
  ranges: [Github_BlameRange!]!
}

"Represents a range of information from a Git blame."
type Github_BlameRange {
  """
  Identifies the recency of the change, from 1 (new) to 10 (old). This is
  calculated as a 2-quantile and determines the length of distance between the
  median age of all the changes in the file and the recency of the current
  range's change.
  """
  age: Int!
  "Identifies the line author"
  commit: Github_Commit!
  "The ending line for the range"
  endingLine: Int!
  "The starting line for the range"
  startingLine: Int!
}

"Represents a Git blob."
type Github_Blob implements Github_GitObject & Github_Node {
  "An abbreviated version of the Git object ID"
  abbreviatedOid: String!
  "Byte size of Blob object"
  byteSize: Int!
  "The HTTP path for this Git object"
  commitResourcePath: Github_URI!
  "The HTTP URL for this Git object"
  commitUrl: Github_URI!
  id: ID!
  "Indicates whether the Blob is binary or text"
  isBinary: Boolean!
  "Indicates whether the contents is truncated"
  isTruncated: Boolean!
  "The Git object ID"
  oid: Github_GitObjectID!
  "The Repository the Git object belongs to"
  repository: Github_Repository!
  "UTF8 text data or null if the Blob is binary"
  text: String
}

"A special type of user which takes actions on behalf of GitHub Apps."
type Github_Bot implements Github_Actor & Github_Node & Github_UniformResourceLocatable {
  "A URL pointing to the GitHub App's public avatar."
  avatarUrl(
    #The size of the resulting square image.
    size: Int
  ): Github_URI!
  "Identifies the date and time when the object was created."
  createdAt: Github_DateTime!
  "Identifies the primary key from the database."
  databaseId: Int
  id: ID!
  "The username of the actor."
  login: String!
  "The HTTP path for this bot"
  resourcePath: Github_URI!
  "Identifies the date and time when the object was last updated."
  updatedAt: Github_DateTime!
  "The HTTP URL for this bot"
  url: Github_URI!
}

"Represents a 'closed' event on any `Closable`."
type Github_ClosedEvent implements Github_Node & Github_UniformResourceLocatable {
  "Identifies the actor who performed the event."
  actor: Github_Actor
  "Object that was closed."
  closable: Github_Closable!
  "Object which triggered the creation of this event."
  closer: Github_Closer
  "Identifies the date and time when the object was created."
  createdAt: Github_DateTime!
  id: ID!
  "The HTTP path for this closed event."
  resourcePath: Github_URI!
  "The HTTP URL for this closed event."
  url: Github_URI!
}

"The Code of Conduct for a repository"
type Github_CodeOfConduct {
  "The body of the CoC"
  body: String
  "The key for the CoC"
  key: String!
  "The formal name of the CoC"
  name: String!
  "The path to the CoC"
  url: Github_URI
}

"Represents a 'comment_deleted' event on a given issue or pull request."
type Github_CommentDeletedEvent implements Github_Node {
  "Identifies the actor who performed the event."
  actor: Github_Actor
  "Identifies the date and time when the object was created."
  createdAt: Github_DateTime!
  "Identifies the primary key from the database."
  databaseId: Int
  id: ID!
}

"Represents a Git commit."
type Github_Commit implements Github_GitObject & Github_Node & Github_Subscribable {
  "An abbreviated version of the Git object ID"
  abbreviatedOid: String!
  "The number of additions in this commit."
  additions: Int!
  "Authorship details of the commit."
  author: Github_GitActor
  "Check if the committer and the author match."
  authoredByCommitter: Boolean!
  "The datetime when this commit was authored."
  authoredDate: Github_DateTime!
  "Fetches `git blame` information."
  blame(
    #The file whose Git blame information you want.
    path: String!
  ): Github_Blame!
  "The number of changed files in this commit."
  changedFiles: Int!
  "Comments made on the commit."
  comments(
    #Returns the elements in the list that come after the specified cursor.
    after: String,
    #Returns the elements in the list that come before the specified cursor.
    before: String,
    #Returns the first _n_ elements from the list.
    first: Int,
    #Returns the last _n_ elements from the list.
    last: Int
  ): Github_CommitCommentConnection!
  "The HTTP path for this Git object"
  commitResourcePath: Github_URI!
  "The HTTP URL for this Git object"
  commitUrl: Github_URI!
  "The datetime when this commit was committed."
  committedDate: Github_DateTime!
  "Check if commited via GitHub web UI."
  committedViaWeb: Boolean!
  "Committership details of the commit."
  committer: Github_GitActor
  "The number of deletions in this commit."
  deletions: Int!
  "The linear commit history starting from (and including) this commit, in the same order as `git log`."
  history(
    #Returns the elements in the list that come after the specified cursor.
    after: String,
    #If non-null, filters history to only show commits with matching authorship.
    author: Github_CommitAuthor,
    #Returns the elements in the list that come before the specified cursor.
    before: String,
    #Returns the first _n_ elements from the list.
    first: Int,
    #Returns the last _n_ elements from the list.
    last: Int,
    #If non-null, filters history to only show commits touching files under this path.
    path: String,
    #Allows specifying a beginning time or date for fetching commits.
    since: Github_GitTimestamp,
    #Allows specifying an ending time or date for fetching commits.
    until: Github_GitTimestamp
  ): Github_CommitHistoryConnection!
  id: ID!
  "The Git commit message"
  message: String!
  "The Git commit message body"
  messageBody: String!
  "The commit message body rendered to HTML."
  messageBodyHTML: Github_HTML!
  "The Git commit message headline"
  messageHeadline: String!
  "The commit message headline rendered to HTML."
  messageHeadlineHTML: Github_HTML!
  "The Git object ID"
  oid: Github_GitObjectID!
  "The parents of a commit."
  parents(
    #Returns the elements in the list that come after the specified cursor.
    after: String,
    #Returns the elements in the list that come before the specified cursor.
    before: String,
    #Returns the first _n_ elements from the list.
    first: Int,
    #Returns the last _n_ elements from the list.
    last: Int
  ): Github_CommitConnection!
  "The datetime when this commit was pushed."
  pushedDate: Github_DateTime
  "The Repository this commit belongs to"
  repository: Github_Repository!
  "The HTTP path for this commit"
  resourcePath: Github_URI!
  "Commit signing information, if present."
  signature: Github_GitSignature
  "Status information for this commit"
  status: Github_Status
  """
  Returns a URL to download a tarball archive for a repository.
  Note: For private repositories, these links are temporary and expire after five minutes.
  """
  tarballUrl: Github_URI!
  "Commit's root Tree"
  tree: Github_Tree!
  "The HTTP path for the tree of this commit"
  treeResourcePath: Github_URI!
  "The HTTP URL for the tree of this commit"
  treeUrl: Github_URI!
  "The HTTP URL for this commit"
  url: Github_URI!
  "Check if the viewer is able to change their subscription status for the repository."
  viewerCanSubscribe: Boolean!
  "Identifies if the viewer is watching, not watching, or ignoring the subscribable entity."
  viewerSubscription: Github_SubscriptionState
  """
  Returns a URL to download a zipball archive for a repository.
  Note: For private repositories, these links are temporary and expire after five minutes.
  """
  zipballUrl: Github_URI!
}

"Represents a comment on a given Commit."
type Github_CommitComment implements Github_Comment & Github_Deletable & Github_Node & Github_Reactable & Github_RepositoryNode & Github_Updatable & Github_UpdatableComment {
  "The actor who authored the comment."
  author: Github_Actor
  "Author's association with the subject of the comment."
  authorAssociation: Github_CommentAuthorAssociation!
  "Identifies the comment body."
  body: String!
  "Identifies the comment body rendered to HTML."
  bodyHTML: Github_HTML!
  "The body rendered to text."
  bodyText: String!
  "Identifies the commit associated with the comment, if the commit exists."
  commit: Github_Commit
  "Identifies the date and time when the object was created."
  createdAt: Github_DateTime!
  "Check if this comment was created via an email reply."
  createdViaEmail: Boolean!
  "Identifies the primary key from the database."
  databaseId: Int
  "The actor who edited the comment."
  editor: Github_Actor
  id: ID!
  "Check if this comment was edited and includes an edit with the creation data"
  includesCreatedEdit: Boolean!
  "The moment the editor made the last edit"
  lastEditedAt: Github_DateTime
  "Identifies the file path associated with the comment."
  path: String
  "Identifies the line position associated with the comment."
  position: Int
  "Identifies when the comment was published at."
  publishedAt: Github_DateTime
  "A list of reactions grouped by content left on the subject."
  reactionGroups: [Github_ReactionGroup!]
  "A list of Reactions left on the Issue."
  reactions(
    #Returns the elements in the list that come after the specified cursor.
    after: String,
    #Returns the elements in the list that come before the specified cursor.
    before: String,
    #Allows filtering Reactions by emoji.
    content: Github_ReactionContent,
    #Returns the first _n_ elements from the list.
    first: Int,
    #Returns the last _n_ elements from the list.
    last: Int,
    #Allows specifying the order in which reactions are returned.
    orderBy: Github_ReactionOrder
  ): Github_ReactionConnection!
  "The repository associated with this node."
  repository: Github_Repository!
  "The HTTP path permalink for this commit comment."
  resourcePath: Github_URI!
  "Identifies the date and time when the object was last updated."
  updatedAt: Github_DateTime!
  "The HTTP URL permalink for this commit comment."
  url: Github_URI!
  "A list of edits to this content."
  userContentEdits(
    #Returns the elements in the list that come after the specified cursor.
    after: String,
    #Returns the elements in the list that come before the specified cursor.
    before: String,
    #Returns the first _n_ elements from the list.
    first: Int,
    #Returns the last _n_ elements from the list.
    last: Int
  ): Github_UserContentEditConnection
  "Check if the current viewer can delete this object."
  viewerCanDelete: Boolean!
  "Can user react to this subject"
  viewerCanReact: Boolean!
  "Check if the current viewer can update this object."
  viewerCanUpdate: Boolean!
  "Reasons why the current viewer can not update this comment."
  viewerCannotUpdateReasons: [Github_CommentCannotUpdateReason!]!
  "Did the viewer author this comment."
  viewerDidAuthor: Boolean!
}

"The connection type for CommitComment."
type Github_CommitCommentConnection {
  "A list of edges."
  edges: [Github_CommitCommentEdge]
  "A list of nodes."
  nodes: [Github_CommitComment]
  "Information to aid in pagination."
  pageInfo: Github_PageInfo!
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type Github_CommitCommentEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Github_CommitComment
}

"A thread of comments on a commit."
type Github_CommitCommentThread implements Github_Node & Github_RepositoryNode {
  "The comments that exist in this thread."
  comments(
    #Returns the elements in the list that come after the specified cursor.
    after: String,
    #Returns the elements in the list that come before the specified cursor.
    before: String,
    #Returns the first _n_ elements from the list.
    first: Int,
    #Returns the last _n_ elements from the list.
    last: Int
  ): Github_CommitCommentConnection!
  "The commit the comments were made on."
  commit: Github_Commit!
  id: ID!
  "The file the comments were made on."
  path: String
  "The position in the diff for the commit that the comment was made on."
  position: Int
  "The repository associated with this node."
  repository: Github_Repository!
}

"The connection type for Commit."
type Github_CommitConnection {
  "A list of edges."
  edges: [Github_CommitEdge]
  "A list of nodes."
  nodes: [Github_Commit]
  "Information to aid in pagination."
  pageInfo: Github_PageInfo!
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type Github_CommitEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Github_Commit
}

"The connection type for Commit."
type Github_CommitHistoryConnection {
  edges: [Github_CommitEdge]
  "A list of nodes."
  nodes: [Github_Commit]
  "Information to aid in pagination."
  pageInfo: Github_PageInfo!
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"Represents a 'converted_note_to_issue' event on a given issue or pull request."
type Github_ConvertedNoteToIssueEvent implements Github_Node {
  "Identifies the actor who performed the event."
  actor: Github_Actor
  "Identifies the date and time when the object was created."
  createdAt: Github_DateTime!
  "Identifies the primary key from the database."
  databaseId: Int
  id: ID!
}

"Autogenerated return type of CreateProject"
type Github_CreateProjectPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  "The new project."
  project: Github_Project!
}

"Represents a mention made by one issue or pull request to another."
type Github_CrossReferencedEvent implements Github_Node & Github_UniformResourceLocatable {
  "Identifies the actor who performed the event."
  actor: Github_Actor
  "Identifies the date and time when the object was created."
  createdAt: Github_DateTime!
  id: ID!
  "Reference originated in a different repository."
  isCrossRepository: Boolean!
  "Identifies when the reference was made."
  referencedAt: Github_DateTime!
  "The HTTP path for this pull request."
  resourcePath: Github_URI!
  "Issue or pull request that made the reference."
  source: Github_ReferencedSubject!
  "Issue or pull request to which the reference was made."
  target: Github_ReferencedSubject!
  "The HTTP URL for this pull request."
  url: Github_URI!
  "Checks if the target will be closed when the source is merged."
  willCloseTarget: Boolean!
}

"Autogenerated return type of DeclineTopicSuggestion"
type Github_DeclineTopicSuggestionPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  "The declined topic."
  topic: Github_Topic!
}

"Autogenerated return type of DeleteProjectCard"
type Github_DeleteProjectCardPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  "The column the deleted card was in."
  column: Github_ProjectColumn!
  "The deleted card ID."
  deletedCardId: ID!
}

"Autogenerated return type of DeleteProjectColumn"
type Github_DeleteProjectColumnPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  "The deleted column ID."
  deletedColumnId: ID!
  "The project the deleted column was in."
  project: Github_Project!
}

"Autogenerated return type of DeleteProject"
type Github_DeleteProjectPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  "The repository or organization the project was removed from."
  owner: Github_ProjectOwner!
}

"Autogenerated return type of DeletePullRequestReview"
type Github_DeletePullRequestReviewPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  "The deleted pull request review."
  pullRequestReview: Github_PullRequestReview!
}

"Represents a 'demilestoned' event on a given issue or pull request."
type Github_DemilestonedEvent implements Github_Node {
  "Identifies the actor who performed the event."
  actor: Github_Actor
  "Identifies the date and time when the object was created."
  createdAt: Github_DateTime!
  id: ID!
  "Identifies the milestone title associated with the 'demilestoned' event."
  milestoneTitle: String!
  "Object referenced by event."
  subject: Github_MilestoneItem!
}

"A repository deploy key."
type Github_DeployKey implements Github_Node {
  "Identifies the date and time when the object was created."
  createdAt: Github_DateTime!
  id: ID!
  "The deploy key."
  key: String!
  "Whether or not the deploy key is read only."
  readOnly: Boolean!
  "The deploy key title."
  title: String!
  "Whether or not the deploy key has been verified."
  verified: Boolean!
}

"The connection type for DeployKey."
type Github_DeployKeyConnection {
  "A list of edges."
  edges: [Github_DeployKeyEdge]
  "A list of nodes."
  nodes: [Github_DeployKey]
  "Information to aid in pagination."
  pageInfo: Github_PageInfo!
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type Github_DeployKeyEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Github_DeployKey
}

"Represents a 'deployed' event on a given pull request."
type Github_DeployedEvent implements Github_Node {
  "Identifies the actor who performed the event."
  actor: Github_Actor
  "Identifies the date and time when the object was created."
  createdAt: Github_DateTime!
  "Identifies the primary key from the database."
  databaseId: Int
  "The deployment associated with the 'deployed' event."
  deployment: Github_Deployment!
  id: ID!
  "PullRequest referenced by event."
  pullRequest: Github_PullRequest!
  "The ref associated with the 'deployed' event."
  ref: Github_Ref
}

"Represents triggered deployment instance."
type Github_Deployment implements Github_Node {
  "Identifies the commit sha of the deployment."
  commit: Github_Commit
  "Identifies the date and time when the object was created."
  createdAt: Github_DateTime!
  "Identifies the actor who triggered the deployment."
  creator: Github_Actor
  "Identifies the primary key from the database."
  databaseId: Int
  "The environment to which this deployment was made."
  environment: String
  id: ID!
  "The latest status of this deployment."
  latestStatus: Github_DeploymentStatus
  "Extra information that a deployment system might need."
  payload: String
  "Identifies the repository associated with the deployment."
  repository: Github_Repository!
  "The current state of the deployment."
  state: Github_DeploymentState
  "A list of statuses associated with the deployment."
  statuses(
    #Returns the elements in the list that come after the specified cursor.
    after: String,
    #Returns the elements in the list that come before the specified cursor.
    before: String,
    #Returns the first _n_ elements from the list.
    first: Int,
    #Returns the last _n_ elements from the list.
    last: Int
  ): Github_DeploymentStatusConnection
}

"The connection type for Deployment."
type Github_DeploymentConnection {
  "A list of edges."
  edges: [Github_DeploymentEdge]
  "A list of nodes."
  nodes: [Github_Deployment]
  "Information to aid in pagination."
  pageInfo: Github_PageInfo!
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type Github_DeploymentEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Github_Deployment
}

"Describes the status of a given deployment attempt."
type Github_DeploymentStatus implements Github_Node {
  "Identifies the date and time when the object was created."
  createdAt: Github_DateTime!
  "Identifies the actor who triggered the deployment."
  creator: Github_Actor
  "Identifies the deployment associated with status."
  deployment: Github_Deployment!
  "Identifies the description of the deployment."
  description: String
  "Identifies the environment URL of the deployment."
  environmentUrl: Github_URI
  id: ID!
  "Identifies the log URL of the deployment."
  logUrl: Github_URI
  "Identifies the current state of the deployment."
  state: Github_DeploymentStatusState!
  "Identifies the date and time when the object was last updated."
  updatedAt: Github_DateTime!
}

"The connection type for DeploymentStatus."
type Github_DeploymentStatusConnection {
  "A list of edges."
  edges: [Github_DeploymentStatusEdge]
  "A list of nodes."
  nodes: [Github_DeploymentStatus]
  "Information to aid in pagination."
  pageInfo: Github_PageInfo!
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type Github_DeploymentStatusEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Github_DeploymentStatus
}

"Autogenerated return type of DismissPullRequestReview"
type Github_DismissPullRequestReviewPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  "The dismissed pull request review."
  pullRequestReview: Github_PullRequestReview!
}

"An external identity provisioned by SAML SSO or SCIM."
type Github_ExternalIdentity implements Github_Node {
  "The GUID for this identity"
  guid: String!
  id: ID!
  "Organization invitation for this SCIM-provisioned external identity"
  organizationInvitation: Github_OrganizationInvitation
  "SAML Identity attributes"
  samlIdentity: Github_ExternalIdentitySamlAttributes
  "SCIM Identity attributes"
  scimIdentity: Github_ExternalIdentityScimAttributes
  "User linked to this external identity. Will be NULL if this identity has not been claimed by an organization member."
  user: Github_User
}

"The connection type for ExternalIdentity."
type Github_ExternalIdentityConnection {
  "A list of edges."
  edges: [Github_ExternalIdentityEdge]
  "A list of nodes."
  nodes: [Github_ExternalIdentity]
  "Information to aid in pagination."
  pageInfo: Github_PageInfo!
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type Github_ExternalIdentityEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Github_ExternalIdentity
}

"SAML attributes for the External Identity"
type Github_ExternalIdentitySamlAttributes {
  "The NameID of the SAML identity"
  nameId: String
}

"SCIM attributes for the External Identity"
type Github_ExternalIdentityScimAttributes {
  "The userName of the SCIM identity"
  username: String
}

"The connection type for User."
type Github_FollowerConnection {
  "A list of edges."
  edges: [Github_UserEdge]
  "A list of nodes."
  nodes: [Github_User]
  "Information to aid in pagination."
  pageInfo: Github_PageInfo!
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"The connection type for User."
type Github_FollowingConnection {
  "A list of edges."
  edges: [Github_UserEdge]
  "A list of nodes."
  nodes: [Github_User]
  "Information to aid in pagination."
  pageInfo: Github_PageInfo!
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"A Gist."
type Github_Gist implements Github_Node & Github_Starrable {
  "A list of comments associated with the gist"
  comments(
    #Returns the elements in the list that come after the specified cursor.
    after: String,
    #Returns the elements in the list that come before the specified cursor.
    before: String,
    #Returns the first _n_ elements from the list.
    first: Int,
    #Returns the last _n_ elements from the list.
    last: Int
  ): Github_GistCommentConnection!
  "Identifies the date and time when the object was created."
  createdAt: Github_DateTime!
  "The gist description."
  description: String
  id: ID!
  "Whether the gist is public or not."
  isPublic: Boolean!
  "The gist name."
  name: String!
  "The gist owner."
  owner: Github_RepositoryOwner
  "Identifies when the gist was last pushed to."
  pushedAt: Github_DateTime
  "A list of users who have starred this starrable."
  stargazers(
    #Returns the elements in the list that come after the specified cursor.
    after: String,
    #Returns the elements in the list that come before the specified cursor.
    before: String,
    #Returns the first _n_ elements from the list.
    first: Int,
    #Returns the last _n_ elements from the list.
    last: Int,
    #Order for connection
    orderBy: Github_StarOrder
  ): Github_StargazerConnection!
  "Identifies the date and time when the object was last updated."
  updatedAt: Github_DateTime!
  "Returns a boolean indicating whether the viewing user has starred this starrable."
  viewerHasStarred: Boolean!
}

"Represents a comment on an Gist."
type Github_GistComment implements Github_Comment & Github_Deletable & Github_Node & Github_Updatable & Github_UpdatableComment {
  "The actor who authored the comment."
  author: Github_Actor
  "Author's association with the gist."
  authorAssociation: Github_CommentAuthorAssociation!
  "Identifies the comment body."
  body: String!
  "The comment body rendered to HTML."
  bodyHTML: Github_HTML!
  "The body rendered to text."
  bodyText: String!
  "Identifies the date and time when the object was created."
  createdAt: Github_DateTime!
  "Check if this comment was created via an email reply."
  createdViaEmail: Boolean!
  "Identifies the primary key from the database."
  databaseId: Int
  "The actor who edited the comment."
  editor: Github_Actor
  "The associated gist."
  gist: Github_Gist!
  id: ID!
  "Check if this comment was edited and includes an edit with the creation data"
  includesCreatedEdit: Boolean!
  "The moment the editor made the last edit"
  lastEditedAt: Github_DateTime
  "Identifies when the comment was published at."
  publishedAt: Github_DateTime
  "Identifies the date and time when the object was last updated."
  updatedAt: Github_DateTime!
  "A list of edits to this content."
  userContentEdits(
    #Returns the elements in the list that come after the specified cursor.
    after: String,
    #Returns the elements in the list that come before the specified cursor.
    before: String,
    #Returns the first _n_ elements from the list.
    first: Int,
    #Returns the last _n_ elements from the list.
    last: Int
  ): Github_UserContentEditConnection
  "Check if the current viewer can delete this object."
  viewerCanDelete: Boolean!
  "Check if the current viewer can update this object."
  viewerCanUpdate: Boolean!
  "Reasons why the current viewer can not update this comment."
  viewerCannotUpdateReasons: [Github_CommentCannotUpdateReason!]!
  "Did the viewer author this comment."
  viewerDidAuthor: Boolean!
}

"The connection type for GistComment."
type Github_GistCommentConnection {
  "A list of edges."
  edges: [Github_GistCommentEdge]
  "A list of nodes."
  nodes: [Github_GistComment]
  "Information to aid in pagination."
  pageInfo: Github_PageInfo!
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type Github_GistCommentEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Github_GistComment
}

"The connection type for Gist."
type Github_GistConnection {
  "A list of edges."
  edges: [Github_GistEdge]
  "A list of nodes."
  nodes: [Github_Gist]
  "Information to aid in pagination."
  pageInfo: Github_PageInfo!
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type Github_GistEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Github_Gist
}

"Represents an actor in a Git commit (ie. an author or committer)."
type Github_GitActor {
  "A URL pointing to the author's public avatar."
  avatarUrl(
    #The size of the resulting square image.
    size: Int
  ): Github_URI!
  "The timestamp of the Git action (authoring or committing)."
  date: Github_GitTimestamp
  "The email in the Git commit."
  email: String
  "The name in the Git commit."
  name: String
  "The GitHub user corresponding to the email field. Null if no such user exists."
  user: Github_User
}

"Represents information about the GitHub instance."
type Github_GitHubMetadata {
  "Returns a String that's a SHA of `github-services`"
  gitHubServicesSha: String!
  "IP addresses that users connect to for git operations"
  gitIpAddresses: [String!]
  "IP addresses that service hooks are sent from"
  hookIpAddresses: [String!]
  "IP addresses that the importer connects from"
  importerIpAddresses: [String!]
  "Whether or not users are verified"
  isPasswordAuthenticationVerifiable: Boolean!
  "IP addresses for GitHub Pages' A records"
  pagesIpAddresses: [String!]
}

"Represents a GPG signature on a Commit or Tag."
type Github_GpgSignature implements Github_GitSignature {
  "Email used to sign this object."
  email: String!
  "True if the signature is valid and verified by GitHub."
  isValid: Boolean!
  "Hex-encoded ID of the key that signed this object."
  keyId: String
  "Payload for GPG signing object. Raw ODB object without the signature header."
  payload: String!
  "ASCII-armored signature header from object."
  signature: String!
  "GitHub user corresponding to the email signing this commit."
  signer: Github_User
  """
  The state of this signature. `VALID` if signature is valid and verified by
  GitHub, otherwise represents reason why signature is considered invalid.
  """
  state: Github_GitSignatureState!
  "True if the signature was made with GitHub's signing key."
  wasSignedByGitHub: Boolean!
}

"Represents a 'head_ref_deleted' event on a given pull request."
type Github_HeadRefDeletedEvent implements Github_Node {
  "Identifies the actor who performed the event."
  actor: Github_Actor
  "Identifies the date and time when the object was created."
  createdAt: Github_DateTime!
  "Identifies the Ref associated with the `head_ref_deleted` event."
  headRef: Github_Ref
  "Identifies the name of the Ref associated with the `head_ref_deleted` event."
  headRefName: String!
  id: ID!
  "PullRequest referenced by event."
  pullRequest: Github_PullRequest!
}

"Represents a 'head_ref_force_pushed' event on a given pull request."
type Github_HeadRefForcePushedEvent implements Github_Node {
  "Identifies the actor who performed the event."
  actor: Github_Actor
  "Identifies the after commit SHA for the 'head_ref_force_pushed' event."
  afterCommit: Github_Commit
  "Identifies the before commit SHA for the 'head_ref_force_pushed' event."
  beforeCommit: Github_Commit
  "Identifies the date and time when the object was created."
  createdAt: Github_DateTime!
  id: ID!
  "PullRequest referenced by event."
  pullRequest: Github_PullRequest!
  "Identifies the fully qualified ref name for the 'head_ref_force_pushed' event."
  ref: Github_Ref
}

"Represents a 'head_ref_restored' event on a given pull request."
type Github_HeadRefRestoredEvent implements Github_Node {
  "Identifies the actor who performed the event."
  actor: Github_Actor
  "Identifies the date and time when the object was created."
  createdAt: Github_DateTime!
  id: ID!
  "PullRequest referenced by event."
  pullRequest: Github_PullRequest!
}

"An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project."
type Github_Issue implements Github_Assignable & Github_Closable & Github_Comment & Github_Labelable & Github_Lockable & Github_Node & Github_Reactable & Github_RepositoryNode & Github_Subscribable & Github_UniformResourceLocatable & Github_Updatable & Github_UpdatableComment {
  "Reason that the conversation was locked."
  activeLockReason: Github_LockReason
  "A list of Users assigned to this object."
  assignees(
    #Returns the elements in the list that come after the specified cursor.
    after: String,
    #Returns the elements in the list that come before the specified cursor.
    before: String,
    #Returns the first _n_ elements from the list.
    first: Int,
    #Returns the last _n_ elements from the list.
    last: Int
  ): Github_UserConnection!
  "The actor who authored the comment."
  author: Github_Actor
  "Author's association with the subject of the comment."
  authorAssociation: Github_CommentAuthorAssociation!
  "Identifies the body of the issue."
  body: String!
  "Identifies the body of the issue rendered to HTML."
  bodyHTML: Github_HTML!
  "Identifies the body of the issue rendered to text."
  bodyText: String!
  "`true` if the object is closed (definition of closed may depend on type)"
  closed: Boolean!
  "Identifies the date and time when the object was closed."
  closedAt: Github_DateTime
  "A list of comments associated with the Issue."
  comments(
    #Returns the elements in the list that come after the specified cursor.
    after: String,
    #Returns the elements in the list that come before the specified cursor.
    before: String,
    #Returns the first _n_ elements from the list.
    first: Int,
    #Returns the last _n_ elements from the list.
    last: Int
  ): Github_IssueCommentConnection!
  "Identifies the date and time when the object was created."
  createdAt: Github_DateTime!
  "Check if this comment was created via an email reply."
  createdViaEmail: Boolean!
  "Identifies the primary key from the database."
  databaseId: Int
  "The actor who edited the comment."
  editor: Github_Actor
  id: ID!
  "Check if this comment was edited and includes an edit with the creation data"
  includesCreatedEdit: Boolean!
  "A list of labels associated with the object."
  labels(
    #Returns the elements in the list that come after the specified cursor.
    after: String,
    #Returns the elements in the list that come before the specified cursor.
    before: String,
    #Returns the first _n_ elements from the list.
    first: Int,
    #Returns the last _n_ elements from the list.
    last: Int
  ): Github_LabelConnection
  "The moment the editor made the last edit"
  lastEditedAt: Github_DateTime
  "`true` if the object is locked"
  locked: Boolean!
  "Identifies the milestone associated with the issue."
  milestone: Github_Milestone
  "Identifies the issue number."
  number: Int!
  "A list of Users that are participating in the Issue conversation."
  participants(
    #Returns the elements in the list that come after the specified cursor.
    after: String,
    #Returns the elements in the list that come before the specified cursor.
    before: String,
    #Returns the first _n_ elements from the list.
    first: Int,
    #Returns the last _n_ elements from the list.
    last: Int
  ): Github_UserConnection!
  "List of project cards associated with this issue."
  projectCards(
    #Returns the elements in the list that come after the specified cursor.
    after: String,
    #Returns the elements in the list that come before the specified cursor.
    before: String,
    #Returns the first _n_ elements from the list.
    first: Int,
    #Returns the last _n_ elements from the list.
    last: Int
  ): Github_ProjectCardConnection!
  "Identifies when the comment was published at."
  publishedAt: Github_DateTime
  "A list of reactions grouped by content left on the subject."
  reactionGroups: [Github_ReactionGroup!]
  "A list of Reactions left on the Issue."
  reactions(
    #Returns the elements in the list that come after the specified cursor.
    after: String,
    #Returns the elements in the list that come before the specified cursor.
    before: String,
    #Allows filtering Reactions by emoji.
    content: Github_ReactionContent,
    #Returns the first _n_ elements from the list.
    first: Int,
    #Returns the last _n_ elements from the list.
    last: Int,
    #Allows specifying the order in which reactions are returned.
    orderBy: Github_ReactionOrder
  ): Github_ReactionConnection!
  "The repository associated with this node."
  repository: Github_Repository!
  "The HTTP path for this issue"
  resourcePath: Github_URI!
  "Identifies the state of the issue."
  state: Github_IssueState!
  "A list of events, comments, commits, etc. associated with the issue."
  timeline(
    #Returns the elements in the list that come after the specified cursor.
    after: String,
    #Returns the elements in the list that come before the specified cursor.
    before: String,
    #Returns the first _n_ elements from the list.
    first: Int,
    #Returns the last _n_ elements from the list.
    last: Int,
    #Allows filtering timeline events by a `since` timestamp.
    since: Github_DateTime
  ): Github_IssueTimelineConnection!
  "Identifies the issue title."
  title: String!
  "Identifies the date and time when the object was last updated."
  updatedAt: Github_DateTime!
  "The HTTP URL for this issue"
  url: Github_URI!
  "A list of edits to this content."
  userContentEdits(
    #Returns the elements in the list that come after the specified cursor.
    after: String,
    #Returns the elements in the list that come before the specified cursor.
    before: String,
    #Returns the first _n_ elements from the list.
    first: Int,
    #Returns the last _n_ elements from the list.
    last: Int
  ): Github_UserContentEditConnection
  "Can user react to this subject"
  viewerCanReact: Boolean!
  "Check if the viewer is able to change their subscription status for the repository."
  viewerCanSubscribe: Boolean!
  "Check if the current viewer can update this object."
  viewerCanUpdate: Boolean!
  "Reasons why the current viewer can not update this comment."
  viewerCannotUpdateReasons: [Github_CommentCannotUpdateReason!]!
  "Did the viewer author this comment."
  viewerDidAuthor: Boolean!
  "Identifies if the viewer is watching, not watching, or ignoring the subscribable entity."
  viewerSubscription: Github_SubscriptionState
}

"Represents a comment on an Issue."
type Github_IssueComment implements Github_Comment & Github_Deletable & Github_Node & Github_Reactable & Github_RepositoryNode & Github_Updatable & Github_UpdatableComment {
  "The actor who authored the comment."
  author: Github_Actor
  "Author's association with the subject of the comment."
  authorAssociation: Github_CommentAuthorAssociation!
  "The body as Markdown."
  body: String!
  "The body rendered to HTML."
  bodyHTML: Github_HTML!
  "The body rendered to text."
  bodyText: String!
  "Identifies the date and time when the object was created."
  createdAt: Github_DateTime!
  "Check if this comment was created via an email reply."
  createdViaEmail: Boolean!
  "Identifies the primary key from the database."
  databaseId: Int
  "The actor who edited the comment."
  editor: Github_Actor
  id: ID!
  "Check if this comment was edited and includes an edit with the creation data"
  includesCreatedEdit: Boolean!
  "Identifies the issue associated with the comment."
  issue: Github_Issue!
  "The moment the editor made the last edit"
  lastEditedAt: Github_DateTime
  "Identifies when the comment was published at."
  publishedAt: Github_DateTime
  """
  Returns the pull request associated with the comment, if this comment was made on a
  pull request.
  """
  pullRequest: Github_PullRequest
  "A list of reactions grouped by content left on the subject."
  reactionGroups: [Github_ReactionGroup!]
  "A list of Reactions left on the Issue."
  reactions(
    #Returns the elements in the list that come after the specified cursor.
    after: String,
    #Returns the elements in the list that come before the specified cursor.
    before: String,
    #Allows filtering Reactions by emoji.
    content: Github_ReactionContent,
    #Returns the first _n_ elements from the list.
    first: Int,
    #Returns the last _n_ elements from the list.
    last: Int,
    #Allows specifying the order in which reactions are returned.
    orderBy: Github_ReactionOrder
  ): Github_ReactionConnection!
  "The repository associated with this node."
  repository: Github_Repository!
  "The HTTP path for this issue comment"
  resourcePath: Github_URI!
  "Identifies the date and time when the object was last updated."
  updatedAt: Github_DateTime!
  "The HTTP URL for this issue comment"
  url: Github_URI!
  "A list of edits to this content."
  userContentEdits(
    #Returns the elements in the list that come after the specified cursor.
    after: String,
    #Returns the elements in the list that come before the specified cursor.
    before: String,
    #Returns the first _n_ elements from the list.
    first: Int,
    #Returns the last _n_ elements from the list.
    last: Int
  ): Github_UserContentEditConnection
  "Check if the current viewer can delete this object."
  viewerCanDelete: Boolean!
  "Can user react to this subject"
  viewerCanReact: Boolean!
  "Check if the current viewer can update this object."
  viewerCanUpdate: Boolean!
  "Reasons why the current viewer can not update this comment."
  viewerCannotUpdateReasons: [Github_CommentCannotUpdateReason!]!
  "Did the viewer author this comment."
  viewerDidAuthor: Boolean!
}

"The connection type for IssueComment."
type Github_IssueCommentConnection {
  "A list of edges."
  edges: [Github_IssueCommentEdge]
  "A list of nodes."
  nodes: [Github_IssueComment]
  "Information to aid in pagination."
  pageInfo: Github_PageInfo!
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type Github_IssueCommentEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Github_IssueComment
}

"The connection type for Issue."
type Github_IssueConnection {
  "A list of edges."
  edges: [Github_IssueEdge]
  "A list of nodes."
  nodes: [Github_Issue]
  "Information to aid in pagination."
  pageInfo: Github_PageInfo!
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type Github_IssueEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Github_Issue
}

"The connection type for IssueTimelineItem."
type Github_IssueTimelineConnection {
  "A list of edges."
  edges: [Github_IssueTimelineItemEdge]
  "A list of nodes."
  nodes: [Github_IssueTimelineItem]
  "Information to aid in pagination."
  pageInfo: Github_PageInfo!
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type Github_IssueTimelineItemEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Github_IssueTimelineItem
}

"A label for categorizing Issues or Milestones with a given Repository."
type Github_Label implements Github_Node {
  "Identifies the label color."
  color: String!
  "Identifies the date and time when the label was created."
  createdAt: Github_DateTime
  "A brief description of this label."
  description: String
  id: ID!
  "Indicates whether or not this is a default label."
  isDefault: Boolean!
  "A list of issues associated with this label."
  issues(
    #Returns the elements in the list that come after the specified cursor.
    after: String,
    #Returns the elements in the list that come before the specified cursor.
    before: String,
    #Returns the first _n_ elements from the list.
    first: Int,
    #A list of label names to filter the pull requests by.
    labels: [String!],
    #Returns the last _n_ elements from the list.
    last: Int,
    #Ordering options for issues returned from the connection.
    orderBy: Github_IssueOrder,
    #A list of states to filter the issues by.
    states: [Github_IssueState!]
  ): Github_IssueConnection!
  "Identifies the label name."
  name: String!
  "A list of pull requests associated with this label."
  pullRequests(
    #Returns the elements in the list that come after the specified cursor.
    after: String,
    #The base ref name to filter the pull requests by.
    baseRefName: String,
    #Returns the elements in the list that come before the specified cursor.
    before: String,
    #Returns the first _n_ elements from the list.
    first: Int,
    #The head ref name to filter the pull requests by.
    headRefName: String,
    #A list of label names to filter the pull requests by.
    labels: [String!],
    #Returns the last _n_ elements from the list.
    last: Int,
    #Ordering options for pull requests returned from the connection.
    orderBy: Github_IssueOrder,
    #A list of states to filter the pull requests by.
    states: [Github_PullRequestState!]
  ): Github_PullRequestConnection!
  "The repository associated with this label."
  repository: Github_Repository!
  "The HTTP path for this label."
  resourcePath: Github_URI!
  "Identifies the date and time when the label was last updated."
  updatedAt: Github_DateTime
  "The HTTP URL for this label."
  url: Github_URI!
}

"The connection type for Label."
type Github_LabelConnection {
  "A list of edges."
  edges: [Github_LabelEdge]
  "A list of nodes."
  nodes: [Github_Label]
  "Information to aid in pagination."
  pageInfo: Github_PageInfo!
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type Github_LabelEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Github_Label
}

"Represents a 'labeled' event on a given issue or pull request."
type Github_LabeledEvent implements Github_Node {
  "Identifies the actor who performed the event."
  actor: Github_Actor
  "Identifies the date and time when the object was created."
  createdAt: Github_DateTime!
  id: ID!
  "Identifies the label associated with the 'labeled' event."
  label: Github_Label!
  "Identifies the `Labelable` associated with the event."
  labelable: Github_Labelable!
}

"Represents a given language found in repositories."
type Github_Language implements Github_Node {
  "The color defined for the current language."
  color: String
  id: ID!
  "The name of the current language."
  name: String!
}

"A list of languages associated with the parent."
type Github_LanguageConnection {
  "A list of edges."
  edges: [Github_LanguageEdge]
  "A list of nodes."
  nodes: [Github_Language]
  "Information to aid in pagination."
  pageInfo: Github_PageInfo!
  "Identifies the total count of items in the connection."
  totalCount: Int!
  "The total size in bytes of files written in that language."
  totalSize: Int!
}

"Represents the language of a repository."
type Github_LanguageEdge {
  cursor: String!
  node: Github_Language!
  "The number of bytes of code written in the language."
  size: Int!
}

"A repository's open source license"
type Github_License implements Github_Node {
  "The full text of the license"
  body: String!
  "The conditions set by the license"
  conditions: [Github_LicenseRule]!
  "A human-readable description of the license"
  description: String
  "Whether the license should be featured"
  featured: Boolean!
  "Whether the license should be displayed in license pickers"
  hidden: Boolean!
  id: ID!
  "Instructions on how to implement the license"
  implementation: String
  "The lowercased SPDX ID of the license"
  key: String!
  "The limitations set by the license"
  limitations: [Github_LicenseRule]!
  "The license full name specified by <https://spdx.org/licenses>"
  name: String!
  "Customary short name if applicable (e.g, GPLv3)"
  nickname: String
  "The permissions set by the license"
  permissions: [Github_LicenseRule]!
  "Whether the license is a pseudo-license placeholder (e.g., other, no-license)"
  pseudoLicense: Boolean!
  "Short identifier specified by <https://spdx.org/licenses>"
  spdxId: String
  "URL to the license on <https://choosealicense.com>"
  url: Github_URI
}

"Describes a License's conditions, permissions, and limitations"
type Github_LicenseRule {
  "A description of the rule"
  description: String!
  "The machine-readable rule key"
  key: String!
  "The human-readable rule label"
  label: String!
}

"Autogenerated return type of LockLockable"
type Github_LockLockablePayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  "The item that was locked."
  lockedRecord: Github_Lockable
}

"Represents a 'locked' event on a given issue or pull request."
type Github_LockedEvent implements Github_Node {
  "Identifies the actor who performed the event."
  actor: Github_Actor
  "Identifies the date and time when the object was created."
  createdAt: Github_DateTime!
  id: ID!
  "Reason that the conversation was locked (optional)."
  lockReason: Github_LockReason
  "Object that was locked."
  lockable: Github_Lockable!
}

"A public description of a Marketplace category."
type Github_MarketplaceCategory implements Github_Node {
  "The category's description."
  description: String
  "The technical description of how apps listed in this category work with GitHub."
  howItWorks: String
  id: ID!
  "The category's name."
  name: String!
  "How many Marketplace listings have this as their primary category."
  primaryListingCount: Int!
  "The HTTP path for this Marketplace category."
  resourcePath: Github_URI!
  "How many Marketplace listings have this as their secondary category."
  secondaryListingCount: Int!
  "The short name of the category used in its URL."
  slug: String!
  "The HTTP URL for this Marketplace category."
  url: Github_URI!
}

"A listing in the GitHub integration marketplace."
type Github_MarketplaceListing implements Github_Node {
  "URL to the listing owner's company site."
  companyUrl: Github_URI
  "The HTTP path for configuring access to the listing's integration or OAuth app"
  configurationResourcePath: Github_URI!
  "The HTTP URL for configuring access to the listing's integration or OAuth app"
  configurationUrl: Github_URI!
  "URL to the listing's documentation."
  documentationUrl: Github_URI
  "The listing's detailed description."
  extendedDescription: String
  "The listing's detailed description rendered to HTML."
  extendedDescriptionHTML: Github_HTML!
  "The listing's introductory description."
  fullDescription: String!
  "The listing's introductory description rendered to HTML."
  fullDescriptionHTML: Github_HTML!
  "Whether this listing has been submitted for review from GitHub for approval to be displayed in the Marketplace."
  hasApprovalBeenRequested: Boolean!
  "Does this listing have any plans with a free trial?"
  hasPublishedFreeTrialPlans: Boolean!
  "Does this listing have a terms of service link?"
  hasTermsOfService: Boolean!
  "A technical description of how this app works with GitHub."
  howItWorks: String
  "The listing's technical description rendered to HTML."
  howItWorksHTML: Github_HTML!
  id: ID!
  "URL to install the product to the viewer's account or organization."
  installationUrl: Github_URI
  "Whether this listing's app has been installed for the current viewer"
  installedForViewer: Boolean!
  "Whether this listing has been approved for display in the Marketplace."
  isApproved: Boolean!
  "Whether this listing has been removed from the Marketplace."
  isDelisted: Boolean!
  """
  Whether this listing is still an editable draft that has not been submitted
  for review and is not publicly visible in the Marketplace.
  """
  isDraft: Boolean!
  "Whether the product this listing represents is available as part of a paid plan."
  isPaid: Boolean!
  "Whether this listing has been rejected by GitHub for display in the Marketplace."
  isRejected: Boolean!
  "The hex color code, without the leading '#', for the logo background."
  logoBackgroundColor: String!
  "URL for the listing's logo image."
  logoUrl(
    #The size in pixels of the resulting square image.
    size: Int = 400
  ): Github_URI
  "The listing's full name."
  name: String!
  "The listing's very short description without a trailing period or ampersands."
  normalizedShortDescription: String!
  "URL to the listing's detailed pricing."
  pricingUrl: Github_URI
  "The category that best describes the listing."
  primaryCategory: Github_MarketplaceCategory!
  "URL to the listing's privacy policy."
  privacyPolicyUrl: Github_URI!
  "The HTTP path for the Marketplace listing."
  resourcePath: Github_URI!
  "The URLs for the listing's screenshots."
  screenshotUrls: [String]!
  "An alternate category that describes the listing."
  secondaryCategory: Github_MarketplaceCategory
  "The listing's very short description."
  shortDescription: String!
  "The short name of the listing used in its URL."
  slug: String!
  "URL to the listing's status page."
  statusUrl: Github_URI
  "An email address for support for this listing's app."
  supportEmail: String
  "Either a URL or an email address for support for this listing's app."
  supportUrl: Github_URI!
  "URL to the listing's terms of service."
  termsOfServiceUrl: Github_URI
  "The HTTP URL for the Marketplace listing."
  url: Github_URI!
  "Can the current viewer add plans for this Marketplace listing."
  viewerCanAddPlans: Boolean!
  "Can the current viewer approve this Marketplace listing."
  viewerCanApprove: Boolean!
  "Can the current viewer delist this Marketplace listing."
  viewerCanDelist: Boolean!
  "Can the current viewer edit this Marketplace listing."
  viewerCanEdit: Boolean!
  """
  Can the current viewer edit the primary and secondary category of this
  Marketplace listing.
  """
  viewerCanEditCategories: Boolean!
  "Can the current viewer edit the plans for this Marketplace listing."
  viewerCanEditPlans: Boolean!
  """
  Can the current viewer return this Marketplace listing to draft state
  so it becomes editable again.
  """
  viewerCanRedraft: Boolean!
  """
  Can the current viewer reject this Marketplace listing by returning it to
  an editable draft state or rejecting it entirely.
  """
  viewerCanReject: Boolean!
  """
  Can the current viewer request this listing be reviewed for display in
  the Marketplace.
  """
  viewerCanRequestApproval: Boolean!
  "Indicates whether the current user has an active subscription to this Marketplace listing."
  viewerHasPurchased: Boolean!
  """
  Indicates if the current user has purchased a subscription to this Marketplace listing
  for all of the organizations the user owns.
  """
  viewerHasPurchasedForAllOrganizations: Boolean!
  "Does the current viewer role allow them to administer this Marketplace listing."
  viewerIsListingAdmin: Boolean!
}

"Look up Marketplace Listings"
type Github_MarketplaceListingConnection {
  "A list of edges."
  edges: [Github_MarketplaceListingEdge]
  "A list of nodes."
  nodes: [Github_MarketplaceListing]
  "Information to aid in pagination."
  pageInfo: Github_PageInfo!
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type Github_MarketplaceListingEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Github_MarketplaceListing
}

"Represents a 'mentioned' event on a given issue or pull request."
type Github_MentionedEvent implements Github_Node {
  "Identifies the actor who performed the event."
  actor: Github_Actor
  "Identifies the date and time when the object was created."
  createdAt: Github_DateTime!
  "Identifies the primary key from the database."
  databaseId: Int
  id: ID!
}

"Represents a 'merged' event on a given pull request."
type Github_MergedEvent implements Github_Node & Github_UniformResourceLocatable {
  "Identifies the actor who performed the event."
  actor: Github_Actor
  "Identifies the commit associated with the `merge` event."
  commit: Github_Commit
  "Identifies the date and time when the object was created."
  createdAt: Github_DateTime!
  id: ID!
  "Identifies the Ref associated with the `merge` event."
  mergeRef: Github_Ref
  "Identifies the name of the Ref associated with the `merge` event."
  mergeRefName: String!
  "PullRequest referenced by event."
  pullRequest: Github_PullRequest!
  "The HTTP path for this merged event."
  resourcePath: Github_URI!
  "The HTTP URL for this merged event."
  url: Github_URI!
}

"Represents a Milestone object on a given repository."
type Github_Milestone implements Github_Closable & Github_Node & Github_UniformResourceLocatable {
  "`true` if the object is closed (definition of closed may depend on type)"
  closed: Boolean!
  "Identifies the date and time when the object was closed."
  closedAt: Github_DateTime
  "Identifies the date and time when the object was created."
  createdAt: Github_DateTime!
  "Identifies the actor who created the milestone."
  creator: Github_Actor
  "Identifies the description of the milestone."
  description: String
  "Identifies the due date of the milestone."
  dueOn: Github_DateTime
  id: ID!
  "A list of issues associated with the milestone."
  issues(
    #Returns the elements in the list that come after the specified cursor.
    after: String,
    #Returns the elements in the list that come before the specified cursor.
    before: String,
    #Returns the first _n_ elements from the list.
    first: Int,
    #A list of label names to filter the pull requests by.
    labels: [String!],
    #Returns the last _n_ elements from the list.
    last: Int,
    #Ordering options for issues returned from the connection.
    orderBy: Github_IssueOrder,
    #A list of states to filter the issues by.
    states: [Github_IssueState!]
  ): Github_IssueConnection!
  "Identifies the number of the milestone."
  number: Int!
  "A list of pull requests associated with the milestone."
  pullRequests(
    #Returns the elements in the list that come after the specified cursor.
    after: String,
    #The base ref name to filter the pull requests by.
    baseRefName: String,
    #Returns the elements in the list that come before the specified cursor.
    before: String,
    #Returns the first _n_ elements from the list.
    first: Int,
    #The head ref name to filter the pull requests by.
    headRefName: String,
    #A list of label names to filter the pull requests by.
    labels: [String!],
    #Returns the last _n_ elements from the list.
    last: Int,
    #Ordering options for pull requests returned from the connection.
    orderBy: Github_IssueOrder,
    #A list of states to filter the pull requests by.
    states: [Github_PullRequestState!]
  ): Github_PullRequestConnection!
  "The repository associated with this milestone."
  repository: Github_Repository!
  "The HTTP path for this milestone"
  resourcePath: Github_URI!
  "Identifies the state of the milestone."
  state: Github_MilestoneState!
  "Identifies the title of the milestone."
  title: String!
  "Identifies the date and time when the object was last updated."
  updatedAt: Github_DateTime!
  "The HTTP URL for this milestone"
  url: Github_URI!
}

"The connection type for Milestone."
type Github_MilestoneConnection {
  "A list of edges."
  edges: [Github_MilestoneEdge]
  "A list of nodes."
  nodes: [Github_Milestone]
  "Information to aid in pagination."
  pageInfo: Github_PageInfo!
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type Github_MilestoneEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Github_Milestone
}

"Represents a 'milestoned' event on a given issue or pull request."
type Github_MilestonedEvent implements Github_Node {
  "Identifies the actor who performed the event."
  actor: Github_Actor
  "Identifies the date and time when the object was created."
  createdAt: Github_DateTime!
  id: ID!
  "Identifies the milestone title associated with the 'milestoned' event."
  milestoneTitle: String!
  "Object referenced by event."
  subject: Github_MilestoneItem!
}

"Autogenerated return type of MoveProjectCard"
type Github_MoveProjectCardPayload {
  "The new edge of the moved card."
  cardEdge: Github_ProjectCardEdge!
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
}

"Autogenerated return type of MoveProjectColumn"
type Github_MoveProjectColumnPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  "The new edge of the moved column."
  columnEdge: Github_ProjectColumnEdge!
}

"Represents a 'moved_columns_in_project' event on a given issue or pull request."
type Github_MovedColumnsInProjectEvent implements Github_Node {
  "Identifies the actor who performed the event."
  actor: Github_Actor
  "Identifies the date and time when the object was created."
  createdAt: Github_DateTime!
  "Identifies the primary key from the database."
  databaseId: Int
  id: ID!
}

"An account on GitHub, with one or more owners, that has repositories, members and teams."
type Github_Organization implements Github_Actor & Github_Node & Github_ProjectOwner & Github_RegistryPackageOwner & Github_RegistryPackageSearch & Github_RepositoryOwner & Github_UniformResourceLocatable {
  "A URL pointing to the organization's public avatar."
  avatarUrl(
    #The size of the resulting square image.
    size: Int
  ): Github_URI!
  "Identifies the primary key from the database."
  databaseId: Int
  "The organization's public profile description."
  description: String
  "The organization's public email."
  email: String
  id: ID!
  "The organization's public profile location."
  location: String
  "The organization's login name."
  login: String!
  "A list of users who are members of this organization."
  members(
    #Returns the elements in the list that come after the specified cursor.
    after: String,
    #Returns the elements in the list that come before the specified cursor.
    before: String,
    #Returns the first _n_ elements from the list.
    first: Int,
    #Returns the last _n_ elements from the list.
    last: Int
  ): Github_UserConnection!
  "The organization's public profile name."
  name: String
  "The HTTP path creating a new team"
  newTeamResourcePath: Github_URI!
  "The HTTP URL creating a new team"
  newTeamUrl: Github_URI!
  "The billing email for the organization."
  organizationBillingEmail: String
  "A list of repositories this user has pinned to their profile"
  pinnedRepositories(
    #Affiliation options for repositories returned from the connection
    affiliations: [Github_RepositoryAffiliation],
    #Returns the elements in the list that come after the specified cursor.
    after: String,
    #Returns the elements in the list that come before the specified cursor.
    before: String,
    #Returns the first _n_ elements from the list.
    first: Int,
    #If non-null, filters repositories according to whether they have been locked
    isLocked: Boolean,
    #Returns the last _n_ elements from the list.
    last: Int,
    #Ordering options for repositories returned from the connection
    orderBy: Github_RepositoryOrder,
    #If non-null, filters repositories according to privacy
    privacy: Github_RepositoryPrivacy
  ): Github_RepositoryConnection!
  "Find project by number."
  project(
    #The project number to find.
    number: Int!
  ): Github_Project
  "A list of projects under the owner."
  projects(
    #Returns the elements in the list that come after the specified cursor.
    after: String,
    #Returns the elements in the list that come before the specified cursor.
    before: String,
    #Returns the first _n_ elements from the list.
    first: Int,
    #Returns the last _n_ elements from the list.
    last: Int,
    #Ordering options for projects returned from the connection
    orderBy: Github_ProjectOrder,
    #Query to search projects by, currently only searching by name.
    search: String,
    #A list of states to filter the projects by.
    states: [Github_ProjectState!]
  ): Github_ProjectConnection!
  "The HTTP path listing organization's projects"
  projectsResourcePath: Github_URI!
  "The HTTP URL listing organization's projects"
  projectsUrl: Github_URI!
  "A list of repositories that the user owns."
  repositories(
    #Affiliation options for repositories returned from the connection
    affiliations: [Github_RepositoryAffiliation],
    #Returns the elements in the list that come after the specified cursor.
    after: String,
    #Returns the elements in the list that come before the specified cursor.
    before: String,
    #Returns the first _n_ elements from the list.
    first: Int,
    #If non-null, filters repositories according to whether they are forks of another repository
    isFork: Boolean,
    #If non-null, filters repositories according to whether they have been locked
    isLocked: Boolean,
    #Returns the last _n_ elements from the list.
    last: Int,
    #Ordering options for repositories returned from the connection
    orderBy: Github_RepositoryOrder,
    #If non-null, filters repositories according to privacy
    privacy: Github_RepositoryPrivacy
  ): Github_RepositoryConnection!
  "Find Repository."
  repository(
    #Name of Repository to find.
    name: String!
  ): Github_Repository
  "The HTTP path for this user"
  resourcePath: Github_URI!
  "The Organization's SAML Identity Providers"
  samlIdentityProvider: Github_OrganizationIdentityProvider
  "Find an organization's team by its slug."
  team(
    #The name or slug of the team to find.
    slug: String!
  ): Github_Team
  "A list of teams in this organization."
  teams(
    #Returns the elements in the list that come after the specified cursor.
    after: String,
    #Returns the elements in the list that come before the specified cursor.
    before: String,
    #Returns the first _n_ elements from the list.
    first: Int,
    #Returns the last _n_ elements from the list.
    last: Int,
    #If true, filters teams that are mapped to an LDAP Group (Enterprise only)
    ldapMapped: Boolean,
    #Ordering options for teams returned from the connection
    orderBy: Github_TeamOrder,
    #If non-null, filters teams according to privacy
    privacy: Github_TeamPrivacy,
    #If non-null, filters teams with query on team name and team slug
    query: String,
    #If non-null, filters teams according to whether the viewer is an admin or member on team
    role: Github_TeamRole,
    #If true, restrict to only root teams
    rootTeamsOnly: Boolean = false,
    #User logins to filter by
    userLogins: [String!]
  ): Github_TeamConnection!
  "The HTTP path listing organization's teams"
  teamsResourcePath: Github_URI!
  "The HTTP URL listing organization's teams"
  teamsUrl: Github_URI!
  "The HTTP URL for this user"
  url: Github_URI!
  "Organization is adminable by the viewer."
  viewerCanAdminister: Boolean!
  "Can the current viewer create new projects on this owner."
  viewerCanCreateProjects: Boolean!
  "Viewer can create repositories on this organization"
  viewerCanCreateRepositories: Boolean!
  "Viewer can create teams on this organization."
  viewerCanCreateTeams: Boolean!
  "Viewer is an active member of this organization."
  viewerIsAMember: Boolean!
  "The organization's public profile URL."
  websiteUrl: Github_URI
}

"The connection type for Organization."
type Github_OrganizationConnection {
  "A list of edges."
  edges: [Github_OrganizationEdge]
  "A list of nodes."
  nodes: [Github_Organization]
  "Information to aid in pagination."
  pageInfo: Github_PageInfo!
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type Github_OrganizationEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Github_Organization
}

"An Identity Provider configured to provision SAML and SCIM identities for Organizations"
type Github_OrganizationIdentityProvider implements Github_Node {
  "The digest algorithm used to sign SAML requests for the Identity Provider."
  digestMethod: Github_URI
  "External Identities provisioned by this Identity Provider"
  externalIdentities(
    #Returns the elements in the list that come after the specified cursor.
    after: String,
    #Returns the elements in the list that come before the specified cursor.
    before: String,
    #Returns the first _n_ elements from the list.
    first: Int,
    #Returns the last _n_ elements from the list.
    last: Int
  ): Github_ExternalIdentityConnection!
  id: ID!
  "The x509 certificate used by the Identity Provder to sign assertions and responses."
  idpCertificate: Github_X509Certificate
  "The Issuer Entity ID for the SAML Identity Provider"
  issuer: String
  "Organization this Identity Provider belongs to"
  organization: Github_Organization
  "The signature algorithm used to sign SAML requests for the Identity Provider."
  signatureMethod: Github_URI
  "The URL endpoint for the Identity Provider's SAML SSO."
  ssoUrl: Github_URI
}

"An Invitation for a user to an organization."
type Github_OrganizationInvitation implements Github_Node {
  "Identifies the date and time when the object was created."
  createdAt: Github_DateTime!
  "The email address of the user invited to the organization."
  email: String
  id: ID!
  "The type of invitation that was sent (e.g. email, user)."
  invitationType: Github_OrganizationInvitationType!
  "The user who was invited to the organization."
  invitee: Github_User
  "The user who created the invitation."
  inviter: Github_User!
  "The organization the invite is for"
  organization: Github_Organization!
  "The user's pending role in the organization (e.g. member, owner)."
  role: Github_OrganizationInvitationRole!
}

"The connection type for OrganizationInvitation."
type Github_OrganizationInvitationConnection {
  "A list of edges."
  edges: [Github_OrganizationInvitationEdge]
  "A list of nodes."
  nodes: [Github_OrganizationInvitation]
  "Information to aid in pagination."
  pageInfo: Github_PageInfo!
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type Github_OrganizationInvitationEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Github_OrganizationInvitation
}

"Information about pagination in a connection."
type Github_PageInfo {
  "When paginating forwards, the cursor to continue."
  endCursor: String
  "When paginating forwards, are there more items?"
  hasNextPage: Boolean!
  "When paginating backwards, are there more items?"
  hasPreviousPage: Boolean!
  "When paginating backwards, the cursor to continue."
  startCursor: String
}

"Projects manage issues, pull requests and notes within a project owner."
type Github_Project implements Github_Closable & Github_Node & Github_Updatable {
  "The project's description body."
  body: String
  "The projects description body rendered to HTML."
  bodyHTML: Github_HTML!
  "`true` if the object is closed (definition of closed may depend on type)"
  closed: Boolean!
  "Identifies the date and time when the object was closed."
  closedAt: Github_DateTime
  "List of columns in the project"
  columns(
    #Returns the elements in the list that come after the specified cursor.
    after: String,
    #Returns the elements in the list that come before the specified cursor.
    before: String,
    #Returns the first _n_ elements from the list.
    first: Int,
    #Returns the last _n_ elements from the list.
    last: Int
  ): Github_ProjectColumnConnection!
  "Identifies the date and time when the object was created."
  createdAt: Github_DateTime!
  "The actor who originally created the project."
  creator: Github_Actor
  "Identifies the primary key from the database."
  databaseId: Int
  id: ID!
  "The project's name."
  name: String!
  "The project's number."
  number: Int!
  "The project's owner. Currently limited to repositories and organizations."
  owner: Github_ProjectOwner!
  "List of pending cards in this project"
  pendingCards(
    #Returns the elements in the list that come after the specified cursor.
    after: String,
    #Returns the elements in the list that come before the specified cursor.
    before: String,
    #Returns the first _n_ elements from the list.
    first: Int,
    #Returns the last _n_ elements from the list.
    last: Int
  ): Github_ProjectCardConnection!
  "The HTTP path for this project"
  resourcePath: Github_URI!
  "Whether the project is open or closed."
  state: Github_ProjectState!
  "Identifies the date and time when the object was last updated."
  updatedAt: Github_DateTime!
  "The HTTP URL for this project"
  url: Github_URI!
  "Check if the current viewer can update this object."
  viewerCanUpdate: Boolean!
}

"A card in a project."
type Github_ProjectCard implements Github_Node {
  """
  The project column this card is associated under. A card may only belong to one
  project column at a time. The column field will be null if the card is created
  in a pending state and has yet to be associated with a column. Once cards are
  associated with a column, they will not become pending in the future.
  """
  column: Github_ProjectColumn
  "The card content item"
  content: Github_ProjectCardItem
  "Identifies the date and time when the object was created."
  createdAt: Github_DateTime!
  "The actor who created this card"
  creator: Github_Actor
  "Identifies the primary key from the database."
  databaseId: Int
  id: ID!
  "The card note"
  note: String
  "The project that contains this card."
  project: Github_Project!
  "The HTTP path for this card"
  resourcePath: Github_URI!
  "The state of ProjectCard"
  state: Github_ProjectCardState
  "Identifies the date and time when the object was last updated."
  updatedAt: Github_DateTime!
  "The HTTP URL for this card"
  url: Github_URI!
}

"The connection type for ProjectCard."
type Github_ProjectCardConnection {
  "A list of edges."
  edges: [Github_ProjectCardEdge]
  "A list of nodes."
  nodes: [Github_ProjectCard]
  "Information to aid in pagination."
  pageInfo: Github_PageInfo!
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type Github_ProjectCardEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Github_ProjectCard
}

"A column inside a project."
type Github_ProjectColumn implements Github_Node {
  "List of cards in the column"
  cards(
    #Returns the elements in the list that come after the specified cursor.
    after: String,
    #Returns the elements in the list that come before the specified cursor.
    before: String,
    #Returns the first _n_ elements from the list.
    first: Int,
    #Returns the last _n_ elements from the list.
    last: Int
  ): Github_ProjectCardConnection!
  "Identifies the date and time when the object was created."
  createdAt: Github_DateTime!
  "Identifies the primary key from the database."
  databaseId: Int
  id: ID!
  "The project column's name."
  name: String!
  "The project that contains this column."
  project: Github_Project!
  "The HTTP path for this project column"
  resourcePath: Github_URI!
  "Identifies the date and time when the object was last updated."
  updatedAt: Github_DateTime!
  "The HTTP URL for this project column"
  url: Github_URI!
}

"The connection type for ProjectColumn."
type Github_ProjectColumnConnection {
  "A list of edges."
  edges: [Github_ProjectColumnEdge]
  "A list of nodes."
  nodes: [Github_ProjectColumn]
  "Information to aid in pagination."
  pageInfo: Github_PageInfo!
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type Github_ProjectColumnEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Github_ProjectColumn
}

"A list of projects associated with the owner."
type Github_ProjectConnection {
  "A list of edges."
  edges: [Github_ProjectEdge]
  "A list of nodes."
  nodes: [Github_Project]
  "Information to aid in pagination."
  pageInfo: Github_PageInfo!
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type Github_ProjectEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Github_Project
}

"A repository protected branch."
type Github_ProtectedBranch implements Github_Node {
  "The actor who created this protected branch."
  creator: Github_Actor
  "Will new commits pushed to this branch dismiss pull request review approvals."
  hasDismissableStaleReviews: Boolean!
  "Are reviews required to update this branch."
  hasRequiredReviews: Boolean!
  "Are status checks required to update this branch."
  hasRequiredStatusChecks: Boolean!
  "Is pushing to this branch restricted."
  hasRestrictedPushes: Boolean!
  "Is dismissal of pull request reviews restricted."
  hasRestrictedReviewDismissals: Boolean!
  "Are branches required to be up to date before merging."
  hasStrictRequiredStatusChecks: Boolean!
  id: ID!
  "Can admins overwrite branch protection."
  isAdminEnforced: Boolean!
  "Identifies the name of the protected branch."
  name: String!
  "A list push allowances for this protected branch."
  pushAllowances(
    #Returns the elements in the list that come after the specified cursor.
    after: String,
    #Returns the elements in the list that come before the specified cursor.
    before: String,
    #Returns the first _n_ elements from the list.
    first: Int,
    #Returns the last _n_ elements from the list.
    last: Int
  ): Github_PushAllowanceConnection!
  "The repository associated with this protected branch."
  repository: Github_Repository!
  "List of required status check contexts that must pass for commits to be accepted to this branch."
  requiredStatusCheckContexts: [String]
  "A list review dismissal allowances for this protected branch."
  reviewDismissalAllowances(
    #Returns the elements in the list that come after the specified cursor.
    after: String,
    #Returns the elements in the list that come before the specified cursor.
    before: String,
    #Returns the first _n_ elements from the list.
    first: Int,
    #Returns the last _n_ elements from the list.
    last: Int
  ): Github_ReviewDismissalAllowanceConnection!
}

"The connection type for ProtectedBranch."
type Github_ProtectedBranchConnection {
  "A list of edges."
  edges: [Github_ProtectedBranchEdge]
  "A list of nodes."
  nodes: [Github_ProtectedBranch]
  "Information to aid in pagination."
  pageInfo: Github_PageInfo!
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type Github_ProtectedBranchEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Github_ProtectedBranch
}

"A user's public key."
type Github_PublicKey implements Github_Node {
  id: ID!
  "The public key string"
  key: String!
}

"The connection type for PublicKey."
type Github_PublicKeyConnection {
  "A list of edges."
  edges: [Github_PublicKeyEdge]
  "A list of nodes."
  nodes: [Github_PublicKey]
  "Information to aid in pagination."
  pageInfo: Github_PageInfo!
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type Github_PublicKeyEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Github_PublicKey
}

"A repository pull request."
type Github_PullRequest implements Github_Assignable & Github_Closable & Github_Comment & Github_Labelable & Github_Lockable & Github_Node & Github_Reactable & Github_RepositoryNode & Github_Subscribable & Github_UniformResourceLocatable & Github_Updatable & Github_UpdatableComment {
  "Reason that the conversation was locked."
  activeLockReason: Github_LockReason
  "The number of additions in this pull request."
  additions: Int!
  "A list of Users assigned to this object."
  assignees(
    #Returns the elements in the list that come after the specified cursor.
    after: String,
    #Returns the elements in the list that come before the specified cursor.
    before: String,
    #Returns the first _n_ elements from the list.
    first: Int,
    #Returns the last _n_ elements from the list.
    last: Int
  ): Github_UserConnection!
  "The actor who authored the comment."
  author: Github_Actor
  "Author's association with the subject of the comment."
  authorAssociation: Github_CommentAuthorAssociation!
  "Identifies the base Ref associated with the pull request."
  baseRef: Github_Ref
  "Identifies the name of the base Ref associated with the pull request, even if the ref has been deleted."
  baseRefName: String!
  "Identifies the oid of the base ref associated with the pull request, even if the ref has been deleted."
  baseRefOid: Github_GitObjectID!
  "The body as Markdown."
  body: String!
  "The body rendered to HTML."
  bodyHTML: Github_HTML!
  "The body rendered to text."
  bodyText: String!
  "The number of changed files in this pull request."
  changedFiles: Int!
  "`true` if the pull request is closed"
  closed: Boolean!
  "Identifies the date and time when the object was closed."
  closedAt: Github_DateTime
  "A list of comments associated with the pull request."
  comments(
    #Returns the elements in the list that come after the specified cursor.
    after: String,
    #Returns the elements in the list that come before the specified cursor.
    before: String,
    #Returns the first _n_ elements from the list.
    first: Int,
    #Returns the last _n_ elements from the list.
    last: Int
  ): Github_IssueCommentConnection!
  "A list of commits present in this pull request's head branch not present in the base branch."
  commits(
    #Returns the elements in the list that come after the specified cursor.
    after: String,
    #Returns the elements in the list that come before the specified cursor.
    before: String,
    #Returns the first _n_ elements from the list.
    first: Int,
    #Returns the last _n_ elements from the list.
    last: Int
  ): Github_PullRequestCommitConnection!
  "Identifies the date and time when the object was created."
  createdAt: Github_DateTime!
  "Check if this comment was created via an email reply."
  createdViaEmail: Boolean!
  "Identifies the primary key from the database."
  databaseId: Int
  "The number of deletions in this pull request."
  deletions: Int!
  "The actor who edited this pull request's body."
  editor: Github_Actor
  "Identifies the head Ref associated with the pull request."
  headRef: Github_Ref
  "Identifies the name of the head Ref associated with the pull request, even if the ref has been deleted."
  headRefName: String!
  "Identifies the oid of the head ref associated with the pull request, even if the ref has been deleted."
  headRefOid: Github_GitObjectID!
  "The repository associated with this pull request's head Ref."
  headRepository: Github_Repository
  "The owner of the repository associated with this pull request's head Ref."
  headRepositoryOwner: Github_RepositoryOwner
  id: ID!
  "Check if this comment was edited and includes an edit with the creation data"
  includesCreatedEdit: Boolean!
  "The head and base repositories are different."
  isCrossRepository: Boolean!
  "A list of labels associated with the object."
  labels(
    #Returns the elements in the list that come after the specified cursor.
    after: String,
    #Returns the elements in the list that come before the specified cursor.
    before: String,
    #Returns the first _n_ elements from the list.
    first: Int,
    #Returns the last _n_ elements from the list.
    last: Int
  ): Github_LabelConnection
  "The moment the editor made the last edit"
  lastEditedAt: Github_DateTime
  "`true` if the pull request is locked"
  locked: Boolean!
  "Indicates whether maintainers can modify the pull request."
  maintainerCanModify: Boolean!
  "The commit that was created when this pull request was merged."
  mergeCommit: Github_Commit
  "Whether or not the pull request can be merged based on the existence of merge conflicts."
  mergeable: Github_MergeableState!
  "Whether or not the pull request was merged."
  merged: Boolean!
  "The date and time that the pull request was merged."
  mergedAt: Github_DateTime
  "The actor who merged the pull request."
  mergedBy: Github_Actor
  "Identifies the milestone associated with the pull request."
  milestone: Github_Milestone
  "Identifies the pull request number."
  number: Int!
  "A list of Users that are participating in the Pull Request conversation."
  participants(
    #Returns the elements in the list that come after the specified cursor.
    after: String,
    #Returns the elements in the list that come before the specified cursor.
    before: String,
    #Returns the first _n_ elements from the list.
    first: Int,
    #Returns the last _n_ elements from the list.
    last: Int
  ): Github_UserConnection!
  "The permalink to the pull request."
  permalink: Github_URI!
  """
  The commit that GitHub automatically generated to test if this pull request
  could be merged. This field will not return a value if the pull request is
  merged, or if the test merge commit is still being generated. See the
  `mergeable` field for more details on the mergeability of the pull request.
  """
  potentialMergeCommit: Github_Commit
  "List of project cards associated with this pull request."
  projectCards(
    #Returns the elements in the list that come after the specified cursor.
    after: String,
    #Returns the elements in the list that come before the specified cursor.
    before: String,
    #Returns the first _n_ elements from the list.
    first: Int,
    #Returns the last _n_ elements from the list.
    last: Int
  ): Github_ProjectCardConnection!
  "Identifies when the comment was published at."
  publishedAt: Github_DateTime
  "A list of reactions grouped by content left on the subject."
  reactionGroups: [Github_ReactionGroup!]
  "A list of Reactions left on the Issue."
  reactions(
    #Returns the elements in the list that come after the specified cursor.
    after: String,
    #Returns the elements in the list that come before the specified cursor.
    before: String,
    #Allows filtering Reactions by emoji.
    content: Github_ReactionContent,
    #Returns the first _n_ elements from the list.
    first: Int,
    #Returns the last _n_ elements from the list.
    last: Int,
    #Allows specifying the order in which reactions are returned.
    orderBy: Github_ReactionOrder
  ): Github_ReactionConnection!
  "The repository associated with this node."
  repository: Github_Repository!
  "The HTTP path for this pull request."
  resourcePath: Github_URI!
  "The HTTP path for reverting this pull request."
  revertResourcePath: Github_URI!
  "The HTTP URL for reverting this pull request."
  revertUrl: Github_URI!
  "A list of review requests associated with the pull request."
  reviewRequests(
    #Returns the elements in the list that come after the specified cursor.
    after: String,
    #Returns the elements in the list that come before the specified cursor.
    before: String,
    #Returns the first _n_ elements from the list.
    first: Int,
    #Returns the last _n_ elements from the list.
    last: Int
  ): Github_ReviewRequestConnection
  "A list of reviews associated with the pull request."
  reviews(
    #Returns the elements in the list that come after the specified cursor.
    after: String,
    #Filter by author of the review.
    author: String,
    #Returns the elements in the list that come before the specified cursor.
    before: String,
    #Returns the first _n_ elements from the list.
    first: Int,
    #Returns the last _n_ elements from the list.
    last: Int,
    #A list of states to filter the reviews.
    states: [Github_PullRequestReviewState!]
  ): Github_PullRequestReviewConnection
  "Identifies the state of the pull request."
  state: Github_PullRequestState!
  "A list of reviewer suggestions based on commit history and past review comments."
  suggestedReviewers: [Github_SuggestedReviewer]!
  "A list of events, comments, commits, etc. associated with the pull request."
  timeline(
    #Returns the elements in the list that come after the specified cursor.
    after: String,
    #Returns the elements in the list that come before the specified cursor.
    before: String,
    #Returns the first _n_ elements from the list.
    first: Int,
    #Returns the last _n_ elements from the list.
    last: Int,
    #Allows filtering timeline events by a `since` timestamp.
    since: Github_DateTime
  ): Github_PullRequestTimelineConnection!
  "Identifies the pull request title."
  title: String!
  "Identifies the date and time when the object was last updated."
  updatedAt: Github_DateTime!
  "The HTTP URL for this pull request."
  url: Github_URI!
  "A list of edits to this content."
  userContentEdits(
    #Returns the elements in the list that come after the specified cursor.
    after: String,
    #Returns the elements in the list that come before the specified cursor.
    before: String,
    #Returns the first _n_ elements from the list.
    first: Int,
    #Returns the last _n_ elements from the list.
    last: Int
  ): Github_UserContentEditConnection
  "Can user react to this subject"
  viewerCanReact: Boolean!
  "Check if the viewer is able to change their subscription status for the repository."
  viewerCanSubscribe: Boolean!
  "Check if the current viewer can update this object."
  viewerCanUpdate: Boolean!
  "Reasons why the current viewer can not update this comment."
  viewerCannotUpdateReasons: [Github_CommentCannotUpdateReason!]!
  "Did the viewer author this comment."
  viewerDidAuthor: Boolean!
  "Identifies if the viewer is watching, not watching, or ignoring the subscribable entity."
  viewerSubscription: Github_SubscriptionState
}

"Represents a Git commit part of a pull request."
type Github_PullRequestCommit implements Github_Node & Github_UniformResourceLocatable {
  "The Git commit object"
  commit: Github_Commit!
  id: ID!
  "The pull request this commit belongs to"
  pullRequest: Github_PullRequest!
  "The HTTP path for this pull request commit"
  resourcePath: Github_URI!
  "The HTTP URL for this pull request commit"
  url: Github_URI!
}

"The connection type for PullRequestCommit."
type Github_PullRequestCommitConnection {
  "A list of edges."
  edges: [Github_PullRequestCommitEdge]
  "A list of nodes."
  nodes: [Github_PullRequestCommit]
  "Information to aid in pagination."
  pageInfo: Github_PageInfo!
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type Github_PullRequestCommitEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Github_PullRequestCommit
}

"The connection type for PullRequest."
type Github_PullRequestConnection {
  "A list of edges."
  edges: [Github_PullRequestEdge]
  "A list of nodes."
  nodes: [Github_PullRequest]
  "Information to aid in pagination."
  pageInfo: Github_PageInfo!
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type Github_PullRequestEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Github_PullRequest
}

"A review object for a given pull request."
type Github_PullRequestReview implements Github_Comment & Github_Deletable & Github_Node & Github_RepositoryNode & Github_Updatable & Github_UpdatableComment {
  "The actor who authored the comment."
  author: Github_Actor
  "Author's association with the subject of the comment."
  authorAssociation: Github_CommentAuthorAssociation!
  "Identifies the pull request review body."
  body: String!
  "The body of this review rendered to HTML."
  bodyHTML: Github_HTML!
  "The body of this review rendered as plain text."
  bodyText: String!
  "A list of review comments for the current pull request review."
  comments(
    #Returns the elements in the list that come after the specified cursor.
    after: String,
    #Returns the elements in the list that come before the specified cursor.
    before: String,
    #Returns the first _n_ elements from the list.
    first: Int,
    #Returns the last _n_ elements from the list.
    last: Int
  ): Github_PullRequestReviewCommentConnection!
  "Identifies the commit associated with this pull request review."
  commit: Github_Commit
  "Identifies the date and time when the object was created."
  createdAt: Github_DateTime!
  "Check if this comment was created via an email reply."
  createdViaEmail: Boolean!
  "Identifies the primary key from the database."
  databaseId: Int
  "The actor who edited the comment."
  editor: Github_Actor
  id: ID!
  "Check if this comment was edited and includes an edit with the creation data"
  includesCreatedEdit: Boolean!
  "The moment the editor made the last edit"
  lastEditedAt: Github_DateTime
  "Identifies when the comment was published at."
  publishedAt: Github_DateTime
  "Identifies the pull request associated with this pull request review."
  pullRequest: Github_PullRequest!
  "The repository associated with this node."
  repository: Github_Repository!
  "The HTTP path permalink for this PullRequestReview."
  resourcePath: Github_URI!
  "Identifies the current state of the pull request review."
  state: Github_PullRequestReviewState!
  "Identifies when the Pull Request Review was submitted"
  submittedAt: Github_DateTime
  "Identifies the date and time when the object was last updated."
  updatedAt: Github_DateTime!
  "The HTTP URL permalink for this PullRequestReview."
  url: Github_URI!
  "A list of edits to this content."
  userContentEdits(
    #Returns the elements in the list that come after the specified cursor.
    after: String,
    #Returns the elements in the list that come before the specified cursor.
    before: String,
    #Returns the first _n_ elements from the list.
    first: Int,
    #Returns the last _n_ elements from the list.
    last: Int
  ): Github_UserContentEditConnection
  "Check if the current viewer can delete this object."
  viewerCanDelete: Boolean!
  "Check if the current viewer can update this object."
  viewerCanUpdate: Boolean!
  "Reasons why the current viewer can not update this comment."
  viewerCannotUpdateReasons: [Github_CommentCannotUpdateReason!]!
  "Did the viewer author this comment."
  viewerDidAuthor: Boolean!
}

"A review comment associated with a given repository pull request."
type Github_PullRequestReviewComment implements Github_Comment & Github_Deletable & Github_Node & Github_Reactable & Github_RepositoryNode & Github_Updatable & Github_UpdatableComment {
  "The actor who authored the comment."
  author: Github_Actor
  "Author's association with the subject of the comment."
  authorAssociation: Github_CommentAuthorAssociation!
  "The comment body of this review comment."
  body: String!
  "The comment body of this review comment rendered to HTML."
  bodyHTML: Github_HTML!
  "The comment body of this review comment rendered as plain text."
  bodyText: String!
  "Identifies the commit associated with the comment."
  commit: Github_Commit!
  "Identifies when the comment was created."
  createdAt: Github_DateTime!
  "Check if this comment was created via an email reply."
  createdViaEmail: Boolean!
  "Identifies the primary key from the database."
  databaseId: Int
  "The diff hunk to which the comment applies."
  diffHunk: String!
  "Identifies when the comment was created in a draft state."
  draftedAt: Github_DateTime!
  "The actor who edited the comment."
  editor: Github_Actor
  id: ID!
  "Check if this comment was edited and includes an edit with the creation data"
  includesCreatedEdit: Boolean!
  "The moment the editor made the last edit"
  lastEditedAt: Github_DateTime
  "Identifies the original commit associated with the comment."
  originalCommit: Github_Commit
  "The original line index in the diff to which the comment applies."
  originalPosition: Int!
  "The path to which the comment applies."
  path: String!
  "The line index in the diff to which the comment applies."
  position: Int
  "Identifies when the comment was published at."
  publishedAt: Github_DateTime
  "The pull request associated with this review comment."
  pullRequest: Github_PullRequest!
  "The pull request review associated with this review comment."
  pullRequestReview: Github_PullRequestReview
  "A list of reactions grouped by content left on the subject."
  reactionGroups: [Github_ReactionGroup!]
  "A list of Reactions left on the Issue."
  reactions(
    #Returns the elements in the list that come after the specified cursor.
    after: String,
    #Returns the elements in the list that come before the specified cursor.
    before: String,
    #Allows filtering Reactions by emoji.
    content: Github_ReactionContent,
    #Returns the first _n_ elements from the list.
    first: Int,
    #Returns the last _n_ elements from the list.
    last: Int,
    #Allows specifying the order in which reactions are returned.
    orderBy: Github_ReactionOrder
  ): Github_ReactionConnection!
  "The comment this is a reply to."
  replyTo: Github_PullRequestReviewComment
  "The repository associated with this node."
  repository: Github_Repository!
  "The HTTP path permalink for this review comment."
  resourcePath: Github_URI!
  "Identifies when the comment was last updated."
  updatedAt: Github_DateTime!
  "The HTTP URL permalink for this review comment."
  url: Github_URI!
  "A list of edits to this content."
  userContentEdits(
    #Returns the elements in the list that come after the specified cursor.
    after: String,
    #Returns the elements in the list that come before the specified cursor.
    before: String,
    #Returns the first _n_ elements from the list.
    first: Int,
    #Returns the last _n_ elements from the list.
    last: Int
  ): Github_UserContentEditConnection
  "Check if the current viewer can delete this object."
  viewerCanDelete: Boolean!
  "Can user react to this subject"
  viewerCanReact: Boolean!
  "Check if the current viewer can update this object."
  viewerCanUpdate: Boolean!
  "Reasons why the current viewer can not update this comment."
  viewerCannotUpdateReasons: [Github_CommentCannotUpdateReason!]!
  "Did the viewer author this comment."
  viewerDidAuthor: Boolean!
}

"The connection type for PullRequestReviewComment."
type Github_PullRequestReviewCommentConnection {
  "A list of edges."
  edges: [Github_PullRequestReviewCommentEdge]
  "A list of nodes."
  nodes: [Github_PullRequestReviewComment]
  "Information to aid in pagination."
  pageInfo: Github_PageInfo!
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type Github_PullRequestReviewCommentEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Github_PullRequestReviewComment
}

"The connection type for PullRequestReview."
type Github_PullRequestReviewConnection {
  "A list of edges."
  edges: [Github_PullRequestReviewEdge]
  "A list of nodes."
  nodes: [Github_PullRequestReview]
  "Information to aid in pagination."
  pageInfo: Github_PageInfo!
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type Github_PullRequestReviewEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Github_PullRequestReview
}

"A threaded list of comments for a given pull request."
type Github_PullRequestReviewThread implements Github_Node {
  "A list of pull request comments associated with the thread."
  comments(
    #Returns the elements in the list that come after the specified cursor.
    after: String,
    #Returns the elements in the list that come before the specified cursor.
    before: String,
    #Returns the first _n_ elements from the list.
    first: Int,
    #Returns the last _n_ elements from the list.
    last: Int
  ): Github_PullRequestReviewCommentConnection!
  id: ID!
  "Identifies the pull request associated with this thread."
  pullRequest: Github_PullRequest!
  "Identifies the repository associated with this thread."
  repository: Github_Repository!
}

"The connection type for PullRequestTimelineItem."
type Github_PullRequestTimelineConnection {
  "A list of edges."
  edges: [Github_PullRequestTimelineItemEdge]
  "A list of nodes."
  nodes: [Github_PullRequestTimelineItem]
  "Information to aid in pagination."
  pageInfo: Github_PageInfo!
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type Github_PullRequestTimelineItemEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Github_PullRequestTimelineItem
}

"A team or user who has the ability to push to a protected branch."
type Github_PushAllowance implements Github_Node {
  "The actor that can push."
  actor: Github_PushAllowanceActor
  id: ID!
  "Identifies the protected branch associated with the allowed user or team."
  protectedBranch: Github_ProtectedBranch!
}

"The connection type for PushAllowance."
type Github_PushAllowanceConnection {
  "A list of edges."
  edges: [Github_PushAllowanceEdge]
  "A list of nodes."
  nodes: [Github_PushAllowance]
  "Information to aid in pagination."
  pageInfo: Github_PageInfo!
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type Github_PushAllowanceEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Github_PushAllowance
}

"Represents the client's rate limit."
type Github_RateLimit {
  "The point cost for the current query counting against the rate limit."
  cost: Int!
  "The maximum number of points the client is permitted to consume in a 60 minute window."
  limit: Int!
  "The maximum number of nodes this query may return"
  nodeCount: Int!
  "The number of points remaining in the current rate limit window."
  remaining: Int!
  "The time at which the current rate limit window resets in UTC epoch seconds."
  resetAt: Github_DateTime!
}

"The connection type for User."
type Github_ReactingUserConnection {
  "A list of edges."
  edges: [Github_ReactingUserEdge]
  "A list of nodes."
  nodes: [Github_User]
  "Information to aid in pagination."
  pageInfo: Github_PageInfo!
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"Represents a user that's made a reaction."
type Github_ReactingUserEdge {
  "A cursor for use in pagination."
  cursor: String!
  node: Github_User!
  "The moment when the user made the reaction."
  reactedAt: Github_DateTime!
}

"An emoji reaction to a particular piece of content."
type Github_Reaction implements Github_Node {
  "Identifies the emoji reaction."
  content: Github_ReactionContent!
  "Identifies the date and time when the object was created."
  createdAt: Github_DateTime!
  "Identifies the primary key from the database."
  databaseId: Int
  id: ID!
  "The reactable piece of content"
  reactable: Github_Reactable!
  "Identifies the user who created this reaction."
  user: Github_User
}

"A list of reactions that have been left on the subject."
type Github_ReactionConnection {
  "A list of edges."
  edges: [Github_ReactionEdge]
  "A list of nodes."
  nodes: [Github_Reaction]
  "Information to aid in pagination."
  pageInfo: Github_PageInfo!
  "Identifies the total count of items in the connection."
  totalCount: Int!
  "Whether or not the authenticated user has left a reaction on the subject."
  viewerHasReacted: Boolean!
}

"An edge in a connection."
type Github_ReactionEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Github_Reaction
}

"A group of emoji reactions to a particular piece of content."
type Github_ReactionGroup {
  "Identifies the emoji reaction."
  content: Github_ReactionContent!
  "Identifies when the reaction was created."
  createdAt: Github_DateTime
  "The subject that was reacted to."
  subject: Github_Reactable!
  "Users who have reacted to the reaction subject with the emotion represented by this reaction group"
  users(
    #Returns the elements in the list that come after the specified cursor.
    after: String,
    #Returns the elements in the list that come before the specified cursor.
    before: String,
    #Returns the first _n_ elements from the list.
    first: Int,
    #Returns the last _n_ elements from the list.
    last: Int
  ): Github_ReactingUserConnection!
  "Whether or not the authenticated user has left a reaction on the subject."
  viewerHasReacted: Boolean!
}

"Represents a Git reference."
type Github_Ref implements Github_Node {
  "A list of pull requests with this ref as the head ref."
  associatedPullRequests(
    #Returns the elements in the list that come after the specified cursor.
    after: String,
    #The base ref name to filter the pull requests by.
    baseRefName: String,
    #Returns the elements in the list that come before the specified cursor.
    before: String,
    #Returns the first _n_ elements from the list.
    first: Int,
    #The head ref name to filter the pull requests by.
    headRefName: String,
    #A list of label names to filter the pull requests by.
    labels: [String!],
    #Returns the last _n_ elements from the list.
    last: Int,
    #Ordering options for pull requests returned from the connection.
    orderBy: Github_IssueOrder,
    #A list of states to filter the pull requests by.
    states: [Github_PullRequestState!]
  ): Github_PullRequestConnection!
  id: ID!
  "The ref name."
  name: String!
  "The ref's prefix, such as `refs/heads/` or `refs/tags/`."
  prefix: String!
  "The repository the ref belongs to."
  repository: Github_Repository!
  "The object the ref points to."
  target: Github_GitObject!
}

"The connection type for Ref."
type Github_RefConnection {
  "A list of edges."
  edges: [Github_RefEdge]
  "A list of nodes."
  nodes: [Github_Ref]
  "Information to aid in pagination."
  pageInfo: Github_PageInfo!
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type Github_RefEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Github_Ref
}

"Represents a 'referenced' event on a given `ReferencedSubject`."
type Github_ReferencedEvent implements Github_Node {
  "Identifies the actor who performed the event."
  actor: Github_Actor
  "Identifies the commit associated with the 'referenced' event."
  commit: Github_Commit
  "Identifies the repository associated with the 'referenced' event."
  commitRepository: Github_Repository!
  "Identifies the date and time when the object was created."
  createdAt: Github_DateTime!
  id: ID!
  "Reference originated in a different repository."
  isCrossRepository: Boolean!
  "Checks if the commit message itself references the subject. Can be false in the case of a commit comment reference."
  isDirectReference: Boolean!
  "Object referenced by event."
  subject: Github_ReferencedSubject!
}

"A release contains the content for a release."
type Github_Release implements Github_Node & Github_UniformResourceLocatable {
  "The author of the release"
  author: Github_User
  "Identifies the date and time when the object was created."
  createdAt: Github_DateTime!
  "Identifies the description of the release."
  description: String
  id: ID!
  "Whether or not the release is a draft"
  isDraft: Boolean!
  "Whether or not the release is a prerelease"
  isPrerelease: Boolean!
  "Identifies the title of the release."
  name: String
  "Identifies the date and time when the release was created."
  publishedAt: Github_DateTime
  "List of releases assets which are dependent on this release."
  releaseAssets(
    #Returns the elements in the list that come after the specified cursor.
    after: String,
    #Returns the elements in the list that come before the specified cursor.
    before: String,
    #Returns the first _n_ elements from the list.
    first: Int,
    #Returns the last _n_ elements from the list.
    last: Int,
    #A list of names to filter the assets by.
    name: String
  ): Github_ReleaseAssetConnection!
  "The HTTP path for this issue"
  resourcePath: Github_URI!
  "The Git tag the release points to"
  tag: Github_Ref
  "Identifies the date and time when the object was last updated."
  updatedAt: Github_DateTime!
  "The HTTP URL for this issue"
  url: Github_URI!
}

"A release asset contains the content for a release asset."
type Github_ReleaseAsset implements Github_Node {
  "The asset's content-type"
  contentType: String!
  "Identifies the date and time when the object was created."
  createdAt: Github_DateTime!
  "The number of times this asset was downloaded"
  downloadCount: Int!
  "Identifies the URL where you can download the release asset via the browser."
  downloadUrl: Github_URI!
  id: ID!
  "Identifies the title of the release asset."
  name: String!
  "Release that the asset is associated with"
  release: Github_Release
  "The size (in bytes) of the asset"
  size: Int!
  "Identifies the date and time when the object was last updated."
  updatedAt: Github_DateTime!
  "The user that performed the upload"
  uploadedBy: Github_User!
  "Identifies the URL of the release asset."
  url: Github_URI!
}

"The connection type for ReleaseAsset."
type Github_ReleaseAssetConnection {
  "A list of edges."
  edges: [Github_ReleaseAssetEdge]
  "A list of nodes."
  nodes: [Github_ReleaseAsset]
  "Information to aid in pagination."
  pageInfo: Github_PageInfo!
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type Github_ReleaseAssetEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Github_ReleaseAsset
}

"The connection type for Release."
type Github_ReleaseConnection {
  "A list of edges."
  edges: [Github_ReleaseEdge]
  "A list of nodes."
  nodes: [Github_Release]
  "Information to aid in pagination."
  pageInfo: Github_PageInfo!
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type Github_ReleaseEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Github_Release
}

"Autogenerated return type of RemoveOutsideCollaborator"
type Github_RemoveOutsideCollaboratorPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  "The user that was removed as an outside collaborator."
  removedUser: Github_User!
}

"Autogenerated return type of RemoveReaction"
type Github_RemoveReactionPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  "The reaction object."
  reaction: Github_Reaction!
  "The reactable subject."
  subject: Github_Reactable!
}

"Autogenerated return type of RemoveStar"
type Github_RemoveStarPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  "The starrable."
  starrable: Github_Starrable!
}

"Represents a 'removed_from_project' event on a given issue or pull request."
type Github_RemovedFromProjectEvent implements Github_Node {
  "Identifies the actor who performed the event."
  actor: Github_Actor
  "Identifies the date and time when the object was created."
  createdAt: Github_DateTime!
  "Identifies the primary key from the database."
  databaseId: Int
  id: ID!
}

"Represents a 'renamed' event on a given issue or pull request"
type Github_RenamedTitleEvent implements Github_Node {
  "Identifies the actor who performed the event."
  actor: Github_Actor
  "Identifies the date and time when the object was created."
  createdAt: Github_DateTime!
  "Identifies the current title of the issue or pull request."
  currentTitle: String!
  id: ID!
  "Identifies the previous title of the issue or pull request."
  previousTitle: String!
  "Subject that was renamed."
  subject: Github_RenamedTitleSubject!
}

"Represents a 'reopened' event on any `Closable`."
type Github_ReopenedEvent implements Github_Node {
  "Identifies the actor who performed the event."
  actor: Github_Actor
  "Object that was reopened."
  closable: Github_Closable!
  "Identifies the date and time when the object was created."
  createdAt: Github_DateTime!
  id: ID!
}

"A repository contains the content for a project."
type Github_Repository implements Github_Node & Github_ProjectOwner & Github_RegistryPackageOwner & Github_RepositoryInfo & Github_Starrable & Github_Subscribable & Github_UniformResourceLocatable {
  "A list of users that can be assigned to issues in this repository."
  assignableUsers(
    #Returns the elements in the list that come after the specified cursor.
    after: String,
    #Returns the elements in the list that come before the specified cursor.
    before: String,
    #Returns the first _n_ elements from the list.
    first: Int,
    #Returns the last _n_ elements from the list.
    last: Int
  ): Github_UserConnection!
  "Returns the code of conduct for this repository"
  codeOfConduct: Github_CodeOfConduct
  "A list of collaborators associated with the repository."
  collaborators(
    #Collaborators affiliation level with a repository.
    affiliation: Github_CollaboratorAffiliation,
    #Returns the elements in the list that come after the specified cursor.
    after: String,
    #Returns the elements in the list that come before the specified cursor.
    before: String,
    #Returns the first _n_ elements from the list.
    first: Int,
    #Returns the last _n_ elements from the list.
    last: Int
  ): Github_RepositoryCollaboratorConnection
  "A list of commit comments associated with the repository."
  commitComments(
    #Returns the elements in the list that come after the specified cursor.
    after: String,
    #Returns the elements in the list that come before the specified cursor.
    before: String,
    #Returns the first _n_ elements from the list.
    first: Int,
    #Returns the last _n_ elements from the list.
    last: Int
  ): Github_CommitCommentConnection!
  "Identifies the date and time when the object was created."
  createdAt: Github_DateTime!
  "Identifies the primary key from the database."
  databaseId: Int
  "The Ref associated with the repository's default branch."
  defaultBranchRef: Github_Ref
  "A list of deploy keys that are on this repository."
  deployKeys(
    #Returns the elements in the list that come after the specified cursor.
    after: String,
    #Returns the elements in the list that come before the specified cursor.
    before: String,
    #Returns the first _n_ elements from the list.
    first: Int,
    #Returns the last _n_ elements from the list.
    last: Int
  ): Github_DeployKeyConnection!
  "Deployments associated with the repository"
  deployments(
    #Returns the elements in the list that come after the specified cursor.
    after: String,
    #Returns the elements in the list that come before the specified cursor.
    before: String,
    #Environments to list deployments for
    environments: [String!],
    #Returns the first _n_ elements from the list.
    first: Int,
    #Returns the last _n_ elements from the list.
    last: Int
  ): Github_DeploymentConnection!
  "The description of the repository."
  description: String
  "The description of the repository rendered to HTML."
  descriptionHTML: Github_HTML!
  "The number of kilobytes this repository occupies on disk."
  diskUsage: Int
  "Returns how many forks there are of this repository in the whole network."
  forkCount: Int!
  "A list of direct forked repositories."
  forks(
    #Affiliation options for repositories returned from the connection
    affiliations: [Github_RepositoryAffiliation],
    #Returns the elements in the list that come after the specified cursor.
    after: String,
    #Returns the elements in the list that come before the specified cursor.
    before: String,
    #Returns the first _n_ elements from the list.
    first: Int,
    #If non-null, filters repositories according to whether they have been locked
    isLocked: Boolean,
    #Returns the last _n_ elements from the list.
    last: Int,
    #Ordering options for repositories returned from the connection
    orderBy: Github_RepositoryOrder,
    #If non-null, filters repositories according to privacy
    privacy: Github_RepositoryPrivacy
  ): Github_RepositoryConnection!
  "Indicates if the repository has issues feature enabled."
  hasIssuesEnabled: Boolean!
  "Indicates if the repository has wiki feature enabled."
  hasWikiEnabled: Boolean!
  "The repository's URL."
  homepageUrl: Github_URI
  id: ID!
  "Indicates if the repository is unmaintained."
  isArchived: Boolean!
  "Identifies if the repository is a fork."
  isFork: Boolean!
  "Indicates if the repository has been locked or not."
  isLocked: Boolean!
  "Identifies if the repository is a mirror."
  isMirror: Boolean!
  "Identifies if the repository is private."
  isPrivate: Boolean!
  "Returns a single issue from the current repository by number."
  issue(
    #The number for the issue to be returned.
    number: Int!
  ): Github_Issue
  "Returns a single issue-like object from the current repository by number."
  issueOrPullRequest(
    #The number for the issue to be returned.
    number: Int!
  ): Github_IssueOrPullRequest
  "A list of issues that have been opened in the repository."
  issues(
    #Returns the elements in the list that come after the specified cursor.
    after: String,
    #Returns the elements in the list that come before the specified cursor.
    before: String,
    #Returns the first _n_ elements from the list.
    first: Int,
    #A list of label names to filter the pull requests by.
    labels: [String!],
    #Returns the last _n_ elements from the list.
    last: Int,
    #Ordering options for issues returned from the connection.
    orderBy: Github_IssueOrder,
    #A list of states to filter the issues by.
    states: [Github_IssueState!]
  ): Github_IssueConnection!
  "Returns a single label by name"
  label(
    #Label name
    name: String!
  ): Github_Label
  "A list of labels associated with the repository."
  labels(
    #Returns the elements in the list that come after the specified cursor.
    after: String,
    #Returns the elements in the list that come before the specified cursor.
    before: String,
    #Returns the first _n_ elements from the list.
    first: Int,
    #Returns the last _n_ elements from the list.
    last: Int,
    #If provided, searches labels by name and description.
    query: String
  ): Github_LabelConnection
  "A list containing a breakdown of the language composition of the repository."
  languages(
    #Returns the elements in the list that come after the specified cursor.
    after: String,
    #Returns the elements in the list that come before the specified cursor.
    before: String,
    #Returns the first _n_ elements from the list.
    first: Int,
    #Returns the last _n_ elements from the list.
    last: Int,
    #Order for connection
    orderBy: Github_LanguageOrder
  ): Github_LanguageConnection
  "The license associated with the repository"
  licenseInfo: Github_License
  "The reason the repository has been locked."
  lockReason: Github_RepositoryLockReason
  "A list of Users that can be mentioned in the context of the repository."
  mentionableUsers(
    #Returns the elements in the list that come after the specified cursor.
    after: String,
    #Returns the elements in the list that come before the specified cursor.
    before: String,
    #Returns the first _n_ elements from the list.
    first: Int,
    #Returns the last _n_ elements from the list.
    last: Int
  ): Github_UserConnection!
  "Whether or not PRs are merged with a merge commit on this repository."
  mergeCommitAllowed: Boolean!
  "Returns a single milestone from the current repository by number."
  milestone(
    #The number for the milestone to be returned.
    number: Int!
  ): Github_Milestone
  "A list of milestones associated with the repository."
  milestones(
    #Returns the elements in the list that come after the specified cursor.
    after: String,
    #Returns the elements in the list that come before the specified cursor.
    before: String,
    #Returns the first _n_ elements from the list.
    first: Int,
    #Returns the last _n_ elements from the list.
    last: Int,
    #Ordering options for milestones.
    orderBy: Github_MilestoneOrder,
    #Filter by the state of the milestones.
    states: [Github_MilestoneState!]
  ): Github_MilestoneConnection
  "The repository's original mirror URL."
  mirrorUrl: Github_URI
  "The name of the repository."
  name: String!
  "The repository's name with owner."
  nameWithOwner: String!
  "A Git object in the repository"
  object(
    #A Git revision expression suitable for rev-parse
    expression: String,
    #The Git object ID
    oid: Github_GitObjectID
  ): Github_GitObject
  "The User owner of the repository."
  owner: Github_RepositoryOwner!
  "The repository parent, if this is a fork."
  parent: Github_Repository
  "The primary language of the repository's code."
  primaryLanguage: Github_Language
  "Find project by number."
  project(
    #The project number to find.
    number: Int!
  ): Github_Project
  "A list of projects under the owner."
  projects(
    #Returns the elements in the list that come after the specified cursor.
    after: String,
    #Returns the elements in the list that come before the specified cursor.
    before: String,
    #Returns the first _n_ elements from the list.
    first: Int,
    #Returns the last _n_ elements from the list.
    last: Int,
    #Ordering options for projects returned from the connection
    orderBy: Github_ProjectOrder,
    #Query to search projects by, currently only searching by name.
    search: String,
    #A list of states to filter the projects by.
    states: [Github_ProjectState!]
  ): Github_ProjectConnection!
  "The HTTP path listing repository's projects"
  projectsResourcePath: Github_URI!
  "The HTTP URL listing repository's projects"
  projectsUrl: Github_URI!
  "A list of protected branches that are on this repository."
  protectedBranches(
    #Returns the elements in the list that come after the specified cursor.
    after: String,
    #Returns the elements in the list that come before the specified cursor.
    before: String,
    #Returns the first _n_ elements from the list.
    first: Int,
    #Returns the last _n_ elements from the list.
    last: Int
  ): Github_ProtectedBranchConnection!
  "Returns a single pull request from the current repository by number."
  pullRequest(
    #The number for the pull request to be returned.
    number: Int!
  ): Github_PullRequest
  "A list of pull requests that have been opened in the repository."
  pullRequests(
    #Returns the elements in the list that come after the specified cursor.
    after: String,
    #The base ref name to filter the pull requests by.
    baseRefName: String,
    #Returns the elements in the list that come before the specified cursor.
    before: String,
    #Returns the first _n_ elements from the list.
    first: Int,
    #The head ref name to filter the pull requests by.
    headRefName: String,
    #A list of label names to filter the pull requests by.
    labels: [String!],
    #Returns the last _n_ elements from the list.
    last: Int,
    #Ordering options for pull requests returned from the connection.
    orderBy: Github_IssueOrder,
    #A list of states to filter the pull requests by.
    states: [Github_PullRequestState!]
  ): Github_PullRequestConnection!
  "Identifies when the repository was last pushed to."
  pushedAt: Github_DateTime
  "Whether or not rebase-merging is enabled on this repository."
  rebaseMergeAllowed: Boolean!
  "Fetch a given ref from the repository"
  ref(
    """

    The ref to retrieve. Fully qualified matches are checked in order
    (`refs/heads/master`) before falling back onto checks for short name matches (`master`).
    """
    qualifiedName: String!
  ): Github_Ref
  "Fetch a list of refs from the repository"
  refs(
    #Returns the elements in the list that come after the specified cursor.
    after: String,
    #Returns the elements in the list that come before the specified cursor.
    before: String,
    #DEPRECATED: use orderBy. The ordering direction.
    direction: Github_OrderDirection,
    #Returns the first _n_ elements from the list.
    first: Int,
    #Returns the last _n_ elements from the list.
    last: Int,
    #Ordering options for refs returned from the connection.
    orderBy: Github_RefOrder,
    #A ref name prefix like `refs/heads/`, `refs/tags/`, etc.
    refPrefix: String!
  ): Github_RefConnection
  "Lookup a single release given various criteria."
  release(
    #The name of the Tag the Release was created from
    tagName: String!
  ): Github_Release
  "List of releases which are dependent on this repository."
  releases(
    #Returns the elements in the list that come after the specified cursor.
    after: String,
    #Returns the elements in the list that come before the specified cursor.
    before: String,
    #Returns the first _n_ elements from the list.
    first: Int,
    #Returns the last _n_ elements from the list.
    last: Int,
    #Order for connection
    orderBy: Github_ReleaseOrder
  ): Github_ReleaseConnection!
  "A list of applied repository-topic associations for this repository."
  repositoryTopics(
    #Returns the elements in the list that come after the specified cursor.
    after: String,
    #Returns the elements in the list that come before the specified cursor.
    before: String,
    #Returns the first _n_ elements from the list.
    first: Int,
    #Returns the last _n_ elements from the list.
    last: Int
  ): Github_RepositoryTopicConnection!
  "The HTTP path for this repository"
  resourcePath: Github_URI!
  "A description of the repository, rendered to HTML without any links in it."
  shortDescriptionHTML(
    #How many characters to return.
    limit: Int = 200
  ): Github_HTML!
  "Whether or not squash-merging is enabled on this repository."
  squashMergeAllowed: Boolean!
  "The SSH URL to clone this repository"
  sshUrl: Github_GitSSHRemote!
  "A list of users who have starred this starrable."
  stargazers(
    #Returns the elements in the list that come after the specified cursor.
    after: String,
    #Returns the elements in the list that come before the specified cursor.
    before: String,
    #Returns the first _n_ elements from the list.
    first: Int,
    #Returns the last _n_ elements from the list.
    last: Int,
    #Order for connection
    orderBy: Github_StarOrder
  ): Github_StargazerConnection!
  "Identifies the date and time when the object was last updated."
  updatedAt: Github_DateTime!
  "The HTTP URL for this repository"
  url: Github_URI!
  "Indicates whether the viewer has admin permissions on this repository."
  viewerCanAdminister: Boolean!
  "Can the current viewer create new projects on this owner."
  viewerCanCreateProjects: Boolean!
  "Check if the viewer is able to change their subscription status for the repository."
  viewerCanSubscribe: Boolean!
  "Indicates whether the viewer can update the topics of this repository."
  viewerCanUpdateTopics: Boolean!
  "Returns a boolean indicating whether the viewing user has starred this starrable."
  viewerHasStarred: Boolean!
  "The users permission level on the repository. Will return null if authenticated as an GitHub App."
  viewerPermission: Github_RepositoryPermission
  "Identifies if the viewer is watching, not watching, or ignoring the subscribable entity."
  viewerSubscription: Github_SubscriptionState
  "A list of users watching the repository."
  watchers(
    #Returns the elements in the list that come after the specified cursor.
    after: String,
    #Returns the elements in the list that come before the specified cursor.
    before: String,
    #Returns the first _n_ elements from the list.
    first: Int,
    #Returns the last _n_ elements from the list.
    last: Int
  ): Github_UserConnection!
}

"The connection type for User."
type Github_RepositoryCollaboratorConnection {
  "A list of edges."
  edges: [Github_RepositoryCollaboratorEdge]
  "A list of nodes."
  nodes: [Github_User]
  "Information to aid in pagination."
  pageInfo: Github_PageInfo!
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"Represents a user who is a collaborator of a repository."
type Github_RepositoryCollaboratorEdge {
  "A cursor for use in pagination."
  cursor: String!
  node: Github_User!
  "The permission the user has on the repository."
  permission: Github_RepositoryPermission!
}

"A list of repositories owned by the subject."
type Github_RepositoryConnection {
  "A list of edges."
  edges: [Github_RepositoryEdge]
  "A list of nodes."
  nodes: [Github_Repository]
  "Information to aid in pagination."
  pageInfo: Github_PageInfo!
  "Identifies the total count of items in the connection."
  totalCount: Int!
  "The total size in kilobytes of all repositories in the connection."
  totalDiskUsage: Int!
}

"An edge in a connection."
type Github_RepositoryEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Github_Repository
}

"An invitation for a user to be added to a repository."
type Github_RepositoryInvitation implements Github_Node {
  id: ID!
  "The user who received the invitation."
  invitee: Github_User!
  "The user who created the invitation."
  inviter: Github_User!
  "The permission granted on this repository by this invitation."
  permission: Github_RepositoryPermission!
  "The Repository the user is invited to."
  repository: Github_RepositoryInfo
}

"An edge in a connection."
type Github_RepositoryInvitationEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Github_RepositoryInvitation
}

"A repository-topic connects a repository to a topic."
type Github_RepositoryTopic implements Github_Node & Github_UniformResourceLocatable {
  id: ID!
  "The HTTP path for this repository-topic."
  resourcePath: Github_URI!
  "The topic."
  topic: Github_Topic!
  "The HTTP URL for this repository-topic."
  url: Github_URI!
}

"The connection type for RepositoryTopic."
type Github_RepositoryTopicConnection {
  "A list of edges."
  edges: [Github_RepositoryTopicEdge]
  "A list of nodes."
  nodes: [Github_RepositoryTopic]
  "Information to aid in pagination."
  pageInfo: Github_PageInfo!
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type Github_RepositoryTopicEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Github_RepositoryTopic
}

"Autogenerated return type of RequestReviews"
type Github_RequestReviewsPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  "The pull request that is getting requests."
  pullRequest: Github_PullRequest!
  "The edge from the pull request to the requested reviewers."
  requestedReviewersEdge: Github_UserEdge!
}

"A team or user who has the ability to dismiss a review on a protected branch."
type Github_ReviewDismissalAllowance implements Github_Node {
  "The actor that can dismiss."
  actor: Github_ReviewDismissalAllowanceActor
  id: ID!
  "Identifies the protected branch associated with the allowed user or team."
  protectedBranch: Github_ProtectedBranch!
}

"The connection type for ReviewDismissalAllowance."
type Github_ReviewDismissalAllowanceConnection {
  "A list of edges."
  edges: [Github_ReviewDismissalAllowanceEdge]
  "A list of nodes."
  nodes: [Github_ReviewDismissalAllowance]
  "Information to aid in pagination."
  pageInfo: Github_PageInfo!
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type Github_ReviewDismissalAllowanceEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Github_ReviewDismissalAllowance
}

"Represents a 'review_dismissed' event on a given issue or pull request."
type Github_ReviewDismissedEvent implements Github_Node & Github_UniformResourceLocatable {
  "Identifies the actor who performed the event."
  actor: Github_Actor
  "Identifies the date and time when the object was created."
  createdAt: Github_DateTime!
  "Identifies the primary key from the database."
  databaseId: Int
  id: ID!
  "Identifies the message associated with the 'review_dismissed' event."
  message: String!
  "The message associated with the event, rendered to HTML."
  messageHtml: Github_HTML!
  "Identifies the previous state of the review with the 'review_dismissed' event."
  previousReviewState: Github_PullRequestReviewState!
  "PullRequest referenced by event."
  pullRequest: Github_PullRequest!
  "Identifies the commit which caused the review to become stale."
  pullRequestCommit: Github_PullRequestCommit
  "The HTTP path for this review dismissed event."
  resourcePath: Github_URI!
  "Identifies the review associated with the 'review_dismissed' event."
  review: Github_PullRequestReview
  "The HTTP URL for this review dismissed event."
  url: Github_URI!
}

"A request for a user to review a pull request."
type Github_ReviewRequest implements Github_Node {
  "Identifies the primary key from the database."
  databaseId: Int
  id: ID!
  "Identifies the pull request associated with this review request."
  pullRequest: Github_PullRequest!
  "The reviewer that is requested."
  requestedReviewer: Github_RequestedReviewer
}

"The connection type for ReviewRequest."
type Github_ReviewRequestConnection {
  "A list of edges."
  edges: [Github_ReviewRequestEdge]
  "A list of nodes."
  nodes: [Github_ReviewRequest]
  "Information to aid in pagination."
  pageInfo: Github_PageInfo!
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type Github_ReviewRequestEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Github_ReviewRequest
}

"Represents an 'review_request_removed' event on a given pull request."
type Github_ReviewRequestRemovedEvent implements Github_Node {
  "Identifies the actor who performed the event."
  actor: Github_Actor
  "Identifies the date and time when the object was created."
  createdAt: Github_DateTime!
  id: ID!
  "PullRequest referenced by event."
  pullRequest: Github_PullRequest!
  "Identifies the reviewer whose review request was removed."
  requestedReviewer: Github_RequestedReviewer
}

"Represents an 'review_requested' event on a given pull request."
type Github_ReviewRequestedEvent implements Github_Node {
  "Identifies the actor who performed the event."
  actor: Github_Actor
  "Identifies the date and time when the object was created."
  createdAt: Github_DateTime!
  id: ID!
  "PullRequest referenced by event."
  pullRequest: Github_PullRequest!
  "Identifies the reviewer whose review was requested."
  requestedReviewer: Github_RequestedReviewer
}

"A list of results that matched against a search query."
type Github_SearchResultItemConnection {
  "The number of pieces of code that matched the search query."
  codeCount: Int!
  "A list of edges."
  edges: [Github_SearchResultItemEdge]
  "The number of issues that matched the search query."
  issueCount: Int!
  "A list of nodes."
  nodes: [Github_SearchResultItem]
  "Information to aid in pagination."
  pageInfo: Github_PageInfo!
  "The number of repositories that matched the search query."
  repositoryCount: Int!
  "The number of users that matched the search query."
  userCount: Int!
  "The number of wiki pages that matched the search query."
  wikiCount: Int!
}

"An edge in a connection."
type Github_SearchResultItemEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Github_SearchResultItem
  "Text matches on the result found."
  textMatches: [Github_TextMatch]
}

"Represents an S/MIME signature on a Commit or Tag."
type Github_SmimeSignature implements Github_GitSignature {
  "Email used to sign this object."
  email: String!
  "True if the signature is valid and verified by GitHub."
  isValid: Boolean!
  "Payload for GPG signing object. Raw ODB object without the signature header."
  payload: String!
  "ASCII-armored signature header from object."
  signature: String!
  "GitHub user corresponding to the email signing this commit."
  signer: Github_User
  """
  The state of this signature. `VALID` if signature is valid and verified by
  GitHub, otherwise represents reason why signature is considered invalid.
  """
  state: Github_GitSignatureState!
  "True if the signature was made with GitHub's signing key."
  wasSignedByGitHub: Boolean!
}

"The connection type for User."
type Github_StargazerConnection {
  "A list of edges."
  edges: [Github_StargazerEdge]
  "A list of nodes."
  nodes: [Github_User]
  "Information to aid in pagination."
  pageInfo: Github_PageInfo!
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"Represents a user that's starred a repository."
type Github_StargazerEdge {
  "A cursor for use in pagination."
  cursor: String!
  node: Github_User!
  "Identifies when the item was starred."
  starredAt: Github_DateTime!
}

"The connection type for Repository."
type Github_StarredRepositoryConnection {
  "A list of edges."
  edges: [Github_StarredRepositoryEdge]
  "A list of nodes."
  nodes: [Github_Repository]
  "Information to aid in pagination."
  pageInfo: Github_PageInfo!
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"Represents a starred repository."
type Github_StarredRepositoryEdge {
  "A cursor for use in pagination."
  cursor: String!
  node: Github_Repository!
  "Identifies when the item was starred."
  starredAt: Github_DateTime!
}

"Represents a commit status."
type Github_Status implements Github_Node {
  "The commit this status is attached to."
  commit: Github_Commit
  "Looks up an individual status context by context name."
  context(
    #The context name.
    name: String!
  ): Github_StatusContext
  "The individual status contexts for this commit."
  contexts: [Github_StatusContext!]!
  id: ID!
  "The combined commit status."
  state: Github_StatusState!
}

"Represents an individual commit status context"
type Github_StatusContext implements Github_Node {
  "This commit this status context is attached to."
  commit: Github_Commit
  "The name of this status context."
  context: String!
  "Identifies the date and time when the object was created."
  createdAt: Github_DateTime!
  "The actor who created this status context."
  creator: Github_Actor
  "The description for this status context."
  description: String
  id: ID!
  "The state of this status context."
  state: Github_StatusState!
  "The URL for this status context."
  targetUrl: Github_URI
}

"Autogenerated return type of SubmitPullRequestReview"
type Github_SubmitPullRequestReviewPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  "The submitted pull request review."
  pullRequestReview: Github_PullRequestReview!
}

"Represents a 'subscribed' event on a given `Subscribable`."
type Github_SubscribedEvent implements Github_Node {
  "Identifies the actor who performed the event."
  actor: Github_Actor
  "Identifies the date and time when the object was created."
  createdAt: Github_DateTime!
  id: ID!
  "Object referenced by event."
  subscribable: Github_Subscribable!
}

"A suggestion to review a pull request based on a user's commit history and review comments."
type Github_SuggestedReviewer {
  "Is this suggestion based on past commits?"
  isAuthor: Boolean!
  "Is this suggestion based on past review comments?"
  isCommenter: Boolean!
  "Identifies the user suggested to review the pull request."
  reviewer: Github_User!
}

"Represents a Git tag."
type Github_Tag implements Github_GitObject & Github_Node {
  "An abbreviated version of the Git object ID"
  abbreviatedOid: String!
  "The HTTP path for this Git object"
  commitResourcePath: Github_URI!
  "The HTTP URL for this Git object"
  commitUrl: Github_URI!
  id: ID!
  "The Git tag message."
  message: String
  "The Git tag name."
  name: String!
  "The Git object ID"
  oid: Github_GitObjectID!
  "The Repository the Git object belongs to"
  repository: Github_Repository!
  "Details about the tag author."
  tagger: Github_GitActor
  "The Git object the tag points to."
  target: Github_GitObject!
}

"A team of users in an organization."
type Github_Team implements Github_Node & Github_Subscribable {
  "A list of teams that are ancestors of this team."
  ancestors(
    #Returns the elements in the list that come after the specified cursor.
    after: String,
    #Returns the elements in the list that come before the specified cursor.
    before: String,
    #Returns the first _n_ elements from the list.
    first: Int,
    #Returns the last _n_ elements from the list.
    last: Int
  ): Github_TeamConnection!
  "A URL pointing to the team's avatar."
  avatarUrl(
    #The size in pixels of the resulting square image.
    size: Int = 400
  ): Github_URI
  "List of child teams belonging to this team"
  childTeams(
    #Returns the elements in the list that come after the specified cursor.
    after: String,
    #Returns the elements in the list that come before the specified cursor.
    before: String,
    #Returns the first _n_ elements from the list.
    first: Int,
    #Whether to list immediate child teams or all descendant child teams.
    immediateOnly: Boolean = true,
    #Returns the last _n_ elements from the list.
    last: Int,
    #Order for connection
    orderBy: Github_TeamOrder,
    #User logins to filter by
    userLogins: [String!]
  ): Github_TeamConnection!
  "The slug corresponding to the organization and team."
  combinedSlug: String!
  "Identifies the date and time when the object was created."
  createdAt: Github_DateTime!
  "The description of the team."
  description: String
  "The HTTP path for editing this team"
  editTeamResourcePath: Github_URI!
  "The HTTP URL for editing this team"
  editTeamUrl: Github_URI!
  id: ID!
  "A list of pending invitations for users to this team"
  invitations(
    #Returns the elements in the list that come after the specified cursor.
    after: String,
    #Returns the elements in the list that come before the specified cursor.
    before: String,
    #Returns the first _n_ elements from the list.
    first: Int,
    #Returns the last _n_ elements from the list.
    last: Int
  ): Github_OrganizationInvitationConnection
  "A list of users who are members of this team."
  members(
    #Returns the elements in the list that come after the specified cursor.
    after: String,
    #Returns the elements in the list that come before the specified cursor.
    before: String,
    #Returns the first _n_ elements from the list.
    first: Int,
    #Returns the last _n_ elements from the list.
    last: Int,
    #Filter by membership type
    membership: Github_TeamMembershipType = ALL,
    #Order for the connection.
    orderBy: Github_TeamMemberOrder,
    #The search string to look for.
    query: String,
    #Filter by team member role
    role: Github_TeamMemberRole
  ): Github_TeamMemberConnection!
  "The HTTP path for the team' members"
  membersResourcePath: Github_URI!
  "The HTTP URL for the team' members"
  membersUrl: Github_URI!
  "The name of the team."
  name: String!
  "The HTTP path creating a new team"
  newTeamResourcePath: Github_URI!
  "The HTTP URL creating a new team"
  newTeamUrl: Github_URI!
  "The organization that owns this team."
  organization: Github_Organization!
  "The parent team of the team."
  parentTeam: Github_Team
  "The level of privacy the team has."
  privacy: Github_TeamPrivacy!
  "A list of repositories this team has access to."
  repositories(
    #Returns the elements in the list that come after the specified cursor.
    after: String,
    #Returns the elements in the list that come before the specified cursor.
    before: String,
    #Returns the first _n_ elements from the list.
    first: Int,
    #Returns the last _n_ elements from the list.
    last: Int,
    #Order for the connection.
    orderBy: Github_TeamRepositoryOrder,
    #The search string to look for.
    query: String
  ): Github_TeamRepositoryConnection!
  "The HTTP path for this team's repositories"
  repositoriesResourcePath: Github_URI!
  "The HTTP URL for this team's repositories"
  repositoriesUrl: Github_URI!
  "The HTTP path for this team"
  resourcePath: Github_URI!
  "The slug corresponding to the team."
  slug: String!
  "The HTTP path for this team's teams"
  teamsResourcePath: Github_URI!
  "The HTTP URL for this team's teams"
  teamsUrl: Github_URI!
  "Identifies the date and time when the object was last updated."
  updatedAt: Github_DateTime!
  "The HTTP URL for this team"
  url: Github_URI!
  "Team is adminable by the viewer."
  viewerCanAdminister: Boolean!
  "Check if the viewer is able to change their subscription status for the repository."
  viewerCanSubscribe: Boolean!
  "Identifies if the viewer is watching, not watching, or ignoring the subscribable entity."
  viewerSubscription: Github_SubscriptionState
}

"The connection type for Team."
type Github_TeamConnection {
  "A list of edges."
  edges: [Github_TeamEdge]
  "A list of nodes."
  nodes: [Github_Team]
  "Information to aid in pagination."
  pageInfo: Github_PageInfo!
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type Github_TeamEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Github_Team
}

"The connection type for User."
type Github_TeamMemberConnection {
  "A list of edges."
  edges: [Github_TeamMemberEdge]
  "A list of nodes."
  nodes: [Github_User]
  "Information to aid in pagination."
  pageInfo: Github_PageInfo!
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"Represents a user who is a member of a team."
type Github_TeamMemberEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The HTTP path to the organization's member access page."
  memberAccessResourcePath: Github_URI!
  "The HTTP URL to the organization's member access page."
  memberAccessUrl: Github_URI!
  node: Github_User!
  "The role the member has on the team."
  role: Github_TeamMemberRole!
}

"The connection type for Repository."
type Github_TeamRepositoryConnection {
  "A list of edges."
  edges: [Github_TeamRepositoryEdge]
  "A list of nodes."
  nodes: [Github_Repository]
  "Information to aid in pagination."
  pageInfo: Github_PageInfo!
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"Represents a team repository."
type Github_TeamRepositoryEdge {
  "A cursor for use in pagination."
  cursor: String!
  node: Github_Repository!
  "The permission level the team has on the repository"
  permission: Github_RepositoryPermission!
}

"A text match within a search result."
type Github_TextMatch {
  "The specific text fragment within the property matched on."
  fragment: String!
  "Highlights within the matched fragment."
  highlights: [Github_TextMatchHighlight!]!
  "The property matched on."
  property: String!
}

"Represents a single highlight in a search result match."
type Github_TextMatchHighlight {
  "The indice in the fragment where the matched text begins."
  beginIndice: Int!
  "The indice in the fragment where the matched text ends."
  endIndice: Int!
  "The text matched."
  text: String!
}

"A topic aggregates entities that are related to a subject."
type Github_Topic implements Github_Node {
  id: ID!
  "The topic's name."
  name: String!
  """
  A list of related topics, including aliases of this topic, sorted with the most relevant
  first.
  """
  relatedTopics: [Github_Topic!]!
}

"The connection type for Topic."
type Github_TopicConnection {
  "A list of edges."
  edges: [Github_TopicEdge]
  "A list of nodes."
  nodes: [Github_Topic]
  "Information to aid in pagination."
  pageInfo: Github_PageInfo!
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type Github_TopicEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Github_Topic
}

"Represents a Git tree."
type Github_Tree implements Github_GitObject & Github_Node {
  "An abbreviated version of the Git object ID"
  abbreviatedOid: String!
  "The HTTP path for this Git object"
  commitResourcePath: Github_URI!
  "The HTTP URL for this Git object"
  commitUrl: Github_URI!
  "A list of tree entries."
  entries: [Github_TreeEntry!]
  id: ID!
  "The Git object ID"
  oid: Github_GitObjectID!
  "The Repository the Git object belongs to"
  repository: Github_Repository!
}

"Represents a Git tree entry."
type Github_TreeEntry {
  "Entry file mode."
  mode: Int!
  "Entry file name."
  name: String!
  "Entry file object."
  object: Github_GitObject
  "Entry file Git object ID."
  oid: Github_GitObjectID!
  "The Repository the tree entry belongs to"
  repository: Github_Repository!
  "Entry file type."
  type: String!
}

"Represents an 'unassigned' event on any assignable object."
type Github_UnassignedEvent implements Github_Node {
  "Identifies the actor who performed the event."
  actor: Github_Actor
  "Identifies the assignable associated with the event."
  assignable: Github_Assignable!
  "Identifies the date and time when the object was created."
  createdAt: Github_DateTime!
  id: ID!
  "Identifies the subject (user) who was unassigned."
  user: Github_User
}

"Represents an unknown signature on a Commit or Tag."
type Github_UnknownSignature implements Github_GitSignature {
  "Email used to sign this object."
  email: String!
  "True if the signature is valid and verified by GitHub."
  isValid: Boolean!
  "Payload for GPG signing object. Raw ODB object without the signature header."
  payload: String!
  "ASCII-armored signature header from object."
  signature: String!
  "GitHub user corresponding to the email signing this commit."
  signer: Github_User
  """
  The state of this signature. `VALID` if signature is valid and verified by
  GitHub, otherwise represents reason why signature is considered invalid.
  """
  state: Github_GitSignatureState!
  "True if the signature was made with GitHub's signing key."
  wasSignedByGitHub: Boolean!
}

"Represents an 'unlabeled' event on a given issue or pull request."
type Github_UnlabeledEvent implements Github_Node {
  "Identifies the actor who performed the event."
  actor: Github_Actor
  "Identifies the date and time when the object was created."
  createdAt: Github_DateTime!
  id: ID!
  "Identifies the label associated with the 'unlabeled' event."
  label: Github_Label!
  "Identifies the `Labelable` associated with the event."
  labelable: Github_Labelable!
}

"Autogenerated return type of UnlockLockable"
type Github_UnlockLockablePayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  "The item that was unlocked."
  unlockedRecord: Github_Lockable
}

"Represents an 'unlocked' event on a given issue or pull request."
type Github_UnlockedEvent implements Github_Node {
  "Identifies the actor who performed the event."
  actor: Github_Actor
  "Identifies the date and time when the object was created."
  createdAt: Github_DateTime!
  id: ID!
  "Object that was unlocked."
  lockable: Github_Lockable!
}

"Represents an 'unsubscribed' event on a given `Subscribable`."
type Github_UnsubscribedEvent implements Github_Node {
  "Identifies the actor who performed the event."
  actor: Github_Actor
  "Identifies the date and time when the object was created."
  createdAt: Github_DateTime!
  id: ID!
  "Object referenced by event."
  subscribable: Github_Subscribable!
}

"Autogenerated return type of UpdateProjectCard"
type Github_UpdateProjectCardPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  "The updated ProjectCard."
  projectCard: Github_ProjectCard!
}

"Autogenerated return type of UpdateProjectColumn"
type Github_UpdateProjectColumnPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  "The updated project column."
  projectColumn: Github_ProjectColumn!
}

"Autogenerated return type of UpdateProject"
type Github_UpdateProjectPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  "The updated project."
  project: Github_Project!
}

"Autogenerated return type of UpdatePullRequestReviewComment"
type Github_UpdatePullRequestReviewCommentPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  "The updated comment."
  pullRequestReviewComment: Github_PullRequestReviewComment!
}

"Autogenerated return type of UpdatePullRequestReview"
type Github_UpdatePullRequestReviewPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  "The updated pull request review."
  pullRequestReview: Github_PullRequestReview!
}

"Autogenerated return type of UpdateSubscription"
type Github_UpdateSubscriptionPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  "The input subscribable entity."
  subscribable: Github_Subscribable!
}

"Autogenerated return type of UpdateTopics"
type Github_UpdateTopicsPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  "Names of the provided topics that are not valid."
  invalidTopicNames: [String!]
  "The updated repository."
  repository: Github_Repository!
}

"A user is an individual's account on GitHub that owns repositories and can make new content."
type Github_User implements Github_Actor & Github_Node & Github_RegistryPackageOwner & Github_RegistryPackageSearch & Github_RepositoryOwner & Github_UniformResourceLocatable {
  "A URL pointing to the user's public avatar."
  avatarUrl(
    #The size of the resulting square image.
    size: Int
  ): Github_URI!
  "The user's public profile bio."
  bio: String
  "The user's public profile bio as HTML."
  bioHTML: Github_HTML!
  "A list of commit comments made by this user."
  commitComments(
    #Returns the elements in the list that come after the specified cursor.
    after: String,
    #Returns the elements in the list that come before the specified cursor.
    before: String,
    #Returns the first _n_ elements from the list.
    first: Int,
    #Returns the last _n_ elements from the list.
    last: Int
  ): Github_CommitCommentConnection!
  "The user's public profile company."
  company: String
  "The user's public profile company as HTML."
  companyHTML: Github_HTML!
  "Identifies the date and time when the object was created."
  createdAt: Github_DateTime!
  "Identifies the primary key from the database."
  databaseId: Int
  "The user's publicly visible profile email."
  email: String!
  "A list of users the given user is followed by."
  followers(
    #Returns the elements in the list that come after the specified cursor.
    after: String,
    #Returns the elements in the list that come before the specified cursor.
    before: String,
    #Returns the first _n_ elements from the list.
    first: Int,
    #Returns the last _n_ elements from the list.
    last: Int
  ): Github_FollowerConnection!
  "A list of users the given user is following."
  following(
    #Returns the elements in the list that come after the specified cursor.
    after: String,
    #Returns the elements in the list that come before the specified cursor.
    before: String,
    #Returns the first _n_ elements from the list.
    first: Int,
    #Returns the last _n_ elements from the list.
    last: Int
  ): Github_FollowingConnection!
  "Find gist by repo name."
  gist(
    #The gist name to find.
    name: String!
  ): Github_Gist
  "A list of gist comments made by this user."
  gistComments(
    #Returns the elements in the list that come after the specified cursor.
    after: String,
    #Returns the elements in the list that come before the specified cursor.
    before: String,
    #Returns the first _n_ elements from the list.
    first: Int,
    #Returns the last _n_ elements from the list.
    last: Int
  ): Github_GistCommentConnection!
  "A list of the Gists the user has created."
  gists(
    #Returns the elements in the list that come after the specified cursor.
    after: String,
    #Returns the elements in the list that come before the specified cursor.
    before: String,
    #Returns the first _n_ elements from the list.
    first: Int,
    #Returns the last _n_ elements from the list.
    last: Int,
    #Ordering options for gists returned from the connection
    orderBy: Github_GistOrder,
    #Filters Gists according to privacy.
    privacy: Github_GistPrivacy
  ): Github_GistConnection!
  id: ID!
  "Whether or not this user is a participant in the GitHub Security Bug Bounty."
  isBountyHunter: Boolean!
  "Whether or not this user is a participant in the GitHub Campus Experts Program."
  isCampusExpert: Boolean!
  "Whether or not this user is a GitHub Developer Program member."
  isDeveloperProgramMember: Boolean!
  "Whether or not this user is a GitHub employee."
  isEmployee: Boolean!
  "Whether or not the user has marked themselves as for hire."
  isHireable: Boolean!
  "Whether or not this user is a site administrator."
  isSiteAdmin: Boolean!
  "Whether or not this user is the viewing user."
  isViewer: Boolean!
  "A list of issue comments made by this user."
  issueComments(
    #Returns the elements in the list that come after the specified cursor.
    after: String,
    #Returns the elements in the list that come before the specified cursor.
    before: String,
    #Returns the first _n_ elements from the list.
    first: Int,
    #Returns the last _n_ elements from the list.
    last: Int
  ): Github_IssueCommentConnection!
  "A list of issues associated with this user."
  issues(
    #Returns the elements in the list that come after the specified cursor.
    after: String,
    #Returns the elements in the list that come before the specified cursor.
    before: String,
    #Returns the first _n_ elements from the list.
    first: Int,
    #A list of label names to filter the pull requests by.
    labels: [String!],
    #Returns the last _n_ elements from the list.
    last: Int,
    #Ordering options for issues returned from the connection.
    orderBy: Github_IssueOrder,
    #A list of states to filter the issues by.
    states: [Github_IssueState!]
  ): Github_IssueConnection!
  "The user's public profile location."
  location: String
  "The username used to login."
  login: String!
  "The user's public profile name."
  name: String
  "Find an organization by its login that the user belongs to."
  organization(
    #The login of the organization to find.
    login: String!
  ): Github_Organization
  "A list of organizations the user belongs to."
  organizations(
    #Returns the elements in the list that come after the specified cursor.
    after: String,
    #Returns the elements in the list that come before the specified cursor.
    before: String,
    #Returns the first _n_ elements from the list.
    first: Int,
    #Returns the last _n_ elements from the list.
    last: Int
  ): Github_OrganizationConnection!
  "A list of repositories this user has pinned to their profile"
  pinnedRepositories(
    #Affiliation options for repositories returned from the connection
    affiliations: [Github_RepositoryAffiliation],
    #Returns the elements in the list that come after the specified cursor.
    after: String,
    #Returns the elements in the list that come before the specified cursor.
    before: String,
    #Returns the first _n_ elements from the list.
    first: Int,
    #If non-null, filters repositories according to whether they have been locked
    isLocked: Boolean,
    #Returns the last _n_ elements from the list.
    last: Int,
    #Ordering options for repositories returned from the connection
    orderBy: Github_RepositoryOrder,
    #If non-null, filters repositories according to privacy
    privacy: Github_RepositoryPrivacy
  ): Github_RepositoryConnection!
  "A list of public keys associated with this user."
  publicKeys(
    #Returns the elements in the list that come after the specified cursor.
    after: String,
    #Returns the elements in the list that come before the specified cursor.
    before: String,
    #Returns the first _n_ elements from the list.
    first: Int,
    #Returns the last _n_ elements from the list.
    last: Int
  ): Github_PublicKeyConnection!
  "A list of pull requests associated with this user."
  pullRequests(
    #Returns the elements in the list that come after the specified cursor.
    after: String,
    #The base ref name to filter the pull requests by.
    baseRefName: String,
    #Returns the elements in the list that come before the specified cursor.
    before: String,
    #Returns the first _n_ elements from the list.
    first: Int,
    #The head ref name to filter the pull requests by.
    headRefName: String,
    #A list of label names to filter the pull requests by.
    labels: [String!],
    #Returns the last _n_ elements from the list.
    last: Int,
    #Ordering options for pull requests returned from the connection.
    orderBy: Github_IssueOrder,
    #A list of states to filter the pull requests by.
    states: [Github_PullRequestState!]
  ): Github_PullRequestConnection!
  "A list of repositories that the user owns."
  repositories(
    #Affiliation options for repositories returned from the connection
    affiliations: [Github_RepositoryAffiliation],
    #Returns the elements in the list that come after the specified cursor.
    after: String,
    #Returns the elements in the list that come before the specified cursor.
    before: String,
    #Returns the first _n_ elements from the list.
    first: Int,
    #If non-null, filters repositories according to whether they are forks of another repository
    isFork: Boolean,
    #If non-null, filters repositories according to whether they have been locked
    isLocked: Boolean,
    #Returns the last _n_ elements from the list.
    last: Int,
    #Ordering options for repositories returned from the connection
    orderBy: Github_RepositoryOrder,
    #If non-null, filters repositories according to privacy
    privacy: Github_RepositoryPrivacy
  ): Github_RepositoryConnection!
  "A list of repositories that the user recently contributed to."
  repositoriesContributedTo(
    #Returns the elements in the list that come after the specified cursor.
    after: String,
    #Returns the elements in the list that come before the specified cursor.
    before: String,
    """

    If non-null, include only the specified types of contributions. The
    GitHub.com UI uses [COMMIT, ISSUE, PULL_REQUEST, REPOSITORY]
    """
    contributionTypes: [Github_RepositoryContributionType],
    #Returns the first _n_ elements from the list.
    first: Int,
    #If true, include user repositories
    includeUserRepositories: Boolean,
    #If non-null, filters repositories according to whether they have been locked
    isLocked: Boolean,
    #Returns the last _n_ elements from the list.
    last: Int,
    #Ordering options for repositories returned from the connection
    orderBy: Github_RepositoryOrder,
    #If non-null, filters repositories according to privacy
    privacy: Github_RepositoryPrivacy
  ): Github_RepositoryConnection!
  "Find Repository."
  repository(
    #Name of Repository to find.
    name: String!
  ): Github_Repository
  "The HTTP path for this user"
  resourcePath: Github_URI!
  "Repositories the user has starred."
  starredRepositories(
    #Returns the elements in the list that come after the specified cursor.
    after: String,
    #Returns the elements in the list that come before the specified cursor.
    before: String,
    #Returns the first _n_ elements from the list.
    first: Int,
    #Returns the last _n_ elements from the list.
    last: Int,
    #Order for connection
    orderBy: Github_StarOrder,
    #Filters starred repositories to only return repositories owned by the viewer.
    ownedByViewer: Boolean
  ): Github_StarredRepositoryConnection!
  "Identifies the date and time when the object was last updated."
  updatedAt: Github_DateTime!
  "The HTTP URL for this user"
  url: Github_URI!
  "Whether or not the viewer is able to follow the user."
  viewerCanFollow: Boolean!
  "Whether or not this user is followed by the viewer."
  viewerIsFollowing: Boolean!
  "A list of repositories the given user is watching."
  watching(
    #Affiliation options for repositories returned from the connection
    affiliations: [Github_RepositoryAffiliation],
    #Returns the elements in the list that come after the specified cursor.
    after: String,
    #Returns the elements in the list that come before the specified cursor.
    before: String,
    #Returns the first _n_ elements from the list.
    first: Int,
    #If non-null, filters repositories according to whether they have been locked
    isLocked: Boolean,
    #Returns the last _n_ elements from the list.
    last: Int,
    #Ordering options for repositories returned from the connection
    orderBy: Github_RepositoryOrder,
    #If non-null, filters repositories according to privacy
    privacy: Github_RepositoryPrivacy
  ): Github_RepositoryConnection!
  "A URL pointing to the user's public website/blog."
  websiteUrl: Github_URI
}

"The connection type for User."
type Github_UserConnection {
  "A list of edges."
  edges: [Github_UserEdge]
  "A list of nodes."
  nodes: [Github_User]
  "Information to aid in pagination."
  pageInfo: Github_PageInfo!
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edit on user content"
type Github_UserContentEdit implements Github_Node {
  "Identifies the date and time when the object was created."
  createdAt: Github_DateTime!
  "Identifies the date and time when the object was deleted."
  deletedAt: Github_DateTime
  "The actor who deleted this content"
  deletedBy: Github_Actor
  "A summary of the changes for this edit"
  diff: String
  "When this content was edited"
  editedAt: Github_DateTime!
  "The actor who edited this content"
  editor: Github_Actor
  id: ID!
  "Identifies the date and time when the object was last updated."
  updatedAt: Github_DateTime!
}

"A list of edits to content."
type Github_UserContentEditConnection {
  "A list of edges."
  edges: [Github_UserContentEditEdge]
  "A list of nodes."
  nodes: [Github_UserContentEdit]
  "Information to aid in pagination."
  pageInfo: Github_PageInfo!
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type Github_UserContentEditEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Github_UserContentEdit
}

"An edge in a connection."
type Github_UserEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Github_User
}

type GraphQLSource implements Node {
  children: [Node!]!
  fieldName: String
  id: ID!
  internal: Internal!
  parent: Node
  typeName: String
}

type GraphQLSourceConnection {
  distinct(field: GraphQLSourceFieldsEnum!): [String!]!
  edges: [GraphQLSourceEdge!]!
  group(field: GraphQLSourceFieldsEnum!, limit: Int, skip: Int): [GraphQLSourceGroupConnection!]!
  nodes: [GraphQLSource!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type GraphQLSourceEdge {
  next: GraphQLSource
  node: GraphQLSource!
  previous: GraphQLSource
}

type GraphQLSourceGroupConnection {
  edges: [GraphQLSourceEdge!]!
  field: String!
  fieldValue: String
  nodes: [GraphQLSource!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type ImageSharp implements Node {
  children: [Node!]!
  fixed(base64Width: Int, cropFocus: ImageCropFocus = ATTENTION, duotone: DuotoneGradient, grayscale: Boolean = false, height: Int, jpegProgressive: Boolean = true, pngCompressionSpeed: Int = 4, quality: Int, rotate: Int = 0, toFormat: ImageFormat = NO_CHANGE, toFormatBase64: ImageFormat = NO_CHANGE, traceSVG: Potrace, width: Int): ImageSharpFixed
  fluid(
    background: String = "rgba(0,0,0,1)",
    base64Width: Int,
    cropFocus: ImageCropFocus = ATTENTION,
    duotone: DuotoneGradient,
    fit: ImageFit = COVER,
    grayscale: Boolean = false,
    jpegProgressive: Boolean = true,
    maxHeight: Int,
    maxWidth: Int,
    pngCompressionSpeed: Int = 4,
    quality: Int,
    rotate: Int = 0,
    sizes: String = "",
    #A list of image widths to be generated. Example: [ 200, 340, 520, 890 ]
    srcSetBreakpoints: [Int] = [],
    toFormat: ImageFormat = NO_CHANGE,
    toFormatBase64: ImageFormat = NO_CHANGE,
    traceSVG: Potrace
  ): ImageSharpFluid
  id: ID!
  internal: Internal!
  original: ImageSharpOriginal
  parent: Node
  resize(base64: Boolean = false, cropFocus: ImageCropFocus = ATTENTION, duotone: DuotoneGradient, grayscale: Boolean = false, height: Int, jpegProgressive: Boolean = true, pngCompressionLevel: Int = 9, pngCompressionSpeed: Int = 4, quality: Int, rotate: Int = 0, toFormat: ImageFormat = NO_CHANGE, traceSVG: Potrace, width: Int): ImageSharpResize
  resolutions(base64Width: Int, cropFocus: ImageCropFocus = ATTENTION, duotone: DuotoneGradient, grayscale: Boolean = false, height: Int, jpegProgressive: Boolean = true, pngCompressionSpeed: Int = 4, quality: Int, rotate: Int = 0, toFormat: ImageFormat = NO_CHANGE, toFormatBase64: ImageFormat = NO_CHANGE, traceSVG: Potrace, width: Int): ImageSharpResolutions @deprecated(reason : "Resolutions was deprecated in Gatsby v2. It's been renamed to \"fixed\" https:\/\/example.com\/write-docs-and-fix-this-example-link")
  sizes(
    background: String = "rgba(0,0,0,1)",
    base64Width: Int,
    cropFocus: ImageCropFocus = ATTENTION,
    duotone: DuotoneGradient,
    fit: ImageFit = COVER,
    grayscale: Boolean = false,
    jpegProgressive: Boolean = true,
    maxHeight: Int,
    maxWidth: Int,
    pngCompressionSpeed: Int = 4,
    quality: Int,
    rotate: Int = 0,
    sizes: String = "",
    #A list of image widths to be generated. Example: [ 200, 340, 520, 890 ]
    srcSetBreakpoints: [Int] = [],
    toFormat: ImageFormat = NO_CHANGE,
    toFormatBase64: ImageFormat = NO_CHANGE,
    traceSVG: Potrace
  ): ImageSharpSizes @deprecated(reason : "Sizes was deprecated in Gatsby v2. It's been renamed to \"fluid\" https:\/\/example.com\/write-docs-and-fix-this-example-link")
}

type ImageSharpConnection {
  distinct(field: ImageSharpFieldsEnum!): [String!]!
  edges: [ImageSharpEdge!]!
  group(field: ImageSharpFieldsEnum!, limit: Int, skip: Int): [ImageSharpGroupConnection!]!
  nodes: [ImageSharp!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type ImageSharpEdge {
  next: ImageSharp
  node: ImageSharp!
  previous: ImageSharp
}

type ImageSharpFixed {
  aspectRatio: Float
  base64: String
  height: Float
  originalName: String
  src: String
  srcSet: String
  srcSetWebp: String
  srcWebp: String
  tracedSVG: String
  width: Float
}

type ImageSharpFluid {
  aspectRatio: Float
  base64: String
  originalImg: String
  originalName: String
  presentationHeight: Int
  presentationWidth: Int
  sizes: String
  src: String
  srcSet: String
  srcSetWebp: String
  srcWebp: String
  tracedSVG: String
}

type ImageSharpGroupConnection {
  edges: [ImageSharpEdge!]!
  field: String!
  fieldValue: String
  nodes: [ImageSharp!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type ImageSharpOriginal {
  height: Float
  src: String
  width: Float
}

type ImageSharpResize {
  aspectRatio: Float
  height: Int
  originalName: String
  src: String
  tracedSVG: String
  width: Int
}

type ImageSharpResolutions {
  aspectRatio: Float
  base64: String
  height: Float
  originalName: String
  src: String
  srcSet: String
  srcSetWebp: String
  srcWebp: String
  tracedSVG: String
  width: Float
}

type ImageSharpSizes {
  aspectRatio: Float
  base64: String
  originalImg: String
  originalName: String
  presentationHeight: Int
  presentationWidth: Int
  sizes: String
  src: String
  srcSet: String
  srcSetWebp: String
  srcWebp: String
  tracedSVG: String
}

type Internal {
  content: String
  contentDigest: String!
  description: String
  fieldOwners: [String]
  ignoreType: Boolean
  mediaType: String
  owner: String!
  type: String!
}

type MarkdownHeading {
  depth: Int
  value: String
}

type MarkdownRemark implements Node {
  children: [Node!]!
  excerpt(format: ExcerptFormats = PLAIN, pruneLength: Int = 140, truncate: Boolean = false): String
  excerptAst(pruneLength: Int = 140, truncate: Boolean = false): JSON
  fileAbsolutePath: String
  frontmatter: MarkdownRemarkFrontmatter
  headings(depth: HeadingLevels): [MarkdownHeading]
  html: String
  htmlAst: JSON
  id: ID!
  internal: Internal!
  parent: Node
  rawMarkdownBody: String
  tableOfContents(heading: String, maxDepth: Int, pathToSlugField: String = "fields.slug"): String
  timeToRead: Int
  wordCount: wordCount
}

type MarkdownRemarkConnection {
  distinct(field: MarkdownRemarkFieldsEnum!): [String!]!
  edges: [MarkdownRemarkEdge!]!
  group(field: MarkdownRemarkFieldsEnum!, limit: Int, skip: Int): [MarkdownRemarkGroupConnection!]!
  nodes: [MarkdownRemark!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type MarkdownRemarkEdge {
  next: MarkdownRemark
  node: MarkdownRemark!
  previous: MarkdownRemark
}

type MarkdownRemarkFrontmatter {
  category: String
  date(
    #Returns the difference between this date and the current time. Defaults to \"miliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\".
    difference: String,
    #Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String,
    #Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean,
    #Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date
  description: String
  image: File
  layout: String
  path: String
  tags: [String]
  title: String
}

type MarkdownRemarkGroupConnection {
  edges: [MarkdownRemarkEdge!]!
  field: String!
  fieldValue: String
  nodes: [MarkdownRemark!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type PageInfo {
  hasNextPage: Boolean!
}

type Query {
  allDirectory(filter: DirectoryFilterInput, limit: Int, skip: Int, sort: DirectorySortInput): DirectoryConnection
  allFile(filter: FileFilterInput, limit: Int, skip: Int, sort: FileSortInput): FileConnection
  allGraphQlSource(filter: GraphQLSourceFilterInput, limit: Int, skip: Int, sort: GraphQLSourceSortInput): GraphQLSourceConnection
  allImageSharp(filter: ImageSharpFilterInput, limit: Int, skip: Int, sort: ImageSharpSortInput): ImageSharpConnection
  allMarkdownRemark(filter: MarkdownRemarkFilterInput, limit: Int, skip: Int, sort: MarkdownRemarkSortInput): MarkdownRemarkConnection
  allSite(filter: SiteFilterInput, limit: Int, skip: Int, sort: SiteSortInput): SiteConnection
  allSitePage(filter: SitePageFilterInput, limit: Int, skip: Int, sort: SitePageSortInput): SitePageConnection
  allSitePlugin(filter: SitePluginFilterInput, limit: Int, skip: Int, sort: SitePluginSortInput): SitePluginConnection
  allSkillsJson(filter: SkillsJsonFilterInput, limit: Int, skip: Int, sort: SkillsJsonSortInput): SkillsJsonConnection
  directory(absolutePath: StringQueryOperatorInput, accessTime: DateQueryOperatorInput, atime: DateQueryOperatorInput, atimeMs: FloatQueryOperatorInput, base: StringQueryOperatorInput, birthTime: DateQueryOperatorInput, birthtime: DateQueryOperatorInput, birthtimeMs: FloatQueryOperatorInput, blksize: IntQueryOperatorInput, blocks: IntQueryOperatorInput, changeTime: DateQueryOperatorInput, children: NodeFilterListInput, ctime: DateQueryOperatorInput, ctimeMs: FloatQueryOperatorInput, dev: FloatQueryOperatorInput, dir: StringQueryOperatorInput, ext: StringQueryOperatorInput, extension: StringQueryOperatorInput, gid: IntQueryOperatorInput, id: StringQueryOperatorInput, ino: FloatQueryOperatorInput, internal: InternalFilterInput, mode: IntQueryOperatorInput, modifiedTime: DateQueryOperatorInput, mtime: DateQueryOperatorInput, mtimeMs: FloatQueryOperatorInput, name: StringQueryOperatorInput, nlink: IntQueryOperatorInput, parent: NodeFilterInput, prettySize: StringQueryOperatorInput, rdev: IntQueryOperatorInput, relativeDirectory: StringQueryOperatorInput, relativePath: StringQueryOperatorInput, root: StringQueryOperatorInput, size: IntQueryOperatorInput, sourceInstanceName: StringQueryOperatorInput, uid: IntQueryOperatorInput): Directory
  file(absolutePath: StringQueryOperatorInput, accessTime: DateQueryOperatorInput, atime: DateQueryOperatorInput, atimeMs: FloatQueryOperatorInput, base: StringQueryOperatorInput, birthTime: DateQueryOperatorInput, birthtime: DateQueryOperatorInput, birthtimeMs: FloatQueryOperatorInput, blksize: IntQueryOperatorInput, blocks: IntQueryOperatorInput, changeTime: DateQueryOperatorInput, children: NodeFilterListInput, ctime: DateQueryOperatorInput, ctimeMs: FloatQueryOperatorInput, dev: FloatQueryOperatorInput, dir: StringQueryOperatorInput, ext: StringQueryOperatorInput, extension: StringQueryOperatorInput, gid: IntQueryOperatorInput, id: StringQueryOperatorInput, ino: FloatQueryOperatorInput, internal: InternalFilterInput, mode: IntQueryOperatorInput, modifiedTime: DateQueryOperatorInput, mtime: DateQueryOperatorInput, mtimeMs: FloatQueryOperatorInput, name: StringQueryOperatorInput, nlink: IntQueryOperatorInput, parent: NodeFilterInput, prettySize: StringQueryOperatorInput, publicURL: StringQueryOperatorInput, rdev: IntQueryOperatorInput, relativeDirectory: StringQueryOperatorInput, relativePath: StringQueryOperatorInput, root: StringQueryOperatorInput, size: IntQueryOperatorInput, sourceInstanceName: StringQueryOperatorInput, uid: IntQueryOperatorInput): File
  github: Github
  graphQlSource(children: NodeFilterListInput, fieldName: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, parent: NodeFilterInput, typeName: StringQueryOperatorInput): GraphQLSource
  imageSharp(children: NodeFilterListInput, fixed: ImageSharpFixedFilterInput, fluid: ImageSharpFluidFilterInput, id: StringQueryOperatorInput, internal: InternalFilterInput, original: ImageSharpOriginalFilterInput, parent: NodeFilterInput, resize: ImageSharpResizeFilterInput, resolutions: ImageSharpResolutionsFilterInput, sizes: ImageSharpSizesFilterInput): ImageSharp
  markdownRemark(children: NodeFilterListInput, excerpt: StringQueryOperatorInput, excerptAst: JSONQueryOperatorInput, fileAbsolutePath: StringQueryOperatorInput, frontmatter: MarkdownRemarkFrontmatterFilterInput, headings: MarkdownHeadingFilterListInput, html: StringQueryOperatorInput, htmlAst: JSONQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, parent: NodeFilterInput, rawMarkdownBody: StringQueryOperatorInput, tableOfContents: StringQueryOperatorInput, timeToRead: IntQueryOperatorInput, wordCount: wordCountFilterInput): MarkdownRemark
  site(buildTime: DateQueryOperatorInput, children: NodeFilterListInput, host: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, parent: NodeFilterInput, pathPrefix: StringQueryOperatorInput, polyfill: BooleanQueryOperatorInput, port: IntQueryOperatorInput, siteMetadata: SiteSiteMetadataFilterInput): Site
  sitePage(children: NodeFilterListInput, component: StringQueryOperatorInput, componentChunkName: StringQueryOperatorInput, componentPath: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, internalComponentName: StringQueryOperatorInput, isCreatedByStatefulCreatePages: BooleanQueryOperatorInput, jsonName: StringQueryOperatorInput, parent: NodeFilterInput, path: StringQueryOperatorInput, pluginCreator: SitePluginFilterInput, pluginCreatorId: StringQueryOperatorInput): SitePage
  sitePlugin(browserAPIs: StringQueryOperatorInput, children: NodeFilterListInput, id: StringQueryOperatorInput, internal: InternalFilterInput, name: StringQueryOperatorInput, nodeAPIs: StringQueryOperatorInput, packageJson: SitePluginPackageJsonFilterInput, parent: NodeFilterInput, pluginFilepath: StringQueryOperatorInput, pluginOptions: SitePluginPluginOptionsFilterInput, resolve: StringQueryOperatorInput, ssrAPIs: StringQueryOperatorInput, version: StringQueryOperatorInput): SitePlugin
  skillsJson(children: NodeFilterListInput, id: StringQueryOperatorInput, internal: InternalFilterInput, name: StringQueryOperatorInput, parent: NodeFilterInput, title: StringQueryOperatorInput): SkillsJson
}

type Site implements Node {
  buildTime(
    #Returns the difference between this date and the current time. Defaults to \"miliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\".
    difference: String,
    #Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String,
    #Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean,
    #Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date
  children: [Node!]!
  host: String
  id: ID!
  internal: Internal!
  parent: Node
  pathPrefix: String
  polyfill: Boolean
  port: Int
  siteMetadata: SiteSiteMetadata
}

type SiteConnection {
  distinct(field: SiteFieldsEnum!): [String!]!
  edges: [SiteEdge!]!
  group(field: SiteFieldsEnum!, limit: Int, skip: Int): [SiteGroupConnection!]!
  nodes: [Site!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type SiteEdge {
  next: Site
  node: Site!
  previous: Site
}

type SiteGroupConnection {
  edges: [SiteEdge!]!
  field: String!
  fieldValue: String
  nodes: [Site!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type SitePage implements Node {
  children: [Node!]!
  component: String
  componentChunkName: String
  componentPath: String
  id: ID!
  internal: Internal!
  internalComponentName: String
  isCreatedByStatefulCreatePages: Boolean
  jsonName: String
  parent: Node
  path: String
  pluginCreator: SitePlugin
  pluginCreatorId: String
}

type SitePageConnection {
  distinct(field: SitePageFieldsEnum!): [String!]!
  edges: [SitePageEdge!]!
  group(field: SitePageFieldsEnum!, limit: Int, skip: Int): [SitePageGroupConnection!]!
  nodes: [SitePage!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type SitePageEdge {
  next: SitePage
  node: SitePage!
  previous: SitePage
}

type SitePageGroupConnection {
  edges: [SitePageEdge!]!
  field: String!
  fieldValue: String
  nodes: [SitePage!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type SitePlugin implements Node {
  browserAPIs: [String]
  children: [Node!]!
  id: ID!
  internal: Internal!
  name: String
  nodeAPIs: [String]
  packageJson: SitePluginPackageJson
  parent: Node
  pluginFilepath: String
  pluginOptions: SitePluginPluginOptions
  resolve: String
  ssrAPIs: [String]
  version: String
}

type SitePluginConnection {
  distinct(field: SitePluginFieldsEnum!): [String!]!
  edges: [SitePluginEdge!]!
  group(field: SitePluginFieldsEnum!, limit: Int, skip: Int): [SitePluginGroupConnection!]!
  nodes: [SitePlugin!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type SitePluginEdge {
  next: SitePlugin
  node: SitePlugin!
  previous: SitePlugin
}

type SitePluginGroupConnection {
  edges: [SitePluginEdge!]!
  field: String!
  fieldValue: String
  nodes: [SitePlugin!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type SitePluginPackageJson {
  author: String
  dependencies: [SitePluginPackageJsonDependencies]
  description: String
  devDependencies: [SitePluginPackageJsonDevDependencies]
  keywords: [String]
  license: String
  main: String
  name: String
  peerDependencies: [SitePluginPackageJsonPeerDependencies]
  version: String
}

type SitePluginPackageJsonDependencies {
  name: String
  version: String
}

type SitePluginPackageJsonDevDependencies {
  name: String
  version: String
}

type SitePluginPackageJsonPeerDependencies {
  name: String
  version: String
}

type SitePluginPluginOptions {
  backgroundColor: String
  background_color: String
  description: String
  display: String
  fieldName: String
  homepage_url: String
  icons: [SitePluginPluginOptionsIcons]
  ignoreFileExtensions: [String]
  linkImagesToOriginal: Boolean
  maxWidth: Int
  mergeCachingHeaders: Boolean
  mergeLinkHeaders: Boolean
  mergeSecurityHeaders: Boolean
  name: String
  path: String
  pathCheck: Boolean
  pathPrefix: String
  plugins: [SitePluginPluginOptionsPlugins]
  short_name: String
  showCaptions: Boolean
  start_url: String
  theme_color: String
  tracedSVG: Boolean
  trackingId: String
  typeName: String
  withWebp: Boolean
  wrapperStyle: String
}

type SitePluginPluginOptionsIcons {
  sizes: String
  src: String
  type: String
}

type SitePluginPluginOptionsPlugins {
  browserAPIs: [String]
  id: String
  name: String
  pluginFilepath: String
  pluginOptions: SitePluginPluginOptionsPluginsPluginOptions
  resolve: String
  version: String
}

type SitePluginPluginOptionsPluginsPluginOptions {
  backgroundColor: String
  ignoreFileExtensions: [String]
  linkImagesToOriginal: Boolean
  maxWidth: Int
  pathPrefix: String
  showCaptions: Boolean
  tracedSVG: Boolean
  withWebp: Boolean
  wrapperStyle: String
}

type SiteSiteMetadata {
  adsense: String
  author: String
  description: String
  siteUrl: String
  title: String
  twitter: String
}

type SkillsJson implements Node {
  children: [Node!]!
  id: ID!
  internal: Internal!
  name: String
  parent: Node
  title: String
}

type SkillsJsonConnection {
  distinct(field: SkillsJsonFieldsEnum!): [String!]!
  edges: [SkillsJsonEdge!]!
  group(field: SkillsJsonFieldsEnum!, limit: Int, skip: Int): [SkillsJsonGroupConnection!]!
  nodes: [SkillsJson!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type SkillsJsonEdge {
  next: SkillsJson
  node: SkillsJson!
  previous: SkillsJson
}

type SkillsJsonGroupConnection {
  edges: [SkillsJsonEdge!]!
  field: String!
  fieldValue: String
  nodes: [SkillsJson!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type wordCount {
  paragraphs: Int
  sentences: Int
  words: Int
}

enum DirectoryFieldsEnum {
  absolutePath
  accessTime
  atime
  atimeMs
  base
  birthTime
  birthtime
  birthtimeMs
  blksize
  blocks
  changeTime
  children
  children___children
  children___children___children
  children___children___children___children
  children___children___children___id
  children___children___id
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___children___parent___children
  children___children___parent___id
  children___id
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  children___parent___children
  children___parent___children___children
  children___parent___children___id
  children___parent___id
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___parent___parent___children
  children___parent___parent___id
  ctime
  ctimeMs
  dev
  dir
  ext
  extension
  gid
  id
  ino
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
  mode
  modifiedTime
  mtime
  mtimeMs
  name
  nlink
  parent___children
  parent___children___children
  parent___children___children___children
  parent___children___children___id
  parent___children___id
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___children___parent___children
  parent___children___parent___id
  parent___id
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  parent___parent___children
  parent___parent___children___children
  parent___parent___children___id
  parent___parent___id
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___parent___parent___children
  parent___parent___parent___id
  prettySize
  rdev
  relativeDirectory
  relativePath
  root
  size
  sourceInstanceName
  uid
}

enum ExcerptFormats {
  HTML
  PLAIN
}

enum FileFieldsEnum {
  absolutePath
  accessTime
  atime
  atimeMs
  base
  birthTime
  birthtime
  birthtimeMs
  blksize
  blocks
  changeTime
  children
  children___children
  children___children___children
  children___children___children___children
  children___children___children___id
  children___children___id
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___children___parent___children
  children___children___parent___id
  children___id
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  children___parent___children
  children___parent___children___children
  children___parent___children___id
  children___parent___id
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___parent___parent___children
  children___parent___parent___id
  ctime
  ctimeMs
  dev
  dir
  ext
  extension
  gid
  id
  ino
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
  mode
  modifiedTime
  mtime
  mtimeMs
  name
  nlink
  parent___children
  parent___children___children
  parent___children___children___children
  parent___children___children___id
  parent___children___id
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___children___parent___children
  parent___children___parent___id
  parent___id
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  parent___parent___children
  parent___parent___children___children
  parent___parent___children___id
  parent___parent___id
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___parent___parent___children
  parent___parent___parent___id
  prettySize
  publicURL
  rdev
  relativeDirectory
  relativePath
  root
  size
  sourceInstanceName
  uid
}

"Collaborators affiliation level with a subject."
enum Github_CollaboratorAffiliation {
  #All collaborators the authenticated user can see.
  ALL
  #All collaborators with permissions to an organization-owned subject, regardless of organization membership status.
  DIRECT
  #All outside collaborators of an organization-owned subject.
  OUTSIDE
}

"A comment author association with repository."
enum Github_CommentAuthorAssociation {
  #Author has been invited to collaborate on the repository.
  COLLABORATOR
  #Author has previously committed to the repository.
  CONTRIBUTOR
  #Author has not previously committed to GitHub.
  FIRST_TIMER
  #Author has not previously committed to the repository.
  FIRST_TIME_CONTRIBUTOR
  #Author is a member of the organization that owns the repository.
  MEMBER
  #Author has no association with the repository.
  NONE
  #Author is the owner of the repository.
  OWNER
}

"The possible errors that will prevent a user from updating a comment."
enum Github_CommentCannotUpdateReason {
  #You must be the author or have write access to this repository to update this comment.
  INSUFFICIENT_ACCESS
  #Unable to create comment because issue is locked.
  LOCKED
  #You must be logged in to update this comment.
  LOGIN_REQUIRED
  #Repository is under maintenance.
  MAINTENANCE
  #At least one email address must be verified to update this comment.
  VERIFIED_EMAIL_REQUIRED
}

"The possible default permissions for repositories."
enum Github_DefaultRepositoryPermissionField {
  #Can read, write, and administrate repos by default
  ADMIN
  #No access
  NONE
  #Can read repos by default
  READ
  #Can read and write repos by default
  WRITE
}

"The possible states in which a deployment can be."
enum Github_DeploymentState {
  #The pending deployment was not updated after 30 minutes.
  ABANDONED
  #The deployment is currently active.
  ACTIVE
  #An inactive transient deployment.
  DESTROYED
  #The deployment experienced an error.
  ERROR
  #The deployment has failed.
  FAILURE
  #The deployment is inactive.
  INACTIVE
  #The deployment is pending.
  PENDING
}

"The possible states for a deployment status."
enum Github_DeploymentStatusState {
  #The deployment experienced an error.
  ERROR
  #The deployment has failed.
  FAILURE
  #The deployment is inactive.
  INACTIVE
  #The deployment is pending.
  PENDING
  #The deployment was successful.
  SUCCESS
}

"Properties by which gist connections can be ordered."
enum Github_GistOrderField {
  #Order gists by creation time
  CREATED_AT
  #Order gists by push time
  PUSHED_AT
  #Order gists by update time
  UPDATED_AT
}

"The privacy of a Gist"
enum Github_GistPrivacy {
  #Gists that are public and secret
  ALL
  #Public
  PUBLIC
  #Secret
  SECRET
}

"The state of a Git signature."
enum Github_GitSignatureState {
  #Invalid email used for signing.
  BAD_EMAIL
  #Signing key expired.
  EXPIRED_KEY
  #Internal error - the GPG verification service misbehaved.
  GPGVERIFY_ERROR
  #Internal error - the GPG verification service is unavailable at the moment.
  GPGVERIFY_UNAVAILABLE
  #Invalid signature.
  INVALID
  #Malformed signature.
  MALFORMED_SIG
  #The usage flags for the key that signed this don't allow signing.
  NOT_SIGNING_KEY
  #Email used for signing not known to GitHub.
  NO_USER
  #Valid siganture, though certificate revocation check failed
  OCSP_ERROR
  #Valid signature, pending certificate revocation checking
  OCSP_PENDING
  #One or more certificates in chain has been revoked
  OCSP_REVOKED
  #Key used for signing not known to GitHub.
  UNKNOWN_KEY
  #Unknown signature type.
  UNKNOWN_SIG_TYPE
  #Unsigned.
  UNSIGNED
  #Email used for signing unverified on GitHub.
  UNVERIFIED_EMAIL
  #Valid signature and verified by GitHub.
  VALID
}

"Properties by which issue connections can be ordered."
enum Github_IssueOrderField {
  #Order issues by comment count
  COMMENTS
  #Order issues by creation time
  CREATED_AT
  #Order issues by update time
  UPDATED_AT
}

"The possible PubSub channels for an issue."
enum Github_IssuePubSubTopic {
  #The channel ID for marking an issue as read.
  MARKASREAD
  #The channel ID for updating items on the issue timeline.
  TIMELINE
  #The channel ID for observing issue updates.
  UPDATED
}

"The possible states of an issue."
enum Github_IssueState {
  #An issue that has been closed
  CLOSED
  #An issue that is still open
  OPEN
}

"Properties by which language connections can be ordered."
enum Github_LanguageOrderField {
  #Order languages by the size of all files containing the language
  SIZE
}

"The possible reasons that an issue or pull request was locked."
enum Github_LockReason {
  #The issue or pull request was locked because the conversation was off-topic.
  OFF_TOPIC
  #The issue or pull request was locked because the conversation was resolved.
  RESOLVED
  #The issue or pull request was locked because the conversation was spam.
  SPAM
  #The issue or pull request was locked because the conversation was too heated.
  TOO_HEATED
}

"Whether or not a PullRequest can be merged."
enum Github_MergeableState {
  #The pull request cannot be merged due to merge conflicts.
  CONFLICTING
  #The pull request can be merged.
  MERGEABLE
  #The mergeability of the pull request is still being calculated.
  UNKNOWN
}

"Properties by which milestone connections can be ordered."
enum Github_MilestoneOrderField {
  #Order milestones by when they were created.
  CREATED_AT
  #Order milestones by when they are due.
  DUE_DATE
  #Order milestones by their number.
  NUMBER
  #Order milestones by when they were last updated.
  UPDATED_AT
}

"The possible states of a milestone."
enum Github_MilestoneState {
  #A milestone that has been closed.
  CLOSED
  #A milestone that is still open.
  OPEN
}

"Possible directions in which to order a list of items when provided an `orderBy` argument."
enum Github_OrderDirection {
  #Specifies an ascending order for a given `orderBy` argument.
  ASC
  #Specifies a descending order for a given `orderBy` argument.
  DESC
}

"The possible organization invitation roles."
enum Github_OrganizationInvitationRole {
  #The user is invited to be an admin of the organization.
  ADMIN
  #The user is invited to be a billing manager of the organization.
  BILLING_MANAGER
  #The user is invited to be a direct member of the organization.
  DIRECT_MEMBER
  #The user's previous role will be reinstated.
  REINSTATE
}

"The possible organization invitation types."
enum Github_OrganizationInvitationType {
  #The invitation was to an email address.
  EMAIL
  #The invitation was to an existing user.
  USER
}

"Various content states of a ProjectCard"
enum Github_ProjectCardState {
  #The card has content only.
  CONTENT_ONLY
  #The card has a note only.
  NOTE_ONLY
  #The card is redacted.
  REDACTED
}

"Properties by which project connections can be ordered."
enum Github_ProjectOrderField {
  #Order projects by creation time
  CREATED_AT
  #Order projects by name
  NAME
  #Order projects by update time
  UPDATED_AT
}

"State of the project; either 'open' or 'closed'"
enum Github_ProjectState {
  #The project is closed.
  CLOSED
  #The project is open.
  OPEN
}

"The possible PubSub channels for a pull request."
enum Github_PullRequestPubSubTopic {
  #The channel ID for observing head ref updates.
  HEAD_REF
  #The channel ID for marking an pull request as read.
  MARKASREAD
  #The channel ID for updating items on the pull request timeline.
  TIMELINE
  #The channel ID for observing pull request updates.
  UPDATED
}

"The possible events to perform on a pull request review."
enum Github_PullRequestReviewEvent {
  #Submit feedback and approve merging these changes.
  APPROVE
  #Submit general feedback without explicit approval.
  COMMENT
  #Dismiss review so it now longer effects merging.
  DISMISS
  #Submit feedback that must be addressed before merging.
  REQUEST_CHANGES
}

"The possible states of a pull request review."
enum Github_PullRequestReviewState {
  #A review allowing the pull request to merge.
  APPROVED
  #A review blocking the pull request from merging.
  CHANGES_REQUESTED
  #An informational review.
  COMMENTED
  #A review that has been dismissed.
  DISMISSED
  #A review that has not yet been submitted.
  PENDING
}

"The possible states of a pull request."
enum Github_PullRequestState {
  #A pull request that has been closed without being merged.
  CLOSED
  #A pull request that has been closed by being merged.
  MERGED
  #A pull request that is still open.
  OPEN
}

"Emojis that can be attached to Issues, Pull Requests and Comments."
enum Github_ReactionContent {
  #Represents the  emoji.
  CONFUSED
  #Represents the ❤️ emoji.
  HEART
  #Represents the  emoji.
  HOORAY
  #Represents the  emoji.
  LAUGH
  #Represents the  emoji.
  THUMBS_DOWN
  #Represents the  emoji.
  THUMBS_UP
}

"A list of fields that reactions can be ordered by."
enum Github_ReactionOrderField {
  #Allows ordering a list of reactions by when they were created.
  CREATED_AT
}

"Properties by which ref connections can be ordered."
enum Github_RefOrderField {
  #Order refs by their alphanumeric name
  ALPHABETICAL
  #Order refs by underlying commit date if the ref prefix is refs/tags/
  TAG_COMMIT_DATE
}

"Properties by which release connections can be ordered."
enum Github_ReleaseOrderField {
  #Order releases by creation time
  CREATED_AT
  #Order releases alphabetically by name
  NAME
}

"The affiliation of a user to a repository"
enum Github_RepositoryAffiliation {
  #Repositories that the user has been added to as a collaborator.
  COLLABORATOR
  #
  #Repositories that the user has access to through being a member of an
  #organization. This includes every repository on every team that the user is on.
  ORGANIZATION_MEMBER
  #Repositories that are owned by the authenticated user.
  OWNER
}

"The affiliation type between collaborator and repository."
enum Github_RepositoryCollaboratorAffiliation {
  #All collaborators of the repository.
  ALL
  #All outside collaborators of an organization-owned repository.
  OUTSIDE
}

"The reason a repository is listed as 'contributed'."
enum Github_RepositoryContributionType {
  #Created a commit
  COMMIT
  #Created an issue
  ISSUE
  #Created a pull request
  PULL_REQUEST
  #Reviewed a pull request
  PULL_REQUEST_REVIEW
  #Created the repository
  REPOSITORY
}

"The possible reasons a given repository could be in a locked state."
enum Github_RepositoryLockReason {
  #The repository is locked due to a billing related reason.
  BILLING
  #The repository is locked due to a migration.
  MIGRATING
  #The repository is locked due to a move.
  MOVING
  #The repository is locked due to a rename.
  RENAME
}

"Properties by which repository connections can be ordered."
enum Github_RepositoryOrderField {
  #Order repositories by creation time
  CREATED_AT
  #Order repositories by name
  NAME
  #Order repositories by push time
  PUSHED_AT
  #Order repositories by number of stargazers
  STARGAZERS
  #Order repositories by update time
  UPDATED_AT
}

"The access level to a repository"
enum Github_RepositoryPermission {
  #Can read, clone, push, and add collaborators
  ADMIN
  #Can read and clone
  READ
  #Can read, clone and push
  WRITE
}

"The privacy of a repository"
enum Github_RepositoryPrivacy {
  #Private
  PRIVATE
  #Public
  PUBLIC
}

"Represents the individual results of a search."
enum Github_SearchType {
  #Returns results matching issues in repositories.
  ISSUE
  #Returns results matching repositories.
  REPOSITORY
  #Returns results matching users and organizations on GitHub.
  USER
}

"Properties by which star connections can be ordered."
enum Github_StarOrderField {
  #Allows ordering a list of stars by when they were created.
  STARRED_AT
}

"The possible commit status states."
enum Github_StatusState {
  #Status is errored.
  ERROR
  #Status is expected.
  EXPECTED
  #Status is failing.
  FAILURE
  #Status is pending.
  PENDING
  #Status is successful.
  SUCCESS
}

"The possible states of a subscription."
enum Github_SubscriptionState {
  #The User is never notified.
  IGNORED
  #The User is notified of all conversations.
  SUBSCRIBED
  #The User is only notified when particpating or @mentioned.
  UNSUBSCRIBED
}

"Properties by which team member connections can be ordered."
enum Github_TeamMemberOrderField {
  #Order team members by creation time
  CREATED_AT
  #Order team members by login
  LOGIN
}

"The possible team member roles; either 'maintainer' or 'member'."
enum Github_TeamMemberRole {
  #A team maintainer has permission to add and remove team members.
  MAINTAINER
  #A team member has no administrative permissions on the team.
  MEMBER
}

"Defines which types of team members are included in the returned list. Can be one of IMMEDIATE, CHILD_TEAM or ALL."
enum Github_TeamMembershipType {
  #Includes immediate and child team members for the team.
  ALL
  #Includes only child team members for the team.
  CHILD_TEAM
  #Includes only immediate members of the team.
  IMMEDIATE
}

"Properties by which team connections can be ordered."
enum Github_TeamOrderField {
  #Allows ordering a list of teams by name.
  NAME
}

"The possible team privacy values."
enum Github_TeamPrivacy {
  #A secret team can only be seen by its members.
  SECRET
  #A visible team can be seen and @mentioned by every member of the organization.
  VISIBLE
}

"Properties by which team repository connections can be ordered."
enum Github_TeamRepositoryOrderField {
  #Order repositories by creation time
  CREATED_AT
  #Order repositories by name
  NAME
  #Order repositories by permission
  PERMISSION
  #Order repositories by push time
  PUSHED_AT
  #Order repositories by number of stargazers
  STARGAZERS
  #Order repositories by update time
  UPDATED_AT
}

"The role of a user on a team."
enum Github_TeamRole {
  #User has admin rights on the team.
  ADMIN
  #User is a member of the team.
  MEMBER
}

"Reason that the suggested topic is declined."
enum Github_TopicSuggestionDeclineReason {
  #The suggested topic is not relevant to the repository.
  NOT_RELEVANT
  #The viewer does not like the suggested topic.
  PERSONAL_PREFERENCE
  #The suggested topic is too general for the repository.
  TOO_GENERAL
  #The suggested topic is too specific for the repository (e.g. #ruby-on-rails-version-4-2-1).
  TOO_SPECIFIC
}

enum GraphQLSourceFieldsEnum {
  children
  children___children
  children___children___children
  children___children___children___children
  children___children___children___id
  children___children___id
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___children___parent___children
  children___children___parent___id
  children___id
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  children___parent___children
  children___parent___children___children
  children___parent___children___id
  children___parent___id
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___parent___parent___children
  children___parent___parent___id
  fieldName
  id
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
  parent___children
  parent___children___children
  parent___children___children___children
  parent___children___children___id
  parent___children___id
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___children___parent___children
  parent___children___parent___id
  parent___id
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  parent___parent___children
  parent___parent___children___children
  parent___parent___children___id
  parent___parent___id
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___parent___parent___children
  parent___parent___parent___id
  typeName
}

enum HeadingLevels {
  h1
  h2
  h3
  h4
  h5
  h6
}

enum ImageCropFocus {
  ATTENTION
  CENTER
  EAST
  ENTROPY
  NORTH
  NORTHEAST
  NORTHWEST
  SOUTH
  SOUTHEAST
  SOUTHWEST
  WEST
}

enum ImageFit {
  CONTAIN
  COVER
  FILL
}

enum ImageFormat {
  JPG
  NO_CHANGE
  PNG
  WEBP
}

enum ImageSharpFieldsEnum {
  children
  children___children
  children___children___children
  children___children___children___children
  children___children___children___id
  children___children___id
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___children___parent___children
  children___children___parent___id
  children___id
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  children___parent___children
  children___parent___children___children
  children___parent___children___id
  children___parent___id
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___parent___parent___children
  children___parent___parent___id
  fixed___aspectRatio
  fixed___base64
  fixed___height
  fixed___originalName
  fixed___src
  fixed___srcSet
  fixed___srcSetWebp
  fixed___srcWebp
  fixed___tracedSVG
  fixed___width
  fluid___aspectRatio
  fluid___base64
  fluid___originalImg
  fluid___originalName
  fluid___presentationHeight
  fluid___presentationWidth
  fluid___sizes
  fluid___src
  fluid___srcSet
  fluid___srcSetWebp
  fluid___srcWebp
  fluid___tracedSVG
  id
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
  original___height
  original___src
  original___width
  parent___children
  parent___children___children
  parent___children___children___children
  parent___children___children___id
  parent___children___id
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___children___parent___children
  parent___children___parent___id
  parent___id
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  parent___parent___children
  parent___parent___children___children
  parent___parent___children___id
  parent___parent___id
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___parent___parent___children
  parent___parent___parent___id
  resize___aspectRatio
  resize___height
  resize___originalName
  resize___src
  resize___tracedSVG
  resize___width
  resolutions___aspectRatio
  resolutions___base64
  resolutions___height
  resolutions___originalName
  resolutions___src
  resolutions___srcSet
  resolutions___srcSetWebp
  resolutions___srcWebp
  resolutions___tracedSVG
  resolutions___width
  sizes___aspectRatio
  sizes___base64
  sizes___originalImg
  sizes___originalName
  sizes___presentationHeight
  sizes___presentationWidth
  sizes___sizes
  sizes___src
  sizes___srcSet
  sizes___srcSetWebp
  sizes___srcWebp
  sizes___tracedSVG
}

enum MarkdownRemarkFieldsEnum {
  children
  children___children
  children___children___children
  children___children___children___children
  children___children___children___id
  children___children___id
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___children___parent___children
  children___children___parent___id
  children___id
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  children___parent___children
  children___parent___children___children
  children___parent___children___id
  children___parent___id
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___parent___parent___children
  children___parent___parent___id
  excerpt
  excerptAst
  fileAbsolutePath
  frontmatter___category
  frontmatter___date
  frontmatter___description
  frontmatter___image___absolutePath
  frontmatter___image___accessTime
  frontmatter___image___atime
  frontmatter___image___atimeMs
  frontmatter___image___base
  frontmatter___image___birthTime
  frontmatter___image___birthtime
  frontmatter___image___birthtimeMs
  frontmatter___image___blksize
  frontmatter___image___blocks
  frontmatter___image___changeTime
  frontmatter___image___children
  frontmatter___image___children___children
  frontmatter___image___children___id
  frontmatter___image___ctime
  frontmatter___image___ctimeMs
  frontmatter___image___dev
  frontmatter___image___dir
  frontmatter___image___ext
  frontmatter___image___extension
  frontmatter___image___gid
  frontmatter___image___id
  frontmatter___image___ino
  frontmatter___image___internal___content
  frontmatter___image___internal___contentDigest
  frontmatter___image___internal___description
  frontmatter___image___internal___fieldOwners
  frontmatter___image___internal___ignoreType
  frontmatter___image___internal___mediaType
  frontmatter___image___internal___owner
  frontmatter___image___internal___type
  frontmatter___image___mode
  frontmatter___image___modifiedTime
  frontmatter___image___mtime
  frontmatter___image___mtimeMs
  frontmatter___image___name
  frontmatter___image___nlink
  frontmatter___image___parent___children
  frontmatter___image___parent___id
  frontmatter___image___prettySize
  frontmatter___image___publicURL
  frontmatter___image___rdev
  frontmatter___image___relativeDirectory
  frontmatter___image___relativePath
  frontmatter___image___root
  frontmatter___image___size
  frontmatter___image___sourceInstanceName
  frontmatter___image___uid
  frontmatter___layout
  frontmatter___path
  frontmatter___tags
  frontmatter___title
  headings
  headings___depth
  headings___value
  html
  htmlAst
  id
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
  parent___children
  parent___children___children
  parent___children___children___children
  parent___children___children___id
  parent___children___id
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___children___parent___children
  parent___children___parent___id
  parent___id
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  parent___parent___children
  parent___parent___children___children
  parent___parent___children___id
  parent___parent___id
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___parent___parent___children
  parent___parent___parent___id
  rawMarkdownBody
  tableOfContents
  timeToRead
  wordCount___paragraphs
  wordCount___sentences
  wordCount___words
}

enum PotraceTurnPolicy {
  TURNPOLICY_BLACK
  TURNPOLICY_LEFT
  TURNPOLICY_MAJORITY
  TURNPOLICY_MINORITY
  TURNPOLICY_RIGHT
  TURNPOLICY_WHITE
}

enum SiteFieldsEnum {
  buildTime
  children
  children___children
  children___children___children
  children___children___children___children
  children___children___children___id
  children___children___id
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___children___parent___children
  children___children___parent___id
  children___id
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  children___parent___children
  children___parent___children___children
  children___parent___children___id
  children___parent___id
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___parent___parent___children
  children___parent___parent___id
  host
  id
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
  parent___children
  parent___children___children
  parent___children___children___children
  parent___children___children___id
  parent___children___id
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___children___parent___children
  parent___children___parent___id
  parent___id
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  parent___parent___children
  parent___parent___children___children
  parent___parent___children___id
  parent___parent___id
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___parent___parent___children
  parent___parent___parent___id
  pathPrefix
  polyfill
  port
  siteMetadata___adsense
  siteMetadata___author
  siteMetadata___description
  siteMetadata___siteUrl
  siteMetadata___title
  siteMetadata___twitter
}

enum SitePageFieldsEnum {
  children
  children___children
  children___children___children
  children___children___children___children
  children___children___children___id
  children___children___id
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___children___parent___children
  children___children___parent___id
  children___id
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  children___parent___children
  children___parent___children___children
  children___parent___children___id
  children___parent___id
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___parent___parent___children
  children___parent___parent___id
  component
  componentChunkName
  componentPath
  id
  internalComponentName
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
  isCreatedByStatefulCreatePages
  jsonName
  parent___children
  parent___children___children
  parent___children___children___children
  parent___children___children___id
  parent___children___id
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___children___parent___children
  parent___children___parent___id
  parent___id
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  parent___parent___children
  parent___parent___children___children
  parent___parent___children___id
  parent___parent___id
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___parent___parent___children
  parent___parent___parent___id
  path
  pluginCreatorId
  pluginCreator___browserAPIs
  pluginCreator___children
  pluginCreator___children___children
  pluginCreator___children___children___children
  pluginCreator___children___children___id
  pluginCreator___children___id
  pluginCreator___children___internal___content
  pluginCreator___children___internal___contentDigest
  pluginCreator___children___internal___description
  pluginCreator___children___internal___fieldOwners
  pluginCreator___children___internal___ignoreType
  pluginCreator___children___internal___mediaType
  pluginCreator___children___internal___owner
  pluginCreator___children___internal___type
  pluginCreator___children___parent___children
  pluginCreator___children___parent___id
  pluginCreator___id
  pluginCreator___internal___content
  pluginCreator___internal___contentDigest
  pluginCreator___internal___description
  pluginCreator___internal___fieldOwners
  pluginCreator___internal___ignoreType
  pluginCreator___internal___mediaType
  pluginCreator___internal___owner
  pluginCreator___internal___type
  pluginCreator___name
  pluginCreator___nodeAPIs
  pluginCreator___packageJson___author
  pluginCreator___packageJson___dependencies
  pluginCreator___packageJson___dependencies___name
  pluginCreator___packageJson___dependencies___version
  pluginCreator___packageJson___description
  pluginCreator___packageJson___devDependencies
  pluginCreator___packageJson___devDependencies___name
  pluginCreator___packageJson___devDependencies___version
  pluginCreator___packageJson___keywords
  pluginCreator___packageJson___license
  pluginCreator___packageJson___main
  pluginCreator___packageJson___name
  pluginCreator___packageJson___peerDependencies
  pluginCreator___packageJson___peerDependencies___name
  pluginCreator___packageJson___peerDependencies___version
  pluginCreator___packageJson___version
  pluginCreator___parent___children
  pluginCreator___parent___children___children
  pluginCreator___parent___children___id
  pluginCreator___parent___id
  pluginCreator___parent___internal___content
  pluginCreator___parent___internal___contentDigest
  pluginCreator___parent___internal___description
  pluginCreator___parent___internal___fieldOwners
  pluginCreator___parent___internal___ignoreType
  pluginCreator___parent___internal___mediaType
  pluginCreator___parent___internal___owner
  pluginCreator___parent___internal___type
  pluginCreator___parent___parent___children
  pluginCreator___parent___parent___id
  pluginCreator___pluginFilepath
  pluginCreator___pluginOptions___backgroundColor
  pluginCreator___pluginOptions___background_color
  pluginCreator___pluginOptions___description
  pluginCreator___pluginOptions___display
  pluginCreator___pluginOptions___fieldName
  pluginCreator___pluginOptions___homepage_url
  pluginCreator___pluginOptions___icons
  pluginCreator___pluginOptions___icons___sizes
  pluginCreator___pluginOptions___icons___src
  pluginCreator___pluginOptions___icons___type
  pluginCreator___pluginOptions___ignoreFileExtensions
  pluginCreator___pluginOptions___linkImagesToOriginal
  pluginCreator___pluginOptions___maxWidth
  pluginCreator___pluginOptions___mergeCachingHeaders
  pluginCreator___pluginOptions___mergeLinkHeaders
  pluginCreator___pluginOptions___mergeSecurityHeaders
  pluginCreator___pluginOptions___name
  pluginCreator___pluginOptions___path
  pluginCreator___pluginOptions___pathCheck
  pluginCreator___pluginOptions___pathPrefix
  pluginCreator___pluginOptions___plugins
  pluginCreator___pluginOptions___plugins___browserAPIs
  pluginCreator___pluginOptions___plugins___id
  pluginCreator___pluginOptions___plugins___name
  pluginCreator___pluginOptions___plugins___pluginFilepath
  pluginCreator___pluginOptions___plugins___resolve
  pluginCreator___pluginOptions___plugins___version
  pluginCreator___pluginOptions___short_name
  pluginCreator___pluginOptions___showCaptions
  pluginCreator___pluginOptions___start_url
  pluginCreator___pluginOptions___theme_color
  pluginCreator___pluginOptions___tracedSVG
  pluginCreator___pluginOptions___trackingId
  pluginCreator___pluginOptions___typeName
  pluginCreator___pluginOptions___withWebp
  pluginCreator___pluginOptions___wrapperStyle
  pluginCreator___resolve
  pluginCreator___ssrAPIs
  pluginCreator___version
}

enum SitePluginFieldsEnum {
  browserAPIs
  children
  children___children
  children___children___children
  children___children___children___children
  children___children___children___id
  children___children___id
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___children___parent___children
  children___children___parent___id
  children___id
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  children___parent___children
  children___parent___children___children
  children___parent___children___id
  children___parent___id
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___parent___parent___children
  children___parent___parent___id
  id
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
  name
  nodeAPIs
  packageJson___author
  packageJson___dependencies
  packageJson___dependencies___name
  packageJson___dependencies___version
  packageJson___description
  packageJson___devDependencies
  packageJson___devDependencies___name
  packageJson___devDependencies___version
  packageJson___keywords
  packageJson___license
  packageJson___main
  packageJson___name
  packageJson___peerDependencies
  packageJson___peerDependencies___name
  packageJson___peerDependencies___version
  packageJson___version
  parent___children
  parent___children___children
  parent___children___children___children
  parent___children___children___id
  parent___children___id
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___children___parent___children
  parent___children___parent___id
  parent___id
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  parent___parent___children
  parent___parent___children___children
  parent___parent___children___id
  parent___parent___id
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___parent___parent___children
  parent___parent___parent___id
  pluginFilepath
  pluginOptions___backgroundColor
  pluginOptions___background_color
  pluginOptions___description
  pluginOptions___display
  pluginOptions___fieldName
  pluginOptions___homepage_url
  pluginOptions___icons
  pluginOptions___icons___sizes
  pluginOptions___icons___src
  pluginOptions___icons___type
  pluginOptions___ignoreFileExtensions
  pluginOptions___linkImagesToOriginal
  pluginOptions___maxWidth
  pluginOptions___mergeCachingHeaders
  pluginOptions___mergeLinkHeaders
  pluginOptions___mergeSecurityHeaders
  pluginOptions___name
  pluginOptions___path
  pluginOptions___pathCheck
  pluginOptions___pathPrefix
  pluginOptions___plugins
  pluginOptions___plugins___browserAPIs
  pluginOptions___plugins___id
  pluginOptions___plugins___name
  pluginOptions___plugins___pluginFilepath
  pluginOptions___plugins___pluginOptions___backgroundColor
  pluginOptions___plugins___pluginOptions___ignoreFileExtensions
  pluginOptions___plugins___pluginOptions___linkImagesToOriginal
  pluginOptions___plugins___pluginOptions___maxWidth
  pluginOptions___plugins___pluginOptions___pathPrefix
  pluginOptions___plugins___pluginOptions___showCaptions
  pluginOptions___plugins___pluginOptions___tracedSVG
  pluginOptions___plugins___pluginOptions___withWebp
  pluginOptions___plugins___pluginOptions___wrapperStyle
  pluginOptions___plugins___resolve
  pluginOptions___plugins___version
  pluginOptions___short_name
  pluginOptions___showCaptions
  pluginOptions___start_url
  pluginOptions___theme_color
  pluginOptions___tracedSVG
  pluginOptions___trackingId
  pluginOptions___typeName
  pluginOptions___withWebp
  pluginOptions___wrapperStyle
  resolve
  ssrAPIs
  version
}

enum SkillsJsonFieldsEnum {
  children
  children___children
  children___children___children
  children___children___children___children
  children___children___children___id
  children___children___id
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___children___parent___children
  children___children___parent___id
  children___id
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  children___parent___children
  children___parent___children___children
  children___parent___children___id
  children___parent___id
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___parent___parent___children
  children___parent___parent___id
  id
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
  name
  parent___children
  parent___children___children
  parent___children___children___children
  parent___children___children___id
  parent___children___id
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___children___parent___children
  parent___children___parent___id
  parent___id
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  parent___parent___children
  parent___parent___children___children
  parent___parent___children___id
  parent___parent___id
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___parent___parent___children
  parent___parent___parent___id
  title
}

enum SortOrderEnum {
  ASC
  DESC
}

input BooleanQueryOperatorInput {
  eq: Boolean
  in: [Boolean]
  ne: Boolean
  nin: [Boolean]
}

input DateQueryOperatorInput {
  eq: Date
  gt: Date
  gte: Date
  in: [Date]
  lt: Date
  lte: Date
  ne: Date
  nin: [Date]
}

input DirectoryFilterInput {
  absolutePath: StringQueryOperatorInput
  accessTime: DateQueryOperatorInput
  atime: DateQueryOperatorInput
  atimeMs: FloatQueryOperatorInput
  base: StringQueryOperatorInput
  birthTime: DateQueryOperatorInput
  birthtime: DateQueryOperatorInput
  birthtimeMs: FloatQueryOperatorInput
  blksize: IntQueryOperatorInput
  blocks: IntQueryOperatorInput
  changeTime: DateQueryOperatorInput
  children: NodeFilterListInput
  ctime: DateQueryOperatorInput
  ctimeMs: FloatQueryOperatorInput
  dev: FloatQueryOperatorInput
  dir: StringQueryOperatorInput
  ext: StringQueryOperatorInput
  extension: StringQueryOperatorInput
  gid: IntQueryOperatorInput
  id: StringQueryOperatorInput
  ino: FloatQueryOperatorInput
  internal: InternalFilterInput
  mode: IntQueryOperatorInput
  modifiedTime: DateQueryOperatorInput
  mtime: DateQueryOperatorInput
  mtimeMs: FloatQueryOperatorInput
  name: StringQueryOperatorInput
  nlink: IntQueryOperatorInput
  parent: NodeFilterInput
  prettySize: StringQueryOperatorInput
  rdev: IntQueryOperatorInput
  relativeDirectory: StringQueryOperatorInput
  relativePath: StringQueryOperatorInput
  root: StringQueryOperatorInput
  size: IntQueryOperatorInput
  sourceInstanceName: StringQueryOperatorInput
  uid: IntQueryOperatorInput
}

input DirectorySortInput {
  fields: [DirectoryFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

input DuotoneGradient {
  highlight: String
  opacity: Int
  shadow: String
}

input FileFilterInput {
  absolutePath: StringQueryOperatorInput
  accessTime: DateQueryOperatorInput
  atime: DateQueryOperatorInput
  atimeMs: FloatQueryOperatorInput
  base: StringQueryOperatorInput
  birthTime: DateQueryOperatorInput
  birthtime: DateQueryOperatorInput
  birthtimeMs: FloatQueryOperatorInput
  blksize: IntQueryOperatorInput
  blocks: IntQueryOperatorInput
  changeTime: DateQueryOperatorInput
  children: NodeFilterListInput
  ctime: DateQueryOperatorInput
  ctimeMs: FloatQueryOperatorInput
  dev: FloatQueryOperatorInput
  dir: StringQueryOperatorInput
  ext: StringQueryOperatorInput
  extension: StringQueryOperatorInput
  gid: IntQueryOperatorInput
  id: StringQueryOperatorInput
  ino: FloatQueryOperatorInput
  internal: InternalFilterInput
  mode: IntQueryOperatorInput
  modifiedTime: DateQueryOperatorInput
  mtime: DateQueryOperatorInput
  mtimeMs: FloatQueryOperatorInput
  name: StringQueryOperatorInput
  nlink: IntQueryOperatorInput
  parent: NodeFilterInput
  prettySize: StringQueryOperatorInput
  publicURL: StringQueryOperatorInput
  rdev: IntQueryOperatorInput
  relativeDirectory: StringQueryOperatorInput
  relativePath: StringQueryOperatorInput
  root: StringQueryOperatorInput
  size: IntQueryOperatorInput
  sourceInstanceName: StringQueryOperatorInput
  uid: IntQueryOperatorInput
}

input FileSortInput {
  fields: [FileFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

input FloatQueryOperatorInput {
  eq: Float
  gt: Float
  gte: Float
  in: [Float]
  lt: Float
  lte: Float
  ne: Float
  nin: [Float]
}

"Autogenerated input type of AcceptTopicSuggestion"
input Github_AcceptTopicSuggestionInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  "The name of the suggested topic."
  name: String!
  "The Node ID of the repository."
  repositoryId: ID!
}

"Autogenerated input type of AddComment"
input Github_AddCommentInput {
  "The contents of the comment."
  body: String!
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  "The Node ID of the subject to modify."
  subjectId: ID!
}

"Autogenerated input type of AddProjectCard"
input Github_AddProjectCardInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  "The content of the card. Must be a member of the ProjectCardItem union"
  contentId: ID
  "The note on the card."
  note: String
  "The Node ID of the ProjectColumn."
  projectColumnId: ID!
}

"Autogenerated input type of AddProjectColumn"
input Github_AddProjectColumnInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  "The name of the column."
  name: String!
  "The Node ID of the project."
  projectId: ID!
}

"Autogenerated input type of AddPullRequestReviewComment"
input Github_AddPullRequestReviewCommentInput {
  "The text of the comment."
  body: String!
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  "The SHA of the commit to comment on."
  commitOID: Github_GitObjectID
  "The comment id to reply to."
  inReplyTo: ID
  "The relative path of the file to comment on."
  path: String
  "The line index in the diff to comment on."
  position: Int
  "The Node ID of the review to modify."
  pullRequestReviewId: ID!
}

"Autogenerated input type of AddPullRequestReview"
input Github_AddPullRequestReviewInput {
  "The contents of the review body comment."
  body: String
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  "The review line comments."
  comments: [Github_DraftPullRequestReviewComment]
  "The commit OID the review pertains to."
  commitOID: Github_GitObjectID
  "The event to perform on the pull request review."
  event: Github_PullRequestReviewEvent
  "The Node ID of the pull request to modify."
  pullRequestId: ID!
}

"Autogenerated input type of AddReaction"
input Github_AddReactionInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  "The name of the emoji to react with."
  content: Github_ReactionContent!
  "The Node ID of the subject to modify."
  subjectId: ID!
}

"Autogenerated input type of AddStar"
input Github_AddStarInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  "The Starrable ID to star."
  starrableId: ID!
}

"Specifies an author for filtering Git commits."
input Github_CommitAuthor {
  "Email addresses to filter by. Commits authored by any of the specified email addresses will be returned."
  emails: [String!]
  """
  ID of a User to filter by. If non-null, only commits authored by this user
  will be returned. This field takes precedence over emails.
  """
  id: ID
}

"Autogenerated input type of CreateProject"
input Github_CreateProjectInput {
  "The description of project."
  body: String
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  "The name of project."
  name: String!
  "The owner ID to create the project under."
  ownerId: ID!
}

"Autogenerated input type of DeclineTopicSuggestion"
input Github_DeclineTopicSuggestionInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  "The name of the suggested topic."
  name: String!
  "The reason why the suggested topic is declined."
  reason: Github_TopicSuggestionDeclineReason!
  "The Node ID of the repository."
  repositoryId: ID!
}

"Autogenerated input type of DeleteProjectCard"
input Github_DeleteProjectCardInput {
  "The id of the card to delete."
  cardId: ID!
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
}

"Autogenerated input type of DeleteProjectColumn"
input Github_DeleteProjectColumnInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  "The id of the column to delete."
  columnId: ID!
}

"Autogenerated input type of DeleteProject"
input Github_DeleteProjectInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  "The Project ID to update."
  projectId: ID!
}

"Autogenerated input type of DeletePullRequestReview"
input Github_DeletePullRequestReviewInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  "The Node ID of the pull request review to delete."
  pullRequestReviewId: ID!
}

"Autogenerated input type of DismissPullRequestReview"
input Github_DismissPullRequestReviewInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  "The contents of the pull request review dismissal message."
  message: String!
  "The Node ID of the pull request review to modify."
  pullRequestReviewId: ID!
}

"Specifies a review comment to be left with a Pull Request Review."
input Github_DraftPullRequestReviewComment {
  "Body of the comment to leave."
  body: String!
  "Path to the file being commented on."
  path: String!
  "Position in the file to leave a comment on."
  position: Int!
}

"Ordering options for gist connections"
input Github_GistOrder {
  "The ordering direction."
  direction: Github_OrderDirection!
  "The field to order repositories by."
  field: Github_GistOrderField!
}

"Ways in which lists of issues can be ordered upon return."
input Github_IssueOrder {
  "The direction in which to order issues by the specified field."
  direction: Github_OrderDirection!
  "The field in which to order issues by."
  field: Github_IssueOrderField!
}

"Ordering options for language connections."
input Github_LanguageOrder {
  "The ordering direction."
  direction: Github_OrderDirection!
  "The field to order languages by."
  field: Github_LanguageOrderField!
}

"Autogenerated input type of LockLockable"
input Github_LockLockableInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  "A reason for why the issue or pull request will be locked."
  lockReason: Github_LockReason
  "ID of the issue or pull request to be locked."
  lockableId: ID!
}

"Ordering options for milestone connections."
input Github_MilestoneOrder {
  "The ordering direction."
  direction: Github_OrderDirection!
  "The field to order milestones by."
  field: Github_MilestoneOrderField!
}

"Autogenerated input type of MoveProjectCard"
input Github_MoveProjectCardInput {
  "Place the new card after the card with this id. Pass null to place it at the top."
  afterCardId: ID
  "The id of the card to move."
  cardId: ID!
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  "The id of the column to move it into."
  columnId: ID!
}

"Autogenerated input type of MoveProjectColumn"
input Github_MoveProjectColumnInput {
  "Place the new column after the column with this id. Pass null to place it at the front."
  afterColumnId: ID
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  "The id of the column to move."
  columnId: ID!
}

"Ways in which lists of projects can be ordered upon return."
input Github_ProjectOrder {
  "The direction in which to order projects by the specified field."
  direction: Github_OrderDirection!
  "The field in which to order projects by."
  field: Github_ProjectOrderField!
}

"Ways in which lists of reactions can be ordered upon return."
input Github_ReactionOrder {
  "The direction in which to order reactions by the specified field."
  direction: Github_OrderDirection!
  "The field in which to order reactions by."
  field: Github_ReactionOrderField!
}

"Ways in which lists of git refs can be ordered upon return."
input Github_RefOrder {
  "The direction in which to order refs by the specified field."
  direction: Github_OrderDirection!
  "The field in which to order refs by."
  field: Github_RefOrderField!
}

"Ways in which lists of releases can be ordered upon return."
input Github_ReleaseOrder {
  "The direction in which to order releases by the specified field."
  direction: Github_OrderDirection!
  "The field in which to order releases by."
  field: Github_ReleaseOrderField!
}

"Autogenerated input type of RemoveOutsideCollaborator"
input Github_RemoveOutsideCollaboratorInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  "The ID of the organization to remove the outside collaborator from."
  organizationId: ID!
  "The ID of the outside collaborator to remove."
  userId: ID!
}

"Autogenerated input type of RemoveReaction"
input Github_RemoveReactionInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  "The name of the emoji reaction to remove."
  content: Github_ReactionContent!
  "The Node ID of the subject to modify."
  subjectId: ID!
}

"Autogenerated input type of RemoveStar"
input Github_RemoveStarInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  "The Starrable ID to unstar."
  starrableId: ID!
}

"Ordering options for repository connections"
input Github_RepositoryOrder {
  "The ordering direction."
  direction: Github_OrderDirection!
  "The field to order repositories by."
  field: Github_RepositoryOrderField!
}

"Autogenerated input type of RequestReviews"
input Github_RequestReviewsInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  "The Node ID of the pull request to modify."
  pullRequestId: ID!
  "The Node IDs of the team to request."
  teamIds: [ID!]
  "Add users to the set rather than replace."
  union: Boolean
  "The Node IDs of the user to request."
  userIds: [ID!]
}

"Ways in which star connections can be ordered."
input Github_StarOrder {
  "The direction in which to order nodes."
  direction: Github_OrderDirection!
  "The field in which to order nodes by."
  field: Github_StarOrderField!
}

"Autogenerated input type of SubmitPullRequestReview"
input Github_SubmitPullRequestReviewInput {
  "The text field to set on the Pull Request Review."
  body: String
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  "The event to send to the Pull Request Review."
  event: Github_PullRequestReviewEvent!
  "The Pull Request Review ID to submit."
  pullRequestReviewId: ID!
}

"Ordering options for team member connections"
input Github_TeamMemberOrder {
  "The ordering direction."
  direction: Github_OrderDirection!
  "The field to order team members by."
  field: Github_TeamMemberOrderField!
}

"Ways in which team connections can be ordered."
input Github_TeamOrder {
  "The direction in which to order nodes."
  direction: Github_OrderDirection!
  "The field in which to order nodes by."
  field: Github_TeamOrderField!
}

"Ordering options for team repository connections"
input Github_TeamRepositoryOrder {
  "The ordering direction."
  direction: Github_OrderDirection!
  "The field to order repositories by."
  field: Github_TeamRepositoryOrderField!
}

"Autogenerated input type of UnlockLockable"
input Github_UnlockLockableInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  "ID of the issue or pull request to be unlocked."
  lockableId: ID!
}

"Autogenerated input type of UpdateProjectCard"
input Github_UpdateProjectCardInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  "The note of ProjectCard."
  note: String
  "The ProjectCard ID to update."
  projectCardId: ID!
}

"Autogenerated input type of UpdateProjectColumn"
input Github_UpdateProjectColumnInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  "The name of project column."
  name: String!
  "The ProjectColumn ID to update."
  projectColumnId: ID!
}

"Autogenerated input type of UpdateProject"
input Github_UpdateProjectInput {
  "The description of project."
  body: String
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  "The name of project."
  name: String
  "The Project ID to update."
  projectId: ID!
  "Whether the project is public or not."
  public: Boolean
  "Whether the project is open or closed."
  state: Github_ProjectState
}

"Autogenerated input type of UpdatePullRequestReviewComment"
input Github_UpdatePullRequestReviewCommentInput {
  "The text of the comment."
  body: String!
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  "The Node ID of the comment to modify."
  pullRequestReviewCommentId: ID!
}

"Autogenerated input type of UpdatePullRequestReview"
input Github_UpdatePullRequestReviewInput {
  "The contents of the pull request review body."
  body: String!
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  "The Node ID of the pull request review to modify."
  pullRequestReviewId: ID!
}

"Autogenerated input type of UpdateSubscription"
input Github_UpdateSubscriptionInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  "The new state of the subscription."
  state: Github_SubscriptionState!
  "The Node ID of the subscribable object to modify."
  subscribableId: ID!
}

"Autogenerated input type of UpdateTopics"
input Github_UpdateTopicsInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  "The Node ID of the repository."
  repositoryId: ID!
  "An array of topic names."
  topicNames: [String!]!
}

input GraphQLSourceFilterInput {
  children: NodeFilterListInput
  fieldName: StringQueryOperatorInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  parent: NodeFilterInput
  typeName: StringQueryOperatorInput
}

input GraphQLSourceSortInput {
  fields: [GraphQLSourceFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

input ImageSharpFilterInput {
  children: NodeFilterListInput
  fixed: ImageSharpFixedFilterInput
  fluid: ImageSharpFluidFilterInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  original: ImageSharpOriginalFilterInput
  parent: NodeFilterInput
  resize: ImageSharpResizeFilterInput
  resolutions: ImageSharpResolutionsFilterInput
  sizes: ImageSharpSizesFilterInput
}

input ImageSharpFixedFilterInput {
  aspectRatio: FloatQueryOperatorInput
  base64: StringQueryOperatorInput
  height: FloatQueryOperatorInput
  originalName: StringQueryOperatorInput
  src: StringQueryOperatorInput
  srcSet: StringQueryOperatorInput
  srcSetWebp: StringQueryOperatorInput
  srcWebp: StringQueryOperatorInput
  tracedSVG: StringQueryOperatorInput
  width: FloatQueryOperatorInput
}

input ImageSharpFluidFilterInput {
  aspectRatio: FloatQueryOperatorInput
  base64: StringQueryOperatorInput
  originalImg: StringQueryOperatorInput
  originalName: StringQueryOperatorInput
  presentationHeight: IntQueryOperatorInput
  presentationWidth: IntQueryOperatorInput
  sizes: StringQueryOperatorInput
  src: StringQueryOperatorInput
  srcSet: StringQueryOperatorInput
  srcSetWebp: StringQueryOperatorInput
  srcWebp: StringQueryOperatorInput
  tracedSVG: StringQueryOperatorInput
}

input ImageSharpOriginalFilterInput {
  height: FloatQueryOperatorInput
  src: StringQueryOperatorInput
  width: FloatQueryOperatorInput
}

input ImageSharpResizeFilterInput {
  aspectRatio: FloatQueryOperatorInput
  height: IntQueryOperatorInput
  originalName: StringQueryOperatorInput
  src: StringQueryOperatorInput
  tracedSVG: StringQueryOperatorInput
  width: IntQueryOperatorInput
}

input ImageSharpResolutionsFilterInput {
  aspectRatio: FloatQueryOperatorInput
  base64: StringQueryOperatorInput
  height: FloatQueryOperatorInput
  originalName: StringQueryOperatorInput
  src: StringQueryOperatorInput
  srcSet: StringQueryOperatorInput
  srcSetWebp: StringQueryOperatorInput
  srcWebp: StringQueryOperatorInput
  tracedSVG: StringQueryOperatorInput
  width: FloatQueryOperatorInput
}

input ImageSharpSizesFilterInput {
  aspectRatio: FloatQueryOperatorInput
  base64: StringQueryOperatorInput
  originalImg: StringQueryOperatorInput
  originalName: StringQueryOperatorInput
  presentationHeight: IntQueryOperatorInput
  presentationWidth: IntQueryOperatorInput
  sizes: StringQueryOperatorInput
  src: StringQueryOperatorInput
  srcSet: StringQueryOperatorInput
  srcSetWebp: StringQueryOperatorInput
  srcWebp: StringQueryOperatorInput
  tracedSVG: StringQueryOperatorInput
}

input ImageSharpSortInput {
  fields: [ImageSharpFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

input IntQueryOperatorInput {
  eq: Int
  gt: Int
  gte: Int
  in: [Int]
  lt: Int
  lte: Int
  ne: Int
  nin: [Int]
}

input InternalFilterInput {
  content: StringQueryOperatorInput
  contentDigest: StringQueryOperatorInput
  description: StringQueryOperatorInput
  fieldOwners: StringQueryOperatorInput
  ignoreType: BooleanQueryOperatorInput
  mediaType: StringQueryOperatorInput
  owner: StringQueryOperatorInput
  type: StringQueryOperatorInput
}

input JSONQueryOperatorInput {
  eq: JSON
  glob: JSON
  in: [JSON]
  ne: JSON
  nin: [JSON]
  regex: JSON
}

input MarkdownHeadingFilterInput {
  depth: IntQueryOperatorInput
  value: StringQueryOperatorInput
}

input MarkdownHeadingFilterListInput {
  elemMatch: MarkdownHeadingFilterInput
}

input MarkdownRemarkFilterInput {
  children: NodeFilterListInput
  excerpt: StringQueryOperatorInput
  excerptAst: JSONQueryOperatorInput
  fileAbsolutePath: StringQueryOperatorInput
  frontmatter: MarkdownRemarkFrontmatterFilterInput
  headings: MarkdownHeadingFilterListInput
  html: StringQueryOperatorInput
  htmlAst: JSONQueryOperatorInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  parent: NodeFilterInput
  rawMarkdownBody: StringQueryOperatorInput
  tableOfContents: StringQueryOperatorInput
  timeToRead: IntQueryOperatorInput
  wordCount: wordCountFilterInput
}

input MarkdownRemarkFrontmatterFilterInput {
  category: StringQueryOperatorInput
  date: DateQueryOperatorInput
  description: StringQueryOperatorInput
  image: FileFilterInput
  layout: StringQueryOperatorInput
  path: StringQueryOperatorInput
  tags: StringQueryOperatorInput
  title: StringQueryOperatorInput
}

input MarkdownRemarkSortInput {
  fields: [MarkdownRemarkFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

input NodeFilterInput {
  children: NodeFilterListInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  parent: NodeFilterInput
}

input NodeFilterListInput {
  elemMatch: NodeFilterInput
}

input Potrace {
  alphaMax: Float
  background: String
  blackOnWhite: Boolean
  color: String
  optCurve: Boolean
  optTolerance: Float
  threshold: Int
  turdSize: Float
  turnPolicy: PotraceTurnPolicy
}

input SiteFilterInput {
  buildTime: DateQueryOperatorInput
  children: NodeFilterListInput
  host: StringQueryOperatorInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  parent: NodeFilterInput
  pathPrefix: StringQueryOperatorInput
  polyfill: BooleanQueryOperatorInput
  port: IntQueryOperatorInput
  siteMetadata: SiteSiteMetadataFilterInput
}

input SitePageFilterInput {
  children: NodeFilterListInput
  component: StringQueryOperatorInput
  componentChunkName: StringQueryOperatorInput
  componentPath: StringQueryOperatorInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  internalComponentName: StringQueryOperatorInput
  isCreatedByStatefulCreatePages: BooleanQueryOperatorInput
  jsonName: StringQueryOperatorInput
  parent: NodeFilterInput
  path: StringQueryOperatorInput
  pluginCreator: SitePluginFilterInput
  pluginCreatorId: StringQueryOperatorInput
}

input SitePageSortInput {
  fields: [SitePageFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

input SitePluginFilterInput {
  browserAPIs: StringQueryOperatorInput
  children: NodeFilterListInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  name: StringQueryOperatorInput
  nodeAPIs: StringQueryOperatorInput
  packageJson: SitePluginPackageJsonFilterInput
  parent: NodeFilterInput
  pluginFilepath: StringQueryOperatorInput
  pluginOptions: SitePluginPluginOptionsFilterInput
  resolve: StringQueryOperatorInput
  ssrAPIs: StringQueryOperatorInput
  version: StringQueryOperatorInput
}

input SitePluginPackageJsonDependenciesFilterInput {
  name: StringQueryOperatorInput
  version: StringQueryOperatorInput
}

input SitePluginPackageJsonDependenciesFilterListInput {
  elemMatch: SitePluginPackageJsonDependenciesFilterInput
}

input SitePluginPackageJsonDevDependenciesFilterInput {
  name: StringQueryOperatorInput
  version: StringQueryOperatorInput
}

input SitePluginPackageJsonDevDependenciesFilterListInput {
  elemMatch: SitePluginPackageJsonDevDependenciesFilterInput
}

input SitePluginPackageJsonFilterInput {
  author: StringQueryOperatorInput
  dependencies: SitePluginPackageJsonDependenciesFilterListInput
  description: StringQueryOperatorInput
  devDependencies: SitePluginPackageJsonDevDependenciesFilterListInput
  keywords: StringQueryOperatorInput
  license: StringQueryOperatorInput
  main: StringQueryOperatorInput
  name: StringQueryOperatorInput
  peerDependencies: SitePluginPackageJsonPeerDependenciesFilterListInput
  version: StringQueryOperatorInput
}

input SitePluginPackageJsonPeerDependenciesFilterInput {
  name: StringQueryOperatorInput
  version: StringQueryOperatorInput
}

input SitePluginPackageJsonPeerDependenciesFilterListInput {
  elemMatch: SitePluginPackageJsonPeerDependenciesFilterInput
}

input SitePluginPluginOptionsFilterInput {
  backgroundColor: StringQueryOperatorInput
  background_color: StringQueryOperatorInput
  description: StringQueryOperatorInput
  display: StringQueryOperatorInput
  fieldName: StringQueryOperatorInput
  homepage_url: StringQueryOperatorInput
  icons: SitePluginPluginOptionsIconsFilterListInput
  ignoreFileExtensions: StringQueryOperatorInput
  linkImagesToOriginal: BooleanQueryOperatorInput
  maxWidth: IntQueryOperatorInput
  mergeCachingHeaders: BooleanQueryOperatorInput
  mergeLinkHeaders: BooleanQueryOperatorInput
  mergeSecurityHeaders: BooleanQueryOperatorInput
  name: StringQueryOperatorInput
  path: StringQueryOperatorInput
  pathCheck: BooleanQueryOperatorInput
  pathPrefix: StringQueryOperatorInput
  plugins: SitePluginPluginOptionsPluginsFilterListInput
  short_name: StringQueryOperatorInput
  showCaptions: BooleanQueryOperatorInput
  start_url: StringQueryOperatorInput
  theme_color: StringQueryOperatorInput
  tracedSVG: BooleanQueryOperatorInput
  trackingId: StringQueryOperatorInput
  typeName: StringQueryOperatorInput
  withWebp: BooleanQueryOperatorInput
  wrapperStyle: StringQueryOperatorInput
}

input SitePluginPluginOptionsIconsFilterInput {
  sizes: StringQueryOperatorInput
  src: StringQueryOperatorInput
  type: StringQueryOperatorInput
}

input SitePluginPluginOptionsIconsFilterListInput {
  elemMatch: SitePluginPluginOptionsIconsFilterInput
}

input SitePluginPluginOptionsPluginsFilterInput {
  browserAPIs: StringQueryOperatorInput
  id: StringQueryOperatorInput
  name: StringQueryOperatorInput
  pluginFilepath: StringQueryOperatorInput
  pluginOptions: SitePluginPluginOptionsPluginsPluginOptionsFilterInput
  resolve: StringQueryOperatorInput
  version: StringQueryOperatorInput
}

input SitePluginPluginOptionsPluginsFilterListInput {
  elemMatch: SitePluginPluginOptionsPluginsFilterInput
}

input SitePluginPluginOptionsPluginsPluginOptionsFilterInput {
  backgroundColor: StringQueryOperatorInput
  ignoreFileExtensions: StringQueryOperatorInput
  linkImagesToOriginal: BooleanQueryOperatorInput
  maxWidth: IntQueryOperatorInput
  pathPrefix: StringQueryOperatorInput
  showCaptions: BooleanQueryOperatorInput
  tracedSVG: BooleanQueryOperatorInput
  withWebp: BooleanQueryOperatorInput
  wrapperStyle: StringQueryOperatorInput
}

input SitePluginSortInput {
  fields: [SitePluginFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

input SiteSiteMetadataFilterInput {
  adsense: StringQueryOperatorInput
  author: StringQueryOperatorInput
  description: StringQueryOperatorInput
  siteUrl: StringQueryOperatorInput
  title: StringQueryOperatorInput
  twitter: StringQueryOperatorInput
}

input SiteSortInput {
  fields: [SiteFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

input SkillsJsonFilterInput {
  children: NodeFilterListInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  name: StringQueryOperatorInput
  parent: NodeFilterInput
  title: StringQueryOperatorInput
}

input SkillsJsonSortInput {
  fields: [SkillsJsonFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

input StringQueryOperatorInput {
  eq: String
  glob: String
  in: [String]
  ne: String
  nin: [String]
  regex: String
}

input wordCountFilterInput {
  paragraphs: IntQueryOperatorInput
  sentences: IntQueryOperatorInput
  words: IntQueryOperatorInput
}


"A date string, such as 2007-12-03, compliant with the ISO 8601 standard for representation of dates and times using the Gregorian calendar."
scalar Date

"The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf)."
scalar JSON

"An RFC 3986, RFC 3987, and RFC 6570 (level 4) compliant URI string."
scalar Github_URI

"A string containing HTML code."
scalar Github_HTML

"An ISO-8601 encoded UTC date string."
scalar Github_DateTime

"A Git object ID."
scalar Github_GitObjectID

"An ISO-8601 encoded date string. Unlike the DateTime type, GitTimestamp is not converted in UTC."
scalar Github_GitTimestamp

"Git SSH string"
scalar Github_GitSSHRemote

"A valid x509 certificate string"
scalar Github_X509Certificate

"An ISO-8601 encoded date string."
scalar Github_Date
